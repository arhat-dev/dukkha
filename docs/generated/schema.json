{
  "$ref": "#/definitions/Schema",
  "type": "object",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AnyObject": {
      "description": "a `interface{}` equivalent with rendering suffix support",
      "x-intellij-html-description": "a <code>interface{}</code> equivalent with rendering suffix support"
    },
    "JSONPatchSpec": {
      "properties": {
        "op": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "select": {
          "type": "string",
          "description": "part of the value for patching  this action happens before patching",
          "x-intellij-html-description": "part of the value for patching  this action happens before patching"
        },
        "value": {
          "$ref": "#/definitions/AnyObject"
        }
      },
      "preferredOrder": [
        "op",
        "path",
        "value",
        "select"
      ],
      "additionalProperties": false,
      "description": "per rfc6902",
      "x-intellij-html-description": "per rfc6902",
      "patternProperties": {
        "^op@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^select@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^value@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "MergeSource": {
      "properties": {
        "select": {
          "type": "string",
          "description": "some data from the source",
          "x-intellij-html-description": "some data from the source"
        },
        "value": {
          "$ref": "#/definitions/AnyObject",
          "description": "for the source",
          "x-intellij-html-description": "for the source"
        }
      },
      "preferredOrder": [
        "value",
        "select"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^select@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^value@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "PatchSpec": {
      "properties": {
        "map_list_append": {
          "type": "boolean",
          "description": "to append lists instead of replacing existing list",
          "x-intellij-html-description": "to append lists instead of replacing existing list",
          "default": "false"
        },
        "map_list_item_unique": {
          "type": "boolean",
          "description": "to ensure items are unique in all merged lists respectively lists with no merge data input are untouched",
          "x-intellij-html-description": "to ensure items are unique in all merged lists respectively lists with no merge data input are untouched",
          "default": "false"
        },
        "merge": {
          "items": {
            "$ref": "#/definitions/MergeSource"
          },
          "type": "array",
          "description": "additional data into Value  this action happens first",
          "x-intellij-html-description": "additional data into Value  this action happens first"
        },
        "patch": {
          "items": {
            "$ref": "#/definitions/JSONPatchSpec"
          },
          "type": "array",
          "description": "Value using standard rfc6902 json-patch  this action happens after merge",
          "x-intellij-html-description": "Value using standard rfc6902 json-patch  this action happens after merge"
        },
        "select": {
          "type": "string",
          "description": "part of the data as final result  this action happens after merge and patch",
          "x-intellij-html-description": "part of the data as final result  this action happens after merge and patch"
        },
        "unique": {
          "type": "boolean",
          "description": "to make sure elements in the sequence is unique  only effective when Value is yaml sequence",
          "x-intellij-html-description": "to make sure elements in the sequence is unique  only effective when Value is yaml sequence",
          "default": "false"
        },
        "value": {
          "$ref": "#/definitions/AnyObject",
          "description": "for the renderer  \tsay we have a yaml list (`[bar]`) stored at https://example.com/bar.yaml  \t\tfoo@http!: \t\t  value: https://example.com/bar.yaml \t\t  merge: { value: [foo] }  then the resolve value of foo will be `[bar, foo]`",
          "x-intellij-html-description": "for the renderer  \tsay we have a yaml list (<code>[bar]</code>) stored at https://example.com/bar.yaml  \t\tfoo@http!: \t\t  value: https://example.com/bar.yaml \t\t  merge: { value: [foo] }  then the resolve value of foo will be <code>[bar, foo]</code>"
        }
      },
      "preferredOrder": [
        "value",
        "merge",
        "patch",
        "select",
        "unique",
        "map_list_item_unique",
        "map_list_append"
      ],
      "additionalProperties": false,
      "description": "input definition for renderers with a patching suffix",
      "x-intellij-html-description": "input definition for renderers with a patching suffix",
      "patternProperties": {
        "^map_list_append@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^map_list_item_unique@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^merge@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^patch@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^select@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^unique@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^value@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "Schema": {
      "properties": {
        "buildah:build": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskBuild"
          },
          "type": "array"
        },
        "buildah:login": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskLogin"
          },
          "type": "array"
        },
        "buildah:push": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskPush"
          },
          "type": "array"
        },
        "buildah:xbuild": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskXBuild"
          },
          "type": "array"
        },
        "cosign:upload": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskUpload"
          },
          "type": "array"
        },
        "docker:build": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskBuild"
          },
          "type": "array"
        },
        "docker:login": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskLogin"
          },
          "type": "array"
        },
        "docker:push": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskPush"
          },
          "type": "array"
        },
        "git:clone": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.git.TaskClone"
          },
          "type": "array"
        },
        "github:release": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.TaskRelease"
          },
          "type": "array"
        },
        "global": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.conf.GlobalConfig"
        },
        "golang:build": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.TaskBuild"
          },
          "type": "array"
        },
        "golang:test": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.TaskTest"
          },
          "type": "array"
        },
        "helm:index": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.TaskIndex"
          },
          "type": "array"
        },
        "helm:package": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.TaskPackage"
          },
          "type": "array"
        },
        "include": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "renderers": {
          "properties": {
            "echo": {
              "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.echo.Driver"
            },
            "env": {
              "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.env.Driver"
            },
            "file": {
              "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.file.Driver"
            },
            "git": {
              "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.git.Driver"
            },
            "http": {
              "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.http.Driver"
            },
            "input": {
              "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.input.Driver"
            },
            "s3": {
              "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.s3.Driver"
            },
            "shell": {
              "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.shell.Driver"
            },
            "template": {
              "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.template.Driver"
            },
            "transform": {
              "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.transform.Driver"
            }
          },
          "preferredOrder": [
            "echo",
            "env",
            "file",
            "git",
            "http",
            "input",
            "s3",
            "shell",
            "template",
            "transform"
          ],
          "additionalProperties": false
        },
        "shells": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.BaseToolWithInit"
          },
          "type": "array"
        },
        "tools": {
          "properties": {
            "buildah": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.Tool"
              },
              "type": "array"
            },
            "cosign": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.Tool"
              },
              "type": "array"
            },
            "docker": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.Tool"
              },
              "type": "array"
            },
            "git": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.git.Tool"
              },
              "type": "array"
            },
            "github": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.Tool"
              },
              "type": "array"
            },
            "golang": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.Tool"
              },
              "type": "array"
            },
            "helm": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.Tool"
              },
              "type": "array"
            },
            "workflow": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.Tool"
              },
              "type": "array"
            }
          },
          "preferredOrder": [
            "buildah",
            "cosign",
            "docker",
            "git",
            "github",
            "golang",
            "helm",
            "workflow"
          ],
          "additionalProperties": false
        },
        "workflow:run": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.TaskRun"
          },
          "type": "array"
        },
        "workflow:test": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.TaskTest"
          },
          "type": "array"
        }
      },
      "preferredOrder": [
        "global",
        "include",
        "shells",
        "renderers",
        "tools",
        "buildah:build",
        "buildah:login",
        "buildah:push",
        "buildah:xbuild",
        "cosign:upload",
        "docker:build",
        "docker:login",
        "docker:push",
        "git:clone",
        "github:release",
        "golang:build",
        "golang:test",
        "helm:index",
        "helm:package",
        "workflow:run",
        "workflow:test"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^buildah(:.+){0,1}:build$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskBuild"
          },
          "type": "array"
        },
        "^buildah(:.+){0,1}:login$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskLogin"
          },
          "type": "array"
        },
        "^buildah(:.+){0,1}:push$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskPush"
          },
          "type": "array"
        },
        "^buildah(:.+){0,1}:xbuild$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskXBuild"
          },
          "type": "array"
        },
        "^buildah:build@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^buildah:login@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^buildah:push@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^buildah:xbuild@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cosign(:.+){0,1}:upload$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskUpload"
          },
          "type": "array"
        },
        "^cosign:upload@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^docker(:.+){0,1}:build$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskBuild"
          },
          "type": "array"
        },
        "^docker(:.+){0,1}:login$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskLogin"
          },
          "type": "array"
        },
        "^docker(:.+){0,1}:push$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskPush"
          },
          "type": "array"
        },
        "^docker:build@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^docker:login@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^docker:push@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^git(:.+){0,1}:clone$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.git.TaskClone"
          },
          "type": "array"
        },
        "^git:clone@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^github(:.+){0,1}:release$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.TaskRelease"
          },
          "type": "array"
        },
        "^github:release@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^global@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^golang(:.+){0,1}:build$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.TaskBuild"
          },
          "type": "array"
        },
        "^golang(:.+){0,1}:test$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.TaskTest"
          },
          "type": "array"
        },
        "^golang:build@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^golang:test@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^helm(:.+){0,1}:index$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.TaskIndex"
          },
          "type": "array"
        },
        "^helm(:.+){0,1}:package$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.TaskPackage"
          },
          "type": "array"
        },
        "^helm:index@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^helm:package@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^renderers@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shells@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^tools@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^workflow(:.+){0,1}:run$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.TaskRun"
          },
          "type": "array"
        },
        "^workflow(:.+){0,1}:test$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.TaskTest"
          },
          "type": "array"
        },
        "^workflow:run@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^workflow:test@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.conf.GlobalConfig": {
      "properties": {
        "cache_dir": {
          "type": "string",
          "description": "set DUKKHA_CACHE_DIR to store script file and intermediate task execution data",
          "x-intellij-html-description": "set DUKKHA<em>CACHE</em>DIR to store script file and intermediate task execution data"
        },
        "default_git_branch": {
          "type": "string",
          "description": "set GIT_DEFAULT_BRANCH, useful when dukkha can not detect branch name of origin/HEAD (e.g. github ci environment)",
          "x-intellij-html-description": "set GIT<em>DEFAULT</em>BRANCH, useful when dukkha can not detect branch name of origin/HEAD (e.g. github ci environment)"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env",
          "description": "add global environment variables for all working parts in dukkha",
          "x-intellij-html-description": "add global environment variables for all working parts in dukkha"
        },
        "values": {
          "$ref": "#/definitions/arhat.dev.rs.AnyObjectMap",
          "description": "global store of runtime values  accessible from renderer template `{{ values.YOUR_VAL_KEY }}` and renderer env/shell `${VALUES.YOUR_VAL_KEY}`",
          "x-intellij-html-description": "global store of runtime values  accessible from renderer template <code>{{ values.YOUR_VAL_KEY }}</code> and renderer env/shell <code>${VALUES.YOUR_VAL_KEY}</code>"
        }
      },
      "preferredOrder": [
        "cache_dir",
        "default_git_branch",
        "env",
        "values"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cache_dir@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^default_git_branch@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^values@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.dukkha.Env": {
      "items": {
        "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
      },
      "type": "array"
    },
    "arhat.dev.dukkha.pkg.dukkha.EnvEntry": {
      "properties": {
        "name": {
          "type": "string",
          "description": "of the entry (in other words, key)",
          "x-intellij-html-description": "of the entry (in other words, key)"
        },
        "value": {
          "type": "string",
          "description": "associated to the name",
          "x-intellij-html-description": "associated to the name"
        }
      },
      "preferredOrder": [
        "name",
        "value"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^value@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.matrix.Spec": {
      "properties": {
        "arch": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "exclude": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.specItem"
          },
          "type": "array"
        },
        "include": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.specItem"
          },
          "type": "array"
        },
        "kernel": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "TODO: validate kernel and arch values to ensure \t\t tools get expected value set",
          "x-intellij-html-description": "TODO: validate kernel and arch values to ensure \t\t tools get expected value set"
        }
      },
      "preferredOrder": [
        "include",
        "exclude",
        "kernel",
        "arch"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^arch@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^exclude@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^include@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^kernel@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.matrix.specItem": {
      "description": "a helper type to support rendering suffix for list of maps, used in Include/Exclude",
      "x-intellij-html-description": "a helper type to support rendering suffix for list of maps, used in Include/Exclude"
    },
    "arhat.dev.dukkha.pkg.renderer.echo.Driver": {},
    "arhat.dev.dukkha.pkg.renderer.env.Driver": {},
    "arhat.dev.dukkha.pkg.renderer.file.Driver": {
      "properties": {
        "cache_max_age": {
          "$ref": "#/definitions/time.Duration",
          "description": "limits maximum data cache time",
          "x-intellij-html-description": "limits maximum data cache time"
        },
        "cache_size_limit": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.utils.Size",
          "description": "limits maximum in memory size of cache",
          "x-intellij-html-description": "limits maximum in memory size of cache"
        },
        "enable_cache": {
          "type": "boolean",
          "description": "activates caching support for renderers with remote fetch, it will cache it on local disk and cache_size_limit is not effective in that case  Defaults to false",
          "x-intellij-html-description": "activates caching support for renderers with remote fetch, it will cache it on local disk and cache<em>size</em>limit is not effective in that case  Defaults to false",
          "default": "false"
        }
      },
      "preferredOrder": [
        "enable_cache",
        "cache_size_limit",
        "cache_max_age"
      ],
      "patternProperties": {
        "^cache_max_age@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cache_size_limit@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enable_cache@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.git.Driver": {
      "properties": {
        "cache_max_age": {
          "$ref": "#/definitions/time.Duration",
          "description": "limits maximum data cache time",
          "x-intellij-html-description": "limits maximum data cache time"
        },
        "cache_size_limit": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.utils.Size",
          "description": "limits maximum in memory size of cache",
          "x-intellij-html-description": "limits maximum in memory size of cache"
        },
        "enable_cache": {
          "type": "boolean",
          "description": "activates caching support for renderers with remote fetch, it will cache it on local disk and cache_size_limit is not effective in that case  Defaults to false",
          "x-intellij-html-description": "activates caching support for renderers with remote fetch, it will cache it on local disk and cache<em>size</em>limit is not effective in that case  Defaults to false",
          "default": "false"
        }
      },
      "preferredOrder": [
        "enable_cache",
        "cache_size_limit",
        "cache_max_age"
      ],
      "description": "git renderer implementation",
      "x-intellij-html-description": "git renderer implementation",
      "patternProperties": {
        "^cache_max_age@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cache_size_limit@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enable_cache@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.http.Driver": {
      "properties": {
        "cache_max_age": {
          "$ref": "#/definitions/time.Duration",
          "description": "limits maximum data cache time",
          "x-intellij-html-description": "limits maximum data cache time"
        },
        "cache_size_limit": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.utils.Size",
          "description": "limits maximum in memory size of cache",
          "x-intellij-html-description": "limits maximum in memory size of cache"
        },
        "enable_cache": {
          "type": "boolean",
          "description": "activates caching support for renderers with remote fetch, it will cache it on local disk and cache_size_limit is not effective in that case  Defaults to false",
          "x-intellij-html-description": "activates caching support for renderers with remote fetch, it will cache it on local disk and cache<em>size</em>limit is not effective in that case  Defaults to false",
          "default": "false"
        }
      },
      "preferredOrder": [
        "enable_cache",
        "cache_size_limit",
        "cache_max_age"
      ],
      "patternProperties": {
        "^cache_max_age@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cache_size_limit@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enable_cache@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.input.Driver": {
      "properties": {
        "hide": {
          "type": "boolean",
          "default": "false"
        }
      },
      "preferredOrder": [
        "hide"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^hide@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.s3.Driver": {
      "properties": {
        "cache_max_age": {
          "$ref": "#/definitions/time.Duration",
          "description": "limits maximum data cache time",
          "x-intellij-html-description": "limits maximum data cache time"
        },
        "cache_size_limit": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.utils.Size",
          "description": "limits maximum in memory size of cache",
          "x-intellij-html-description": "limits maximum in memory size of cache"
        },
        "enable_cache": {
          "type": "boolean",
          "description": "activates caching support for renderers with remote fetch, it will cache it on local disk and cache_size_limit is not effective in that case  Defaults to false",
          "x-intellij-html-description": "activates caching support for renderers with remote fetch, it will cache it on local disk and cache<em>size</em>limit is not effective in that case  Defaults to false",
          "default": "false"
        }
      },
      "preferredOrder": [
        "enable_cache",
        "cache_size_limit",
        "cache_max_age"
      ],
      "patternProperties": {
        "^cache_max_age@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cache_size_limit@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enable_cache@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.shell.Driver": {},
    "arhat.dev.dukkha.pkg.renderer.template.Driver": {},
    "arhat.dev.dukkha.pkg.renderer.transform.Driver": {},
    "arhat.dev.dukkha.pkg.tools.Action": {
      "properties": {
        "chdir": {
          "type": "string",
          "description": "change working directory before executing command this option only applies to Cmd, EmbeddedShell, ExternalShell action",
          "x-intellij-html-description": "change working directory before executing command this option only applies to Cmd, EmbeddedShell, ExternalShell action"
        },
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "execution, not in any shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive",
          "x-intellij-html-description": "execution, not in any shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive"
        },
        "continue_on_error": {
          "type": "boolean",
          "description": "ContuineOnError ignores error occurred in this action and continue following actions in list (if any)",
          "x-intellij-html-description": "ContuineOnError ignores error occurred in this action and continue following actions in list (if any)",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env",
          "description": "specific to this action",
          "x-intellij-html-description": "specific to this action"
        },
        "name": {
          "type": "string",
          "description": "of this action, optional",
          "x-intellij-html-description": "of this action, optional"
        },
        "shell": {
          "type": "string",
          "description": "using embedded shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive",
          "x-intellij-html-description": "using embedded shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive"
        },
        "task": {
          "type": "string",
          "description": "reference of this action  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive",
          "x-intellij-html-description": "reference of this action  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "task",
        "shell",
        "cmd",
        "chdir",
        "continue_on_error"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^chdir@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^task@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.BaseToolWithInit": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "type": "string"
        },
        "shell_name": {
          "type": "string"
        },
        "use_shell": {
          "type": "boolean",
          "description": "Whether to run this tool in shell and which shell to use",
          "x-intellij-html-description": "Whether to run this tool in shell and which shell to use",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd",
        "use_shell",
        "shell_name"
      ],
      "patternProperties": {
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^use_shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.TaskHooks": {
      "properties": {
        "after": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Action"
          },
          "type": "array",
          "description": "any condition of the task execution including success, failure, canceled (hook `before` failure)  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "any condition of the task execution including success, failure, canceled (hook <code>before</code> failure)  This hook MUST NOT have any reference to matrix information"
        },
        "after:failure": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Action"
          },
          "type": "array",
          "description": "runs after a failed task execution any failed matrix execution will cause this hook to run  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "runs after a failed task execution any failed matrix execution will cause this hook to run  This hook MUST NOT have any reference to matrix information"
        },
        "after:matrix": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Action"
          },
          "type": "array",
          "description": "runs after at any condition of the matrix execution including success, failure  This hook May have reference to matrix information",
          "x-intellij-html-description": "runs after at any condition of the matrix execution including success, failure  This hook May have reference to matrix information"
        },
        "after:matrix:failure": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Action"
          },
          "type": "array",
          "description": "runs after a failed matrix execution  This hook May have reference to matrix information",
          "x-intellij-html-description": "runs after a failed matrix execution  This hook May have reference to matrix information"
        },
        "after:matrix:success": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Action"
          },
          "type": "array",
          "description": "runs after a successful matrix execution  This hook May have reference to matrix information",
          "x-intellij-html-description": "runs after a successful matrix execution  This hook May have reference to matrix information"
        },
        "after:success": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Action"
          },
          "type": "array",
          "description": "runs after a successful task execution requires all matrix executions are successful  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "runs after a successful task execution requires all matrix executions are successful  This hook MUST NOT have any reference to matrix information"
        },
        "before": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Action"
          },
          "type": "array",
          "description": "runs before the task execution start if this hook failed, the whole task execution is canceled and will run `After` hooks  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "runs before the task execution start if this hook failed, the whole task execution is canceled and will run <code>After</code> hooks  This hook MUST NOT have any reference to matrix information"
        },
        "before:matrix": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Action"
          },
          "type": "array",
          "description": "Before a specific matrix execution start  This hook May have reference to matrix information",
          "x-intellij-html-description": "Before a specific matrix execution start  This hook May have reference to matrix information"
        }
      },
      "preferredOrder": [
        "before",
        "before:matrix",
        "after:matrix:success",
        "after:matrix:failure",
        "after:matrix",
        "after:success",
        "after:failure",
        "after"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^after:failure@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^after:matrix:failure@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^after:matrix:success@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^after:matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^after:success@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^after@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^before:matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^before@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec": {
      "properties": {
        "image": {
          "type": "string"
        },
        "manifest": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "image",
        "manifest"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^image@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^manifest@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.TaskBuild": {
      "properties": {
        "build_args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "--build-arg",
          "x-intellij-html-description": "--build-arg"
        },
        "context": {
          "type": "string"
        },
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "file": {
          "type": "string"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "image_names": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "context",
        "image_names",
        "file",
        "build_args",
        "extra_args"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^build_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^context@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^file@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image_names@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.TaskLogin": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "registry": {
          "type": "string"
        },
        "tls_skip_verify": {
          "type": "boolean"
        },
        "username": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "registry",
        "username",
        "password",
        "tls_skip_verify"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^password@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^registry@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^tls_skip_verify@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^username@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.TaskPush": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "image_names": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "image_names"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image_names@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.TaskXBuild": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "image_names": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "steps": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.step"
          },
          "type": "array",
          "description": "Context string  `yaml:\"context\"`",
          "x-intellij-html-description": "Context string  <code>yaml:&quot;context&quot;</code>"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "steps",
        "image_names"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image_names@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^steps@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "type": "string"
        },
        "shell_name": {
          "type": "string"
        },
        "use_shell": {
          "type": "boolean",
          "description": "Whether to run this tool in shell and which shell to use",
          "x-intellij-html-description": "Whether to run this tool in shell and which shell to use",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd",
        "use_shell",
        "shell_name"
      ],
      "patternProperties": {
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^use_shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromHTTPSpec": {
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "url"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^url@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromImageSpec": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "extra_pull_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kernel": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "ref",
        "kernel",
        "arch",
        "extra_pull_args",
        "path"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^arch@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_pull_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^kernel@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ref@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromLocalSpec": {
      "properties": {
        "path": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "path"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^path@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromSpec": {
      "properties": {
        "http": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromHTTPSpec"
        },
        "image": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromImageSpec"
        },
        "local": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromLocalSpec"
        },
        "step": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromStepSpec"
        },
        "text": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromTextSpec"
        }
      },
      "preferredOrder": [
        "text",
        "local",
        "http",
        "image",
        "step"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^http@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^local@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^step@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^text@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromStepSpec": {
      "properties": {
        "id": {
          "type": "string",
          "description": "of that step",
          "x-intellij-html-description": "of that step"
        },
        "path": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "id",
        "path"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^id@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromTextSpec": {
      "properties": {
        "data": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "data"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^data@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyToSpec": {
      "properties": {
        "path": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "path"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^path@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.mountSpec": {
      "properties": {
        "from": {
          "type": "string"
        },
        "options": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "of bind mount \tro, rw, z, Z, O \tshared, slave, private, unbindable  rshared, rslave, rprivate, runbindable",
          "x-intellij-html-description": "of bind mount \tro, rw, z, Z, O \tshared, slave, private, unbindable  rshared, rslave, rprivate, runbindable"
        },
        "to": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "from",
        "to",
        "options"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^from@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^options@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^to@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.step": {
      "properties": {
        "commit": {
          "type": "boolean",
          "description": "this step as a new layer after this step finished  this is set to true by default when: - at last step - switching to different container at next step (next step is a FROM statement)",
          "x-intellij-html-description": "this step as a new layer after this step finished  this is set to true by default when: - at last step - switching to different container at next step (next step is a FROM statement)"
        },
        "commit_as": {
          "type": "string",
          "description": "set the image name the container committed as",
          "x-intellij-html-description": "set the image name the container committed as"
        },
        "compress": {
          "type": "boolean",
          "description": "when commit, defaults to true",
          "x-intellij-html-description": "when commit, defaults to true"
        },
        "copy": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepCopy",
          "description": "files to somewhere",
          "x-intellij-html-description": "files to somewhere"
        },
        "extra_commit_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "from": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepFrom",
          "description": "some rootfs",
          "x-intellij-html-description": "some rootfs"
        },
        "id": {
          "type": "string",
          "description": "of this step, if not set, will be the array index of this step",
          "x-intellij-html-description": "of this step, if not set, will be the array index of this step"
        },
        "record": {
          "type": "boolean",
          "description": "to add flag --add-history",
          "x-intellij-html-description": "to add flag --add-history"
        },
        "run": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepRun",
          "description": "some command",
          "x-intellij-html-description": "some command"
        },
        "set": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepSet",
          "description": "default options for all following steps",
          "x-intellij-html-description": "default options for all following steps"
        },
        "skip": {
          "type": "boolean",
          "description": "this step when set to true",
          "x-intellij-html-description": "this step when set to true",
          "default": "false"
        }
      },
      "preferredOrder": [
        "id",
        "record",
        "commit",
        "commit_as",
        "extra_commit_args",
        "compress",
        "skip",
        "set",
        "from",
        "run",
        "copy"
      ],
      "additionalProperties": false,
      "description": "structured `buildah <subcmd>` for image building",
      "x-intellij-html-description": "structured <code>buildah &lt;subcmd&gt;</code> for image building",
      "patternProperties": {
        "^commit@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^commit_as@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^compress@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^copy@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_commit_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^from@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^id@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^record@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^run@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^set@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^skip@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.stepCopy": {
      "properties": {
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "for buildah copy",
          "x-intellij-html-description": "for buildah copy"
        },
        "from": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromSpec"
        },
        "to": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyToSpec"
        }
      },
      "preferredOrder": [
        "from",
        "to",
        "extra_args"
      ],
      "additionalProperties": false,
      "description": "structured `buildah copy`",
      "x-intellij-html-description": "structured <code>buildah copy</code>",
      "patternProperties": {
        "^extra_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^from@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^to@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.stepFrom": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "extra_pull_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kernel": {
          "type": "string"
        },
        "mount": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.mountSpec"
          },
          "type": "array",
          "description": "TODO: implement",
          "x-intellij-html-description": "TODO: implement"
        },
        "ref": {
          "type": "string",
          "description": "image",
          "x-intellij-html-description": "image"
        }
      },
      "preferredOrder": [
        "ref",
        "kernel",
        "arch",
        "extra_pull_args",
        "mount",
        "extra_args"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^arch@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_pull_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^kernel@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^mount@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ref@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.stepRun": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "as bare exec",
          "x-intellij-html-description": "as bare exec"
        },
        "executable_args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "for the executable",
          "x-intellij-html-description": "for the executable"
        },
        "executable_file": {
          "type": "string",
          "description": "path in local fs, run it in container  Will copy the executable to container and remove it after executaion  helpful when your executable is large to load as `script`",
          "x-intellij-html-description": "path in local fs, run it in container  Will copy the executable to container and remove it after executaion  helpful when your executable is large to load as <code>script</code>"
        },
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "script": {
          "type": "string",
          "description": " helpful when you need to run remote script, use:  \trun: \t  script@http: http://some-script.company",
          "x-intellij-html-description": "helpful when you need to run remote script, use:  \trun: \t  script@http: http://some-script.company"
        },
        "script_args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "for the script",
          "x-intellij-html-description": "for the script"
        }
      },
      "preferredOrder": [
        "script",
        "script_args",
        "executable_file",
        "executable_args",
        "cmd",
        "extra_args"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^executable_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^executable_file@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^script@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^script_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.stepSet": {
      "properties": {
        "annotations": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
          },
          "type": "array"
        },
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "entrypoint": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
          },
          "type": "array"
        },
        "labels": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
          },
          "type": "array"
        },
        "ports": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "shell": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "command to interpreter scripts in run step",
          "x-intellij-html-description": "command to interpreter scripts in run step"
        },
        "stop_signal": {
          "type": "string"
        },
        "user": {
          "type": "string",
          "description": "for command running in run step",
          "x-intellij-html-description": "for command running in run step"
        },
        "volumes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workdir": {
          "type": "string",
          "description": "Workdir",
          "x-intellij-html-description": "Workdir"
        }
      },
      "preferredOrder": [
        "workdir",
        "user",
        "shell",
        "env",
        "annotations",
        "labels",
        "ports",
        "entrypoint",
        "cmd",
        "volumes",
        "stop_signal"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^annotations@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^entrypoint@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^labels@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ports@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^stop_signal@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^user@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^volumes@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^workdir@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.FileSpec": {
      "properties": {
        "content_type": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "path",
        "content_type"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^content_type@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.TaskUpload": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.FileSpec"
          },
          "type": "array"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "image_names": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array"
        },
        "kind": {
          "type": "string"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "signing": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.signingSpec"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "kind",
        "files",
        "signing",
        "image_names"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^files@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image_names@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^kind@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^signing@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "type": "string"
        },
        "shell_name": {
          "type": "string"
        },
        "use_shell": {
          "type": "boolean",
          "description": "Whether to run this tool in shell and which shell to use",
          "x-intellij-html-description": "Whether to run this tool in shell and which shell to use",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd",
        "use_shell",
        "shell_name"
      ],
      "patternProperties": {
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^use_shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.signingSpec": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "default": "{}"
        },
        "enabled": {
          "type": "boolean",
          "default": "false"
        },
        "private_key": {
          "type": "string"
        },
        "private_key_password": {
          "type": "string"
        },
        "public_key": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "verify": {
          "type": "boolean"
        }
      },
      "preferredOrder": [
        "enabled",
        "private_key",
        "private_key_password",
        "repo",
        "verify",
        "public_key",
        "annotations"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^annotations@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^private_key@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^private_key_password@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^public_key@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^repo@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^verify@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.docker.TaskBuild": {
      "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskBuild"
    },
    "arhat.dev.dukkha.pkg.tools.docker.TaskLogin": {
      "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskLogin"
    },
    "arhat.dev.dukkha.pkg.tools.docker.TaskPush": {
      "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskPush"
    },
    "arhat.dev.dukkha.pkg.tools.docker.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "type": "string"
        },
        "shell_name": {
          "type": "string"
        },
        "use_shell": {
          "type": "boolean",
          "description": "Whether to run this tool in shell and which shell to use",
          "x-intellij-html-description": "Whether to run this tool in shell and which shell to use",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd",
        "use_shell",
        "shell_name"
      ],
      "patternProperties": {
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^use_shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.git.TaskClone": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "local_branch": {
          "type": "string"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "remote_branch": {
          "type": "string"
        },
        "remote_name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "url",
        "path",
        "remote_branch",
        "local_branch",
        "remote_name",
        "extra_args"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^local_branch@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^remote_branch@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^remote_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^url@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.git.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "type": "string"
        },
        "shell_name": {
          "type": "string"
        },
        "use_shell": {
          "type": "boolean",
          "description": "Whether to run this tool in shell and which shell to use",
          "x-intellij-html-description": "Whether to run this tool in shell and which shell to use",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd",
        "use_shell",
        "shell_name"
      ],
      "patternProperties": {
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^use_shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.github.ReleaseFileSpec": {
      "properties": {
        "label": {
          "type": "string",
          "description": "the display label as noted in gh docs https://cli.github.com/manual/gh_release_create",
          "x-intellij-html-description": "the display label as noted in gh docs https://cli.github.com/manual/gh<em>release</em>create"
        },
        "path": {
          "type": "string",
          "description": "path to the file, can use glob",
          "x-intellij-html-description": "path to the file, can use glob"
        }
      },
      "preferredOrder": [
        "path",
        "label"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^label@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.github.TaskRelease": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "draft": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.ReleaseFileSpec"
          },
          "type": "array"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "pre_release": {
          "type": "boolean",
          "default": "false"
        },
        "tag": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "tag",
        "draft",
        "pre_release",
        "title",
        "notes",
        "files"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^draft@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^files@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^notes@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^pre_release@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^tag@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^title@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.github.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "type": "string"
        },
        "shell_name": {
          "type": "string"
        },
        "use_shell": {
          "type": "boolean",
          "description": "Whether to run this tool in shell and which shell to use",
          "x-intellij-html-description": "Whether to run this tool in shell and which shell to use",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd",
        "use_shell",
        "shell_name"
      ],
      "patternProperties": {
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^use_shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.CGOSepc": {
      "properties": {
        "cc": {
          "type": "string"
        },
        "cflags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_CFLAGS",
          "x-intellij-html-description": "CGO_CFLAGS"
        },
        "cppflags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_CPPFLAGS",
          "x-intellij-html-description": "CGO_CPPFLAGS"
        },
        "cxx": {
          "type": "string"
        },
        "cxxflags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_CXXFLAGS",
          "x-intellij-html-description": "CGO_CXXFLAGS"
        },
        "enabled": {
          "type": "boolean",
          "description": "Enable cgo",
          "x-intellij-html-description": "Enable cgo",
          "default": "false"
        },
        "fc": {
          "type": "string"
        },
        "fflags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_FFLAGS",
          "x-intellij-html-description": "CGO_FFLAGS"
        },
        "ldflags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_LDFLAGS",
          "x-intellij-html-description": "CGO_LDFLAGS"
        }
      },
      "preferredOrder": [
        "enabled",
        "cppflags",
        "cflags",
        "cxxflags",
        "fflags",
        "ldflags",
        "cc",
        "cxx",
        "fc"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cc@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cflags@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cppflags@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cxx@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cxxflags@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^fc@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^fflags@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ldflags@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.TaskBuild": {
      "properties": {
        "cgo": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.CGOSepc"
        },
        "chdir": {
          "type": "string"
        },
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "outputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "chdir",
        "path",
        "extra_args",
        "outputs",
        "cgo"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cgo@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^chdir@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^outputs@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.TaskTest": {
      "properties": {
        "benchmark": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testBenchmarkSpec"
        },
        "cgo": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.CGOSepc"
        },
        "chdir": {
          "type": "string"
        },
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "custom_args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "custom args only used when running the test",
          "x-intellij-html-description": "custom args only used when running the test"
        },
        "custom_cmd_prefix": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "to run compiled test file with this cmd prefix",
          "x-intellij-html-description": "to run compiled test file with this cmd prefix"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testProfileSpec"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "cgo",
        "path",
        "chdir",
        "benchmark",
        "profile",
        "custom_cmd_prefix",
        "custom_args"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^benchmark@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cgo@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^chdir@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^custom_args@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^custom_cmd_prefix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^profile@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "type": "string"
        },
        "shell_name": {
          "type": "string"
        },
        "use_shell": {
          "type": "boolean",
          "description": "Whether to run this tool in shell and which shell to use",
          "x-intellij-html-description": "Whether to run this tool in shell and which shell to use",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd",
        "use_shell",
        "shell_name"
      ],
      "patternProperties": {
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^use_shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.benchmarkMemorySpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enbaled by default if benchmark is enabled",
          "x-intellij-html-description": "Enbaled by default if benchmark is enabled"
        }
      },
      "preferredOrder": [
        "enabled"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testBenchmarkSpec": {
      "properties": {
        "count": {
          "type": "integer",
          "description": "of benchmark run",
          "x-intellij-html-description": "of benchmark run"
        },
        "duration": {
          "$ref": "#/definitions/time.Duration",
          "description": "of each benchmark run",
          "x-intellij-html-description": "of each benchmark run"
        },
        "enabled": {
          "type": "boolean",
          "description": "Run benchmarks during test execution",
          "x-intellij-html-description": "Run benchmarks during test execution",
          "default": "false"
        },
        "match": {
          "type": "string",
          "description": "Run only regexp matched benchmarks  go test -bench  defaults to `.` (all)",
          "x-intellij-html-description": "Run only regexp matched benchmarks  go test -bench  defaults to <code>.</code> (all)"
        },
        "memory": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.benchmarkMemorySpec",
          "description": "benchmark settings",
          "x-intellij-html-description": "benchmark settings"
        }
      },
      "preferredOrder": [
        "enabled",
        "duration",
        "count",
        "match",
        "memory"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^count@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^duration@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^match@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^memory@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testBlockProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Profile goroutine blocking during test execution",
          "x-intellij-html-description": "Profile goroutine blocking during test execution",
          "default": "false"
        },
        "output": {
          "type": "string",
          "description": "filename of block profile  go test -blockprofile  defaults to `block.out` if not set and `enabled` is true",
          "x-intellij-html-description": "filename of block profile  go test -blockprofile  defaults to <code>block.out</code> if not set and <code>enabled</code> is true"
        },
        "rate": {
          "type": "integer",
          "description": "of block profile  go test -blockprofilerate  no default",
          "x-intellij-html-description": "of block profile  go test -blockprofilerate  no default"
        }
      },
      "preferredOrder": [
        "enabled",
        "rate",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^rate@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testCPUProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Profile cpu during test execution",
          "x-intellij-html-description": "Profile cpu during test execution",
          "default": "false"
        },
        "output": {
          "type": "string",
          "description": "filename of cpu profile  go test -cpuprofile  defaults to `cpu.out` if not set and `enabled` is true",
          "x-intellij-html-description": "filename of cpu profile  go test -cpuprofile  defaults to <code>cpu.out</code> if not set and <code>enabled</code> is true"
        }
      },
      "preferredOrder": [
        "enabled",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testCoverageProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": "false"
        },
        "mode": {
          "type": "string",
          "description": "of coverage  go test -covermode  defaults to `atomic` if not set and `enabled` is true",
          "x-intellij-html-description": "of coverage  go test -covermode  defaults to <code>atomic</code> if not set and <code>enabled</code> is true"
        },
        "output": {
          "type": "string",
          "description": "file of the coverage  go test -coverprofile  defaults to cover.out if not set and `enabled` is true",
          "x-intellij-html-description": "file of the coverage  go test -coverprofile  defaults to cover.out if not set and <code>enabled</code> is true"
        },
        "packages": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "to coverage  go test -coverpkg  no default (use golang default behavior)",
          "x-intellij-html-description": "to coverage  go test -coverpkg  no default (use golang default behavior)"
        }
      },
      "preferredOrder": [
        "enabled",
        "output",
        "mode",
        "packages"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^mode@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^packages@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testMemoryProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Profile memory during test execution",
          "x-intellij-html-description": "Profile memory during test execution",
          "default": "false"
        },
        "output": {
          "type": "string",
          "description": "filename of memory profile  go test -memprofile  defaults to mem.out if not set and `enabled` is true",
          "x-intellij-html-description": "filename of memory profile  go test -memprofile  defaults to mem.out if not set and <code>enabled</code> is true"
        },
        "rate": {
          "type": "integer",
          "description": "of memory profile  go test -memprofilerate",
          "x-intellij-html-description": "of memory profile  go test -memprofilerate"
        }
      },
      "preferredOrder": [
        "enabled",
        "rate",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^rate@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testMutexProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Profile mutex during test execution",
          "x-intellij-html-description": "Profile mutex during test execution",
          "default": "false"
        },
        "fraction": {
          "type": "integer",
          "description": "number  go test -mutexprofilefraction",
          "x-intellij-html-description": "number  go test -mutexprofilefraction"
        },
        "output": {
          "type": "string",
          "description": "filename of mutex profile  go test -mutexprofile  defaults to `mutex.out` if not set and `enabled` is true",
          "x-intellij-html-description": "filename of mutex profile  go test -mutexprofile  defaults to <code>mutex.out</code> if not set and <code>enabled</code> is true"
        }
      },
      "preferredOrder": [
        "enabled",
        "fraction",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^fraction@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testProfileSpec": {
      "properties": {
        "block": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testBlockProfileSpec",
          "description": "Goroutine Block profile",
          "x-intellij-html-description": "Goroutine Block profile"
        },
        "coverage": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testCoverageProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "cpu": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testCPUProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "memory": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testMemoryProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "mutex": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testMutexProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "output_dir": {
          "type": "string",
          "description": "Directory to save all profile output files",
          "x-intellij-html-description": "Directory to save all profile output files"
        },
        "trace": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testTraceProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        }
      },
      "preferredOrder": [
        "output_dir",
        "coverage",
        "block",
        "cpu",
        "memory",
        "mutex",
        "trace"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^block@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^coverage@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cpu@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^memory@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^mutex@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output_dir@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^trace@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testTraceProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Write test execution trace",
          "x-intellij-html-description": "Write test execution trace",
          "default": "false"
        },
        "output": {
          "type": "string",
          "description": "filename of trace profile  go test -trace  defaults to trace.out if not set and `enabled` is true",
          "x-intellij-html-description": "filename of trace profile  go test -trace  defaults to trace.out if not set and <code>enabled</code> is true"
        }
      },
      "preferredOrder": [
        "enabled",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.helm.PackageSigningSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": "false"
        },
        "gpg_key_name": {
          "type": "string"
        },
        "gpg_key_passphrase": {
          "type": "string"
        },
        "gpg_keyring": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "enabled",
        "gpg_keyring",
        "gpg_key_name",
        "gpg_key_passphrase"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^gpg_key_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^gpg_key_passphrase@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^gpg_keyring@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.helm.TaskIndex": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "merge": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packages_dir": {
          "type": "string"
        },
        "repo_url": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "repo_url",
        "packages_dir",
        "merge"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^merge@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^packages_dir@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^repo_url@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.helm.TaskPackage": {
      "properties": {
        "chart": {
          "type": "string"
        },
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "packages_dir": {
          "type": "string"
        },
        "signing": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.PackageSigningSpec"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "chart",
        "packages_dir",
        "signing"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^chart@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^packages_dir@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^signing@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.helm.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "type": "string"
        },
        "shell_name": {
          "type": "string"
        },
        "use_shell": {
          "type": "boolean",
          "description": "Whether to run this tool in shell and which shell to use",
          "x-intellij-html-description": "Whether to run this tool in shell and which shell to use",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd",
        "use_shell",
        "shell_name"
      ],
      "patternProperties": {
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^use_shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.workflow.TaskRun": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "jobs": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Action"
          },
          "type": "array"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "jobs"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^jobs@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.workflow.TaskTest": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error"
      ],
      "patternProperties": {
        "^continue_on_error@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.workflow.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "type": "string"
        },
        "shell_name": {
          "type": "string"
        },
        "use_shell": {
          "type": "boolean",
          "description": "Whether to run this tool in shell and which shell to use",
          "x-intellij-html-description": "Whether to run this tool in shell and which shell to use",
          "default": "false"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd",
        "use_shell",
        "shell_name"
      ],
      "patternProperties": {
        "^cmd@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell_name@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^use_shell@((.*\\?.+\\|?)+)?!$": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.utils.Size": {
      "type": "string",
      "description": "human-readable data size in KB, MB, GB, TB, TB",
      "x-intellij-html-description": "human-readable data size in KB, MB, GB, TB, TB"
    },
    "arhat.dev.rs.AnyObjectMap": {
      "description": "a `map[string]interface{}` equivalent with rendering suffix support",
      "x-intellij-html-description": "a <code>map[string]interface{}</code> equivalent with rendering suffix support"
    },
    "time.Duration": {
      "type": "integer",
      "description": "A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.",
      "x-intellij-html-description": "A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years."
    }
  }
}
