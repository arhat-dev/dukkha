{
  "$ref": "#/definitions/Schema",
  "type": "object",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "JSONPatchSpec": {
      "properties": {
        "op": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "resolve": {
          "type": "boolean",
          "description": "rendering suffix in value before being applied",
          "x-intellij-html-description": "rendering suffix in value before being applied",
          "default": true
        },
        "select": {
          "type": "string",
          "description": "part of the value for patching  this action happens before patching",
          "x-intellij-html-description": "part of the value for patching  this action happens before patching"
        },
        "value": {}
      },
      "preferredOrder": [
        "op",
        "path",
        "value",
        "resolve",
        "select"
      ],
      "additionalProperties": false,
      "description": "per rfc6902",
      "x-intellij-html-description": "per rfc6902",
      "patternProperties": {
        "^op@.*": {
          "type": "string"
        },
        "^op@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@.*": {
          "type": "string"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^resolve@.*": {
          "type": "boolean",
          "description": "rendering suffix in value before being applied",
          "x-intellij-html-description": "rendering suffix in value before being applied",
          "default": true
        },
        "^resolve@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^select@.*": {
          "type": "string",
          "description": "part of the value for patching  this action happens before patching",
          "x-intellij-html-description": "part of the value for patching  this action happens before patching"
        },
        "^select@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^value@.*": {},
        "^value@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "MergeSource": {
      "properties": {
        "resolve": {
          "type": "boolean",
          "description": "rendering suffix in value if any before being merged",
          "x-intellij-html-description": "rendering suffix in value if any before being merged",
          "default": true
        },
        "select": {
          "type": "string",
          "description": "some data from the source",
          "x-intellij-html-description": "some data from the source"
        },
        "value": {
          "description": "for the source",
          "x-intellij-html-description": "for the source"
        }
      },
      "preferredOrder": [
        "value",
        "resolve",
        "select"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^resolve@.*": {
          "type": "boolean",
          "description": "rendering suffix in value if any before being merged",
          "x-intellij-html-description": "rendering suffix in value if any before being merged",
          "default": true
        },
        "^resolve@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^select@.*": {
          "type": "string",
          "description": "some data from the source",
          "x-intellij-html-description": "some data from the source"
        },
        "^select@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^value@.*": {
          "description": "for the source",
          "x-intellij-html-description": "for the source"
        },
        "^value@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "PatchSpec": {
      "properties": {
        "map_list_append": {
          "type": "boolean",
          "description": "to append lists instead of replacing existing list",
          "x-intellij-html-description": "to append lists instead of replacing existing list",
          "default": "false"
        },
        "map_list_item_unique": {
          "type": "boolean",
          "description": "to ensure items are unique in all merged lists respectively lists with no merge data input are untouched",
          "x-intellij-html-description": "to ensure items are unique in all merged lists respectively lists with no merge data input are untouched",
          "default": "false"
        },
        "merge": {
          "items": {
            "$ref": "#/definitions/MergeSource"
          },
          "type": "array",
          "description": "additional data into Value  this action happens first",
          "x-intellij-html-description": "additional data into Value  this action happens first"
        },
        "patch": {
          "items": {
            "$ref": "#/definitions/JSONPatchSpec"
          },
          "type": "array",
          "description": "Value using standard rfc6902 json-patch  this action happens after merge",
          "x-intellij-html-description": "Value using standard rfc6902 json-patch  this action happens after merge"
        },
        "resolve": {
          "type": "boolean",
          "description": "rendering suffix in value if any before being patched",
          "x-intellij-html-description": "rendering suffix in value if any before being patched",
          "default": true
        },
        "select": {
          "type": "string",
          "description": "part of the data as final result  this action happens after merge and patch",
          "x-intellij-html-description": "part of the data as final result  this action happens after merge and patch"
        },
        "unique": {
          "type": "boolean",
          "description": "to make sure elements in the sequence is unique  only effective when Value is yaml sequence",
          "x-intellij-html-description": "to make sure elements in the sequence is unique  only effective when Value is yaml sequence",
          "default": "false"
        },
        "value": {
          "description": "for the renderer  \tsay we have a yaml list (`[bar]`) stored at https://example.com/bar.yaml  \t\tfoo@http!: \t\t  value: https://example.com/bar.yaml \t\t  merge: { value: [foo] }  then the resolved value of foo will be `[bar, foo]`",
          "x-intellij-html-description": "for the renderer  \tsay we have a yaml list (<code>[bar]</code>) stored at https://example.com/bar.yaml  \t\tfoo@http!: \t\t  value: https://example.com/bar.yaml \t\t  merge: { value: [foo] }  then the resolved value of foo will be <code>[bar, foo]</code>"
        }
      },
      "preferredOrder": [
        "value",
        "resolve",
        "merge",
        "patch",
        "select",
        "unique",
        "map_list_item_unique",
        "map_list_append"
      ],
      "additionalProperties": false,
      "description": "input definition for renderers with a patching suffix",
      "x-intellij-html-description": "input definition for renderers with a patching suffix",
      "patternProperties": {
        "^map_list_append@.*": {
          "type": "boolean",
          "description": "to append lists instead of replacing existing list",
          "x-intellij-html-description": "to append lists instead of replacing existing list",
          "default": "false"
        },
        "^map_list_append@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^map_list_item_unique@.*": {
          "type": "boolean",
          "description": "to ensure items are unique in all merged lists respectively lists with no merge data input are untouched",
          "x-intellij-html-description": "to ensure items are unique in all merged lists respectively lists with no merge data input are untouched",
          "default": "false"
        },
        "^map_list_item_unique@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^merge@.*": {
          "items": {
            "$ref": "#/definitions/MergeSource"
          },
          "type": "array",
          "description": "additional data into Value  this action happens first",
          "x-intellij-html-description": "additional data into Value  this action happens first"
        },
        "^merge@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^patch@.*": {
          "items": {
            "$ref": "#/definitions/JSONPatchSpec"
          },
          "type": "array",
          "description": "Value using standard rfc6902 json-patch  this action happens after merge",
          "x-intellij-html-description": "Value using standard rfc6902 json-patch  this action happens after merge"
        },
        "^patch@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^resolve@.*": {
          "type": "boolean",
          "description": "rendering suffix in value if any before being patched",
          "x-intellij-html-description": "rendering suffix in value if any before being patched",
          "default": true
        },
        "^resolve@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^select@.*": {
          "type": "string",
          "description": "part of the data as final result  this action happens after merge and patch",
          "x-intellij-html-description": "part of the data as final result  this action happens after merge and patch"
        },
        "^select@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^unique@.*": {
          "type": "boolean",
          "description": "to make sure elements in the sequence is unique  only effective when Value is yaml sequence",
          "x-intellij-html-description": "to make sure elements in the sequence is unique  only effective when Value is yaml sequence",
          "default": "false"
        },
        "^unique@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^value@.*": {
          "description": "for the renderer  \tsay we have a yaml list (`[bar]`) stored at https://example.com/bar.yaml  \t\tfoo@http!: \t\t  value: https://example.com/bar.yaml \t\t  merge: { value: [foo] }  then the resolved value of foo will be `[bar, foo]`",
          "x-intellij-html-description": "for the renderer  \tsay we have a yaml list (<code>[bar]</code>) stored at https://example.com/bar.yaml  \t\tfoo@http!: \t\t  value: https://example.com/bar.yaml \t\t  merge: { value: [foo] }  then the resolved value of foo will be <code>[bar, foo]</code>"
        },
        "^value@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "Schema": {
      "properties": {
        "archive:create": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.archive.TaskCreate"
          },
          "type": "array"
        },
        "buildah:build": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskBuild"
          },
          "type": "array"
        },
        "buildah:login": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskLogin"
          },
          "type": "array"
        },
        "buildah:push": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskPush"
          },
          "type": "array"
        },
        "buildah:xbuild": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskXBuild"
          },
          "type": "array"
        },
        "cosign:sign": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskSign"
          },
          "type": "array"
        },
        "cosign:sign-image": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskSignImage"
          },
          "type": "array"
        },
        "cosign:upload": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskUpload"
          },
          "type": "array"
        },
        "docker:build": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskBuild"
          },
          "type": "array"
        },
        "docker:login": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskLogin"
          },
          "type": "array"
        },
        "docker:push": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskPush"
          },
          "type": "array"
        },
        "git:clone": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.git.TaskClone"
          },
          "type": "array"
        },
        "github:release": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.TaskRelease"
          },
          "type": "array"
        },
        "global": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.conf.GlobalConfig"
        },
        "golang:build": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.TaskBuild"
          },
          "type": "array"
        },
        "golang:test": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.TaskTest"
          },
          "type": "array"
        },
        "helm:index": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.TaskIndex"
          },
          "type": "array"
        },
        "helm:package": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.TaskPackage"
          },
          "type": "array"
        },
        "include": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.conf.IncludeEntry"
          },
          "type": "array"
        },
        "renderers": {
          "items": {
            "properties": {
              "T": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.transform.Driver"
              },
              "af": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.af.Driver"
              },
              "echo": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.echo.Driver"
              },
              "env": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.env.Driver"
              },
              "file": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.file.Driver"
              },
              "git": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.git.Driver"
              },
              "http": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.http.Driver"
              },
              "input": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.input.Driver"
              },
              "s3": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.s3.Driver"
              },
              "shell": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.shell.Driver"
              },
              "tpl": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.tpl.Driver"
              }
            },
            "preferredOrder": [
              "T",
              "af",
              "echo",
              "env",
              "file",
              "git",
              "http",
              "input",
              "s3",
              "shell",
              "tpl"
            ],
            "additionalProperties": false,
            "patternProperties": {
              "^T(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.transform.Driver"
              },
              "^af(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.af.Driver"
              },
              "^echo(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.echo.Driver"
              },
              "^env(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.env.Driver"
              },
              "^file(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.file.Driver"
              },
              "^git(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.git.Driver"
              },
              "^http(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.http.Driver"
              },
              "^input(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.input.Driver"
              },
              "^s3(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.s3.Driver"
              },
              "^shell(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.shell.Driver"
              },
              "^tpl(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.tpl.Driver"
              }
            }
          },
          "type": "array"
        },
        "shells": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.ShellTool"
          },
          "type": "array"
        },
        "tools": {
          "properties": {
            "archive": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.archive.Tool"
              },
              "type": "array"
            },
            "buildah": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.Tool"
              },
              "type": "array"
            },
            "cosign": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.Tool"
              },
              "type": "array"
            },
            "docker": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.Tool"
              },
              "type": "array"
            },
            "git": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.git.Tool"
              },
              "type": "array"
            },
            "github": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.Tool"
              },
              "type": "array"
            },
            "golang": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.Tool"
              },
              "type": "array"
            },
            "helm": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.Tool"
              },
              "type": "array"
            },
            "workflow": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.Tool"
              },
              "type": "array"
            }
          },
          "preferredOrder": [
            "archive",
            "buildah",
            "cosign",
            "docker",
            "git",
            "github",
            "golang",
            "helm",
            "workflow"
          ],
          "additionalProperties": false
        },
        "workflow:run": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.TaskRun"
          },
          "type": "array"
        },
        "workflow:test": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.TaskTest"
          },
          "type": "array"
        }
      },
      "preferredOrder": [
        "global",
        "include",
        "shells",
        "renderers",
        "tools",
        "archive:create",
        "buildah:build",
        "buildah:login",
        "buildah:push",
        "buildah:xbuild",
        "cosign:sign",
        "cosign:sign-image",
        "cosign:upload",
        "docker:build",
        "docker:login",
        "docker:push",
        "git:clone",
        "github:release",
        "golang:build",
        "golang:test",
        "helm:index",
        "helm:package",
        "workflow:run",
        "workflow:test"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^archive(:.+){0,1}:create$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.archive.TaskCreate"
          },
          "type": "array"
        },
        "^archive:create@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.archive.TaskCreate"
          },
          "type": "array"
        },
        "^archive:create@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^buildah(:.+){0,1}:build$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskBuild"
          },
          "type": "array"
        },
        "^buildah(:.+){0,1}:login$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskLogin"
          },
          "type": "array"
        },
        "^buildah(:.+){0,1}:push$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskPush"
          },
          "type": "array"
        },
        "^buildah(:.+){0,1}:xbuild$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskXBuild"
          },
          "type": "array"
        },
        "^buildah:build@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskBuild"
          },
          "type": "array"
        },
        "^buildah:build@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^buildah:login@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskLogin"
          },
          "type": "array"
        },
        "^buildah:login@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^buildah:push@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskPush"
          },
          "type": "array"
        },
        "^buildah:push@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^buildah:xbuild@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskXBuild"
          },
          "type": "array"
        },
        "^buildah:xbuild@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cosign(:.+){0,1}:sign$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskSign"
          },
          "type": "array"
        },
        "^cosign(:.+){0,1}:sign-image$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskSignImage"
          },
          "type": "array"
        },
        "^cosign(:.+){0,1}:upload$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskUpload"
          },
          "type": "array"
        },
        "^cosign:sign-image@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskSignImage"
          },
          "type": "array"
        },
        "^cosign:sign-image@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cosign:sign@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskSign"
          },
          "type": "array"
        },
        "^cosign:sign@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cosign:upload@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.TaskUpload"
          },
          "type": "array"
        },
        "^cosign:upload@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^docker(:.+){0,1}:build$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskBuild"
          },
          "type": "array"
        },
        "^docker(:.+){0,1}:login$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskLogin"
          },
          "type": "array"
        },
        "^docker(:.+){0,1}:push$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskPush"
          },
          "type": "array"
        },
        "^docker:build@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskBuild"
          },
          "type": "array"
        },
        "^docker:build@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^docker:login@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskLogin"
          },
          "type": "array"
        },
        "^docker:login@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^docker:push@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.TaskPush"
          },
          "type": "array"
        },
        "^docker:push@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^git(:.+){0,1}:clone$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.git.TaskClone"
          },
          "type": "array"
        },
        "^git:clone@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.git.TaskClone"
          },
          "type": "array"
        },
        "^git:clone@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^github(:.+){0,1}:release$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.TaskRelease"
          },
          "type": "array"
        },
        "^github:release@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.TaskRelease"
          },
          "type": "array"
        },
        "^github:release@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^global@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.conf.GlobalConfig"
        },
        "^global@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^golang(:.+){0,1}:build$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.TaskBuild"
          },
          "type": "array"
        },
        "^golang(:.+){0,1}:test$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.TaskTest"
          },
          "type": "array"
        },
        "^golang:build@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.TaskBuild"
          },
          "type": "array"
        },
        "^golang:build@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^golang:test@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.TaskTest"
          },
          "type": "array"
        },
        "^golang:test@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^helm(:.+){0,1}:index$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.TaskIndex"
          },
          "type": "array"
        },
        "^helm(:.+){0,1}:package$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.TaskPackage"
          },
          "type": "array"
        },
        "^helm:index@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.TaskIndex"
          },
          "type": "array"
        },
        "^helm:index@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^helm:package@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.TaskPackage"
          },
          "type": "array"
        },
        "^helm:package@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^renderers@.*": {
          "items": {
            "properties": {
              "T": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.transform.Driver"
              },
              "af": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.af.Driver"
              },
              "echo": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.echo.Driver"
              },
              "env": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.env.Driver"
              },
              "file": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.file.Driver"
              },
              "git": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.git.Driver"
              },
              "http": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.http.Driver"
              },
              "input": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.input.Driver"
              },
              "s3": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.s3.Driver"
              },
              "shell": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.shell.Driver"
              },
              "tpl": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.tpl.Driver"
              }
            },
            "preferredOrder": [
              "T",
              "af",
              "echo",
              "env",
              "file",
              "git",
              "http",
              "input",
              "s3",
              "shell",
              "tpl"
            ],
            "additionalProperties": false,
            "patternProperties": {
              "^T(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.transform.Driver"
              },
              "^af(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.af.Driver"
              },
              "^echo(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.echo.Driver"
              },
              "^env(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.env.Driver"
              },
              "^file(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.file.Driver"
              },
              "^git(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.git.Driver"
              },
              "^http(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.http.Driver"
              },
              "^input(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.input.Driver"
              },
              "^s3(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.s3.Driver"
              },
              "^shell(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.shell.Driver"
              },
              "^tpl(:.+){0,1}$": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.tpl.Driver"
              }
            }
          },
          "type": "array"
        },
        "^renderers@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shells@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.ShellTool"
          },
          "type": "array"
        },
        "^shells@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^tools@.*": {
          "properties": {
            "archive": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.archive.Tool"
              },
              "type": "array"
            },
            "buildah": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.Tool"
              },
              "type": "array"
            },
            "cosign": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.Tool"
              },
              "type": "array"
            },
            "docker": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.docker.Tool"
              },
              "type": "array"
            },
            "git": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.git.Tool"
              },
              "type": "array"
            },
            "github": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.Tool"
              },
              "type": "array"
            },
            "golang": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.Tool"
              },
              "type": "array"
            },
            "helm": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.Tool"
              },
              "type": "array"
            },
            "workflow": {
              "items": {
                "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.Tool"
              },
              "type": "array"
            }
          },
          "preferredOrder": [
            "archive",
            "buildah",
            "cosign",
            "docker",
            "git",
            "github",
            "golang",
            "helm",
            "workflow"
          ],
          "additionalProperties": false
        },
        "^tools@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^workflow(:.+){0,1}:run$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.TaskRun"
          },
          "type": "array"
        },
        "^workflow(:.+){0,1}:test$": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.TaskTest"
          },
          "type": "array"
        },
        "^workflow:run@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.TaskRun"
          },
          "type": "array"
        },
        "^workflow:run@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^workflow:test@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.workflow.TaskTest"
          },
          "type": "array"
        },
        "^workflow:test@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.conf.GlobalConfig": {
      "properties": {
        "cache_dir": {
          "type": "string",
          "description": "set DUKKHA_CACHE_DIR to store script files, renderer cache and intermediate task execution data",
          "x-intellij-html-description": "set DUKKHA<em>CACHE</em>DIR to store script files, renderer cache and intermediate task execution data"
        },
        "default_git_branch": {
          "type": "string",
          "description": "set GIT_DEFAULT_BRANCH, useful when dukkha can not detect branch name of origin/HEAD (e.g. github ci environment)  If your have multiple definitions of this option in different config file, only the first occurrence of the option is used.",
          "x-intellij-html-description": "set GIT<em>DEFAULT</em>BRANCH, useful when dukkha can not detect branch name of origin/HEAD (e.g. github ci environment)  If your have multiple definitions of this option in different config file, only the first occurrence of the option is used."
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env",
          "description": "add global environment variables for all working parts in dukkha",
          "x-intellij-html-description": "add global environment variables for all working parts in dukkha"
        },
        "values": {
          "$ref": "#/definitions/arhat.dev.rs.AnyObjectMap",
          "description": "global store of runtime values  accessible from renderer template `{{ values.YOUR_VAL_KEY }}` and renderer env/shell `${values.YOUR_VAL_KEY}`",
          "x-intellij-html-description": "global store of runtime values  accessible from renderer template <code>{{ values.YOUR_VAL_KEY }}</code> and renderer env/shell <code>${values.YOUR_VAL_KEY}</code>"
        }
      },
      "preferredOrder": [
        "cache_dir",
        "default_git_branch",
        "env",
        "values"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cache_dir@.*": {
          "type": "string",
          "description": "set DUKKHA_CACHE_DIR to store script files, renderer cache and intermediate task execution data",
          "x-intellij-html-description": "set DUKKHA<em>CACHE</em>DIR to store script files, renderer cache and intermediate task execution data"
        },
        "^cache_dir@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^default_git_branch@.*": {
          "type": "string",
          "description": "set GIT_DEFAULT_BRANCH, useful when dukkha can not detect branch name of origin/HEAD (e.g. github ci environment)  If your have multiple definitions of this option in different config file, only the first occurrence of the option is used.",
          "x-intellij-html-description": "set GIT<em>DEFAULT</em>BRANCH, useful when dukkha can not detect branch name of origin/HEAD (e.g. github ci environment)  If your have multiple definitions of this option in different config file, only the first occurrence of the option is used."
        },
        "^default_git_branch@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env",
          "description": "add global environment variables for all working parts in dukkha",
          "x-intellij-html-description": "add global environment variables for all working parts in dukkha"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^values@.*": {
          "$ref": "#/definitions/arhat.dev.rs.AnyObjectMap",
          "description": "global store of runtime values  accessible from renderer template `{{ values.YOUR_VAL_KEY }}` and renderer env/shell `${values.YOUR_VAL_KEY}`",
          "x-intellij-html-description": "global store of runtime values  accessible from renderer template <code>{{ values.YOUR_VAL_KEY }}</code> and renderer env/shell <code>${values.YOUR_VAL_KEY}</code>"
        },
        "^values@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.conf.IncludeEntry": {
      "properties": {
        "path": {
          "type": "string",
          "description": "local path to include, can be either directory or file  Path and Text are mutually exclusive",
          "x-intellij-html-description": "local path to include, can be either directory or file  Path and Text are mutually exclusive"
        },
        "text": {
          "type": "string",
          "description": "config text to include, usually used with rendering suffix to include remote config  Path and Text are mutually exclusive",
          "x-intellij-html-description": "config text to include, usually used with rendering suffix to include remote config  Path and Text are mutually exclusive"
        }
      },
      "preferredOrder": [
        "path",
        "text"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^path@.*": {
          "type": "string",
          "description": "local path to include, can be either directory or file  Path and Text are mutually exclusive",
          "x-intellij-html-description": "local path to include, can be either directory or file  Path and Text are mutually exclusive"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^text@.*": {
          "type": "string",
          "description": "config text to include, usually used with rendering suffix to include remote config  Path and Text are mutually exclusive",
          "x-intellij-html-description": "config text to include, usually used with rendering suffix to include remote config  Path and Text are mutually exclusive"
        },
        "^text@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.dukkha.Env": {
      "items": {
        "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
      },
      "type": "array",
      "description": "a list of name/value pairs (ordered)",
      "x-intellij-html-description": "a list of name/value pairs (ordered)"
    },
    "arhat.dev.dukkha.pkg.dukkha.EnvEntry": {
      "properties": {
        "name": {
          "type": "string",
          "description": "of the entry (in other words, key)",
          "x-intellij-html-description": "of the entry (in other words, key)"
        },
        "value": {
          "type": "string",
          "description": "associated to the name",
          "x-intellij-html-description": "associated to the name"
        }
      },
      "preferredOrder": [
        "name",
        "value"
      ],
      "additionalProperties": false,
      "description": "a single name/value pair",
      "x-intellij-html-description": "a single name/value pair",
      "patternProperties": {
        "^value@.*": {
          "type": "string",
          "description": "associated to the name",
          "x-intellij-html-description": "associated to the name"
        },
        "^value@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.dukkha.RendererAttribute": {
      "type": "string"
    },
    "arhat.dev.dukkha.pkg.dukkha.ToolName": {
      "type": "string"
    },
    "arhat.dev.dukkha.pkg.matrix.Spec": {
      "properties": {
        "arch": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Vector"
        },
        "exclude": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.specItem"
          },
          "type": "array"
        },
        "include": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.specItem"
          },
          "type": "array"
        },
        "kernel": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Vector",
          "description": "TODO: validate kernel and arch values to ensure \t\t tools get expected value set",
          "x-intellij-html-description": "TODO: validate kernel and arch values to ensure \t\t tools get expected value set"
        }
      },
      "preferredOrder": [
        "include",
        "exclude",
        "kernel",
        "arch"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^arch@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Vector"
        },
        "^arch@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^exclude@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.specItem"
          },
          "type": "array"
        },
        "^exclude@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^include@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.specItem"
          },
          "type": "array"
        },
        "^include@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^kernel@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Vector",
          "description": "TODO: validate kernel and arch values to ensure \t\t tools get expected value set",
          "x-intellij-html-description": "TODO: validate kernel and arch values to ensure \t\t tools get expected value set"
        },
        "^kernel@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.matrix.Vector": {
      "properties": {
        "__": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "preferredOrder": [
        "__"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^__@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^__@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.matrix.specItem": {
      "description": "a helper type to support rendering suffix for list of maps, used in Include/Exclude",
      "x-intellij-html-description": "a helper type to support rendering suffix for list of maps, used in Include/Exclude"
    },
    "arhat.dev.dukkha.pkg.renderer.CacheConfig": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "activates data caching  * for renderers reading data directly from local disk (e.g. file):     will cache content in memory with size limit applied * for renderers doing remote fetch (e.g. http, git, af):     will cache data on local disk first (cache size limiting is not effective at this time) \t   then cache data in memory with size limit applied",
          "x-intellij-html-description": "activates data caching  * for renderers reading data directly from local disk (e.g. file):     will cache content in memory with size limit applied * for renderers doing remote fetch (e.g. http, git, af):     will cache data on local disk first (cache size limiting is not effective at this time) \t   then cache data in memory with size limit applied",
          "default": false
        },
        "max_item_size": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.utils.Size",
          "description": "maximum size limit an item can be cached in memory  Format: <number><unit> \twhere unit can be one of: [ , B, KB, MB, GB, TB, PB]",
          "x-intellij-html-description": "maximum size limit an item can be cached in memory  Format: <number><unit> \twhere unit can be one of: [ , B, KB, MB, GB, TB, PB]",
          "default": 0
        },
        "size": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.utils.Size",
          "description": "limits maximum in memory size of cached content  Format: <number><unit> \twhere unit can be one of: [ , B, KB, MB, GB, TB, PB]",
          "x-intellij-html-description": "limits maximum in memory size of cached content  Format: <number><unit> \twhere unit can be one of: [ , B, KB, MB, GB, TB, PB]",
          "default": 0
        },
        "timeout": {
          "$ref": "#/definitions/time.Duration",
          "description": "data caching duration  if caching is enabled and this option is set to 0:  in memory cache will never expire during runtime \tfile cache for remote content will expire immediately (probably that's not what you want)",
          "x-intellij-html-description": "data caching duration  if caching is enabled and this option is set to 0:  in memory cache will never expire during runtime \tfile cache for remote content will expire immediately (probably that's not what you want)",
          "default": 0
        }
      },
      "preferredOrder": [
        "enabled",
        "max_item_size",
        "size",
        "timeout"
      ],
      "additionalProperties": false,
      "description": "config for data caching",
      "x-intellij-html-description": "config for data caching",
      "patternProperties": {
        "^enabled@.*": {
          "type": "boolean",
          "description": "activates data caching  * for renderers reading data directly from local disk (e.g. file):     will cache content in memory with size limit applied * for renderers doing remote fetch (e.g. http, git, af):     will cache data on local disk first (cache size limiting is not effective at this time) \t   then cache data in memory with size limit applied",
          "x-intellij-html-description": "activates data caching  * for renderers reading data directly from local disk (e.g. file):     will cache content in memory with size limit applied * for renderers doing remote fetch (e.g. http, git, af):     will cache data on local disk first (cache size limiting is not effective at this time) \t   then cache data in memory with size limit applied",
          "default": false
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^max_item_size@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.utils.Size",
          "description": "maximum size limit an item can be cached in memory  Format: <number><unit> \twhere unit can be one of: [ , B, KB, MB, GB, TB, PB]",
          "x-intellij-html-description": "maximum size limit an item can be cached in memory  Format: <number><unit> \twhere unit can be one of: [ , B, KB, MB, GB, TB, PB]",
          "default": 0
        },
        "^max_item_size@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^size@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.utils.Size",
          "description": "limits maximum in memory size of cached content  Format: <number><unit> \twhere unit can be one of: [ , B, KB, MB, GB, TB, PB]",
          "x-intellij-html-description": "limits maximum in memory size of cached content  Format: <number><unit> \twhere unit can be one of: [ , B, KB, MB, GB, TB, PB]",
          "default": 0
        },
        "^size@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^timeout@.*": {
          "$ref": "#/definitions/time.Duration",
          "description": "data caching duration  if caching is enabled and this option is set to 0:  in memory cache will never expire during runtime \tfile cache for remote content will expire immediately (probably that's not what you want)",
          "x-intellij-html-description": "data caching duration  if caching is enabled and this option is set to 0:  in memory cache will never expire during runtime \tfile cache for remote content will expire immediately (probably that's not what you want)",
          "default": 0
        },
        "^timeout@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.af.Driver": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "cache": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.CacheConfig"
        }
      },
      "preferredOrder": [
        "alias",
        "attributes",
        "cache"
      ],
      "patternProperties": {
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cache@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.CacheConfig"
        },
        "^cache@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.echo.Driver": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        }
      },
      "preferredOrder": [
        "alias",
        "attributes"
      ],
      "patternProperties": {
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.env.Driver": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "enable_exec": {
          "type": "boolean",
          "description": "controls arbitrary command execution support when expanding env.  if set to false, expanding env with shell evaluation (e.g. `$(do something)`) will be skipped and formatted  NOTE: shell evaluation of backqouted string is always skipped and formatted",
          "x-intellij-html-description": "controls arbitrary command execution support when expanding env.  if set to false, expanding env with shell evaluation (e.g. <code>$(do something)</code>) will be skipped and formatted  NOTE: shell evaluation of backqouted string is always skipped and formatted",
          "default": false
        }
      },
      "preferredOrder": [
        "alias",
        "attributes",
        "enable_exec"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enable_exec@.*": {
          "type": "boolean",
          "description": "controls arbitrary command execution support when expanding env.  if set to false, expanding env with shell evaluation (e.g. `$(do something)`) will be skipped and formatted  NOTE: shell evaluation of backqouted string is always skipped and formatted",
          "x-intellij-html-description": "controls arbitrary command execution support when expanding env.  if set to false, expanding env with shell evaluation (e.g. <code>$(do something)</code>) will be skipped and formatted  NOTE: shell evaluation of backqouted string is always skipped and formatted",
          "default": false
        },
        "^enable_exec@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.file.Driver": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "cache": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.CacheConfig"
        }
      },
      "preferredOrder": [
        "alias",
        "attributes",
        "cache"
      ],
      "patternProperties": {
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cache@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.CacheConfig"
        },
        "^cache@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.git.Driver": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "cache": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.CacheConfig"
        },
        "host": {
          "type": "string",
          "description": "of git ssh server e.g. gitlab.com",
          "x-intellij-html-description": "of git ssh server e.g. gitlab.com"
        },
        "host_key": {
          "type": "string",
          "description": "public key to verify remote host",
          "x-intellij-html-description": "public key to verify remote host"
        },
        "password": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "description": "of ssh service, defaults to `22`",
          "x-intellij-html-description": "of ssh service, defaults to <code>22</code>"
        },
        "private_key": {
          "type": "string",
          "description": "authentication",
          "x-intellij-html-description": "authentication"
        },
        "user": {
          "type": "string",
          "description": "for git ssh service, defaults to `git`",
          "x-intellij-html-description": "for git ssh service, defaults to <code>git</code>"
        }
      },
      "preferredOrder": [
        "alias",
        "attributes",
        "cache",
        "user",
        "host",
        "port",
        "host_key",
        "private_key",
        "password"
      ],
      "description": "git renderer implementation",
      "x-intellij-html-description": "git renderer implementation",
      "patternProperties": {
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cache@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.CacheConfig"
        },
        "^cache@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^host@.*": {
          "type": "string",
          "description": "of git ssh server e.g. gitlab.com",
          "x-intellij-html-description": "of git ssh server e.g. gitlab.com"
        },
        "^host@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^host_key@.*": {
          "type": "string",
          "description": "public key to verify remote host",
          "x-intellij-html-description": "public key to verify remote host"
        },
        "^host_key@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^password@.*": {
          "type": "string"
        },
        "^password@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^port@.*": {
          "type": "integer",
          "description": "of ssh service, defaults to `22`",
          "x-intellij-html-description": "of ssh service, defaults to <code>22</code>"
        },
        "^port@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^private_key@.*": {
          "type": "string",
          "description": "authentication",
          "x-intellij-html-description": "authentication"
        },
        "^private_key@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^user@.*": {
          "type": "string",
          "description": "for git ssh service, defaults to `git`",
          "x-intellij-html-description": "for git ssh service, defaults to <code>git</code>"
        },
        "^user@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.http.Driver": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "base_url": {
          "type": "string",
          "description": "BaseURL",
          "x-intellij-html-description": "BaseURL"
        },
        "body": {
          "type": "string"
        },
        "cache": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.CacheConfig"
        },
        "headers": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.http.headers"
        },
        "method": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "proxy": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.http.httpProxyConfig"
        },
        "tls": {
          "$ref": "#/definitions/arhat.dev.pkg.tlshelper.TLSConfig"
        },
        "user": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "alias",
        "attributes",
        "cache",
        "user",
        "password",
        "headers",
        "method",
        "proxy",
        "tls",
        "body",
        "base_url"
      ],
      "patternProperties": {
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^base_url@.*": {
          "type": "string",
          "description": "BaseURL",
          "x-intellij-html-description": "BaseURL"
        },
        "^base_url@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^body@.*": {
          "type": "string"
        },
        "^body@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cache@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.CacheConfig"
        },
        "^cache@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^headers@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.http.headers"
        },
        "^headers@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^method@.*": {
          "type": "string"
        },
        "^method@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^password@.*": {
          "type": "string"
        },
        "^password@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^proxy@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.http.httpProxyConfig"
        },
        "^proxy@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^tls@.*": {
          "$ref": "#/definitions/arhat.dev.pkg.tlshelper.TLSConfig"
        },
        "^tls@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^user@.*": {
          "type": "string"
        },
        "^user@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.http.headers": {
      "items": {
        "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.http.nameValuePair"
      },
      "type": "array"
    },
    "arhat.dev.dukkha.pkg.renderer.http.httpProxyConfig": {
      "properties": {
        "cgi": {
          "type": "boolean",
          "default": "false"
        },
        "enabled": {
          "type": "boolean",
          "default": "false"
        },
        "http": {
          "type": "string"
        },
        "https": {
          "type": "string"
        },
        "no_proxy": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "enabled",
        "http",
        "https",
        "no_proxy",
        "cgi"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cgi@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^cgi@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enabled@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^http@.*": {
          "type": "string"
        },
        "^http@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^https@.*": {
          "type": "string"
        },
        "^https@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^no_proxy@.*": {
          "type": "string"
        },
        "^no_proxy@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.http.nameValuePair": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "value"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^value@.*": {
          "type": "string"
        },
        "^value@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.input.Driver": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "hide_input": {
          "type": "boolean",
          "description": "do not echo input",
          "x-intellij-html-description": "do not echo input",
          "default": false
        },
        "prompt": {
          "type": "string",
          "description": "for user input  Defaults to \"\" (empty)",
          "x-intellij-html-description": "for user input  Defaults to &quot;&quot; (empty)"
        }
      },
      "preferredOrder": [
        "alias",
        "attributes",
        "hide_input",
        "prompt"
      ],
      "patternProperties": {
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hide_input@.*": {
          "type": "boolean",
          "description": "do not echo input",
          "x-intellij-html-description": "do not echo input",
          "default": false
        },
        "^hide_input@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^prompt@.*": {
          "type": "string",
          "description": "for user input  Defaults to \"\" (empty)",
          "x-intellij-html-description": "for user input  Defaults to &quot;&quot; (empty)"
        },
        "^prompt@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.s3.Driver": {
      "properties": {
        "access_key_id": {
          "type": "string"
        },
        "access_key_secret": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "base_path": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "cache": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.CacheConfig"
        },
        "endpoint_url": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "alias",
        "attributes",
        "cache",
        "endpoint_url",
        "region",
        "bucket",
        "base_path",
        "access_key_id",
        "access_key_secret"
      ],
      "patternProperties": {
        "^access_key_id@.*": {
          "type": "string"
        },
        "^access_key_id@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^access_key_secret@.*": {
          "type": "string"
        },
        "^access_key_secret@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^base_path@.*": {
          "type": "string"
        },
        "^base_path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^bucket@.*": {
          "type": "string"
        },
        "^bucket@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cache@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.CacheConfig"
        },
        "^cache@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^endpoint_url@.*": {
          "type": "string"
        },
        "^endpoint_url@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^region@.*": {
          "type": "string"
        },
        "^region@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.shell.Driver": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        }
      },
      "preferredOrder": [
        "alias",
        "attributes"
      ],
      "patternProperties": {
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.tpl.Driver": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "include": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.tpl.includeSpec"
          },
          "type": "array",
          "description": "templates",
          "x-intellij-html-description": "templates"
        },
        "variables": {
          "$ref": "#/definitions/arhat.dev.rs.AnyObjectMap",
          "description": "a map of any data  available as `var.some_value`",
          "x-intellij-html-description": "a map of any data  available as <code>var.some_value</code>"
        }
      },
      "preferredOrder": [
        "alias",
        "attributes",
        "include",
        "variables"
      ],
      "patternProperties": {
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^include@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.renderer.tpl.includeSpec"
          },
          "type": "array",
          "description": "templates",
          "x-intellij-html-description": "templates"
        },
        "^include@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^variables@.*": {
          "$ref": "#/definitions/arhat.dev.rs.AnyObjectMap",
          "description": "a map of any data  available as `var.some_value`",
          "x-intellij-html-description": "a map of any data  available as <code>var.some_value</code>"
        },
        "^variables@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.tpl.includeSpec": {
      "properties": {
        "path": {
          "type": "string",
          "description": "to local files/dirs",
          "x-intellij-html-description": "to local files/dirs"
        },
        "text": {
          "type": "string",
          "description": "plain text template to be included",
          "x-intellij-html-description": "plain text template to be included"
        }
      },
      "preferredOrder": [
        "path",
        "text"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^path@.*": {
          "type": "string",
          "description": "to local files/dirs",
          "x-intellij-html-description": "to local files/dirs"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^text@.*": {
          "type": "string",
          "description": "plain text template to be included",
          "x-intellij-html-description": "plain text template to be included"
        },
        "^text@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.renderer.transform.Driver": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        }
      },
      "preferredOrder": [
        "alias",
        "attributes"
      ],
      "patternProperties": {
        "^alias@.*": {
          "type": "string"
        },
        "^alias@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^attributes@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.RendererAttribute"
          },
          "type": "array"
        },
        "^attributes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.Action": {
      "properties": {
        "chdir": {
          "type": "string",
          "description": "change working directory before executing command this option only applies to Cmd, EmbeddedShell, ExternalShell action",
          "x-intellij-html-description": "change working directory before executing command this option only applies to Cmd, EmbeddedShell, ExternalShell action"
        },
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "execution, not in any shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive",
          "x-intellij-html-description": "execution, not in any shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive"
        },
        "continue_on_error": {
          "type": "boolean",
          "description": "ContuineOnError ignores error occurred in this action and continue following actions in list (if any)",
          "x-intellij-html-description": "ContuineOnError ignores error occurred in this action and continue following actions in list (if any)",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env",
          "description": "specific to this action",
          "x-intellij-html-description": "specific to this action"
        },
        "idle": {
          "description": "does nothing but serves as a placeholder for preparation purpose recommended usage of Idle action is to apply renderers like `tpl` to do some task execution state related operation (e.g. set global value with `dukkha.SetValue`)",
          "x-intellij-html-description": "does nothing but serves as a placeholder for preparation purpose recommended usage of Idle action is to apply renderers like <code>tpl</code> to do some task execution state related operation (e.g. set global value with <code>dukkha.SetValue</code>)"
        },
        "name": {
          "type": "string",
          "description": "of this action  if set, can be used as value for `Next`",
          "x-intellij-html-description": "of this action  if set, can be used as value for <code>Next</code>",
          "default": "#i"
        },
        "next": {
          "type": "string",
          "description": "action name NOTE: this field is resolved after execution finished (right before leaving this action)  Defaults to the next action in the same list",
          "x-intellij-html-description": "action name NOTE: this field is resolved after execution finished (right before leaving this action)  Defaults to the next action in the same list"
        },
        "shell": {
          "type": "string",
          "description": "using embedded shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive",
          "x-intellij-html-description": "using embedded shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive"
        },
        "task": {
          "type": "string",
          "description": "reference of this action  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive",
          "x-intellij-html-description": "reference of this action  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "idle",
        "task",
        "shell",
        "cmd",
        "chdir",
        "continue_on_error",
        "next"
      ],
      "additionalProperties": false,
      "description": "a collection of all kinds of work can be done in a single step but only one kind of work is allowed in a single step",
      "x-intellij-html-description": "a collection of all kinds of work can be done in a single step but only one kind of work is allowed in a single step",
      "patternProperties": {
        "^chdir@.*": {
          "type": "string",
          "description": "change working directory before executing command this option only applies to Cmd, EmbeddedShell, ExternalShell action",
          "x-intellij-html-description": "change working directory before executing command this option only applies to Cmd, EmbeddedShell, ExternalShell action"
        },
        "^chdir@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "execution, not in any shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive",
          "x-intellij-html-description": "execution, not in any shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@.*": {
          "type": "boolean",
          "description": "ContuineOnError ignores error occurred in this action and continue following actions in list (if any)",
          "x-intellij-html-description": "ContuineOnError ignores error occurred in this action and continue following actions in list (if any)",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env",
          "description": "specific to this action",
          "x-intellij-html-description": "specific to this action"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^idle@.*": {
          "description": "does nothing but serves as a placeholder for preparation purpose recommended usage of Idle action is to apply renderers like `tpl` to do some task execution state related operation (e.g. set global value with `dukkha.SetValue`)",
          "x-intellij-html-description": "does nothing but serves as a placeholder for preparation purpose recommended usage of Idle action is to apply renderers like <code>tpl</code> to do some task execution state related operation (e.g. set global value with <code>dukkha.SetValue</code>)"
        },
        "^idle@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^next@.*": {
          "type": "string",
          "description": "action name NOTE: this field is resolved after execution finished (right before leaving this action)  Defaults to the next action in the same list",
          "x-intellij-html-description": "action name NOTE: this field is resolved after execution finished (right before leaving this action)  Defaults to the next action in the same list"
        },
        "^next@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell@.*": {
          "type": "string",
          "description": "using embedded shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive",
          "x-intellij-html-description": "using embedded shell  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive"
        },
        "^shell@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^task@.*": {
          "type": "string",
          "description": "reference of this action  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive",
          "x-intellij-html-description": "reference of this action  Task, Cmd, EmbeddedShell, ExternalShell are mutually exclusive"
        },
        "^task@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.Actions": {
      "items": {
        "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Action"
      },
      "type": "array"
    },
    "arhat.dev.dukkha.pkg.tools.ShellTool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.ToolName"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.TaskHooks": {
      "properties": {
        "after": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "any condition of the task execution including success, failure, canceled (hook `before` failure)  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "any condition of the task execution including success, failure, canceled (hook <code>before</code> failure)  This hook MUST NOT have any reference to matrix information"
        },
        "after:failure": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs after a failed task execution any failed matrix execution will cause this hook to run  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "runs after a failed task execution any failed matrix execution will cause this hook to run  This hook MUST NOT have any reference to matrix information"
        },
        "after:matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs after at any condition of the matrix execution including success, failure  This hook May have reference to matrix information",
          "x-intellij-html-description": "runs after at any condition of the matrix execution including success, failure  This hook May have reference to matrix information"
        },
        "after:matrix:failure": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs after a failed matrix execution  This hook May have reference to matrix information",
          "x-intellij-html-description": "runs after a failed matrix execution  This hook May have reference to matrix information"
        },
        "after:matrix:success": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs after a successful matrix execution  This hook May have reference to matrix information",
          "x-intellij-html-description": "runs after a successful matrix execution  This hook May have reference to matrix information"
        },
        "after:success": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs after a successful task execution requires all matrix executions are successful  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "runs after a successful task execution requires all matrix executions are successful  This hook MUST NOT have any reference to matrix information"
        },
        "before": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs before the task execution start if this hook failed, the whole task execution is canceled and will run `After` hooks  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "runs before the task execution start if this hook failed, the whole task execution is canceled and will run <code>After</code> hooks  This hook MUST NOT have any reference to matrix information"
        },
        "before:matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "Before a specific matrix execution start  This hook May have reference to matrix information",
          "x-intellij-html-description": "Before a specific matrix execution start  This hook May have reference to matrix information"
        }
      },
      "preferredOrder": [
        "before",
        "before:matrix",
        "after:matrix:success",
        "after:matrix:failure",
        "after:matrix",
        "after:success",
        "after:failure",
        "after"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^after:failure@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs after a failed task execution any failed matrix execution will cause this hook to run  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "runs after a failed task execution any failed matrix execution will cause this hook to run  This hook MUST NOT have any reference to matrix information"
        },
        "^after:failure@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^after:matrix:failure@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs after a failed matrix execution  This hook May have reference to matrix information",
          "x-intellij-html-description": "runs after a failed matrix execution  This hook May have reference to matrix information"
        },
        "^after:matrix:failure@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^after:matrix:success@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs after a successful matrix execution  This hook May have reference to matrix information",
          "x-intellij-html-description": "runs after a successful matrix execution  This hook May have reference to matrix information"
        },
        "^after:matrix:success@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^after:matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs after at any condition of the matrix execution including success, failure  This hook May have reference to matrix information",
          "x-intellij-html-description": "runs after at any condition of the matrix execution including success, failure  This hook May have reference to matrix information"
        },
        "^after:matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^after:success@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs after a successful task execution requires all matrix executions are successful  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "runs after a successful task execution requires all matrix executions are successful  This hook MUST NOT have any reference to matrix information"
        },
        "^after:success@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^after@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "any condition of the task execution including success, failure, canceled (hook `before` failure)  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "any condition of the task execution including success, failure, canceled (hook <code>before</code> failure)  This hook MUST NOT have any reference to matrix information"
        },
        "^after@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^before:matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "Before a specific matrix execution start  This hook May have reference to matrix information",
          "x-intellij-html-description": "Before a specific matrix execution start  This hook May have reference to matrix information"
        },
        "^before:matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^before@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions",
          "description": "runs before the task execution start if this hook failed, the whole task execution is canceled and will run `After` hooks  This hook MUST NOT have any reference to matrix information",
          "x-intellij-html-description": "runs before the task execution start if this hook failed, the whole task execution is canceled and will run <code>After</code> hooks  This hook MUST NOT have any reference to matrix information"
        },
        "^before@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.archive.TaskCreate": {
      "properties": {
        "compression": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.archive.compressionSpec",
          "description": "configuration",
          "x-intellij-html-description": "configuration"
        },
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.archive.archiveFileSpec"
          },
          "type": "array",
          "description": "to include into archive",
          "x-intellij-html-description": "to include into archive"
        },
        "format": {
          "type": "string",
          "description": "of the archive, one of [tar, zip]",
          "x-intellij-html-description": "of the archive, one of [tar, zip]",
          "default": "\"zip\"` when matrix.kernel is set to windows, otherwise `\"tar\""
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "output": {
          "type": "string",
          "description": "archive file",
          "x-intellij-html-description": "archive file"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "format",
        "compression",
        "output",
        "files"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^compression@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.archive.compressionSpec",
          "description": "configuration",
          "x-intellij-html-description": "configuration"
        },
        "^compression@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^files@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.archive.archiveFileSpec"
          },
          "type": "array",
          "description": "to include into archive",
          "x-intellij-html-description": "to include into archive"
        },
        "^files@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^format@.*": {
          "type": "string",
          "description": "of the archive, one of [tar, zip]",
          "x-intellij-html-description": "of the archive, one of [tar, zip]",
          "default": "\"zip\"` when matrix.kernel is set to windows, otherwise `\"tar\""
        },
        "^format@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@.*": {
          "type": "string",
          "description": "archive file",
          "x-intellij-html-description": "archive file"
        },
        "^output@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.archive.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.ToolName"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.archive.archiveFileSpec": {
      "properties": {
        "from": {
          "type": "string",
          "description": "local file path, include files to be archived with glob pattern support",
          "x-intellij-html-description": "local file path, include files to be archived with glob pattern support"
        },
        "to": {
          "type": "string",
          "description": "in archive path those files will go",
          "x-intellij-html-description": "in archive path those files will go"
        }
      },
      "preferredOrder": [
        "from",
        "to"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^from@.*": {
          "type": "string",
          "description": "local file path, include files to be archived with glob pattern support",
          "x-intellij-html-description": "local file path, include files to be archived with glob pattern support"
        },
        "^from@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^to@.*": {
          "type": "string",
          "description": "in archive path those files will go",
          "x-intellij-html-description": "in archive path those files will go"
        },
        "^to@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.archive.compressionSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable compression",
          "x-intellij-html-description": "Enable compression",
          "default": false
        },
        "level": {
          "type": "string",
          "description": "of compression, value is method dependent, usually 1 - 9",
          "x-intellij-html-description": "of compression, value is method dependent, usually 1 - 9",
          "default": 5
        },
        "method": {
          "type": "string",
          "description": "of compression  for `tar`, one of [gzip, bzip2, zstd, lzma, xz, zstd] for `zip`, one of [deflate, bzip2, zstd, lzma, xz, zstd]  Defaults to `\"defalte\"` when format is zip",
          "x-intellij-html-description": "of compression  for <code>tar</code>, one of [gzip, bzip2, zstd, lzma, xz, zstd] for <code>zip</code>, one of [deflate, bzip2, zstd, lzma, xz, zstd]  Defaults to <code>&quot;defalte&quot;</code> when format is zip",
          "default": "gzip"
        }
      },
      "preferredOrder": [
        "enabled",
        "method",
        "level"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@.*": {
          "type": "boolean",
          "description": "Enable compression",
          "x-intellij-html-description": "Enable compression",
          "default": false
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^level@.*": {
          "type": "string",
          "description": "of compression, value is method dependent, usually 1 - 9",
          "x-intellij-html-description": "of compression, value is method dependent, usually 1 - 9",
          "default": 5
        },
        "^level@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^method@.*": {
          "type": "string",
          "description": "of compression  for `tar`, one of [gzip, bzip2, zstd, lzma, xz, zstd] for `zip`, one of [deflate, bzip2, zstd, lzma, xz, zstd]  Defaults to `\"defalte\"` when format is zip",
          "x-intellij-html-description": "of compression  for <code>tar</code>, one of [gzip, bzip2, zstd, lzma, xz, zstd] for <code>zip</code>, one of [deflate, bzip2, zstd, lzma, xz, zstd]  Defaults to <code>&quot;defalte&quot;</code> when format is zip",
          "default": "gzip"
        },
        "^method@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec": {
      "properties": {
        "image": {
          "type": "string"
        },
        "manifest": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "image",
        "manifest"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^image@.*": {
          "type": "string"
        },
        "^image@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^manifest@.*": {
          "type": "string"
        },
        "^manifest@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.TaskBuild": {
      "properties": {
        "build_args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "--build-arg",
          "x-intellij-html-description": "--build-arg"
        },
        "context": {
          "type": "string"
        },
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "file": {
          "type": "string"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "image_names": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "context",
        "image_names",
        "file",
        "build_args",
        "extra_args"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^build_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "--build-arg",
          "x-intellij-html-description": "--build-arg"
        },
        "^build_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^context@.*": {
          "type": "string"
        },
        "^context@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^extra_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^file@.*": {
          "type": "string"
        },
        "^file@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image_names@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array"
        },
        "^image_names@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.TaskLogin": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "registry": {
          "type": "string"
        },
        "tls_skip_verify": {
          "type": "boolean"
        },
        "username": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "registry",
        "username",
        "password",
        "tls_skip_verify"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^password@.*": {
          "type": "string"
        },
        "^password@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^registry@.*": {
          "type": "string"
        },
        "^registry@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^tls_skip_verify@.*": {
          "type": "boolean"
        },
        "^tls_skip_verify@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^username@.*": {
          "type": "string"
        },
        "^username@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.TaskPush": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "image_names": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "image_names"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image_names@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array"
        },
        "^image_names@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.TaskXBuild": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "image_names": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "steps": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.step"
          },
          "type": "array",
          "description": "Context string  `yaml:\"context\"`",
          "x-intellij-html-description": "Context string  <code>yaml:&quot;context&quot;</code>"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "steps",
        "image_names"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image_names@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array"
        },
        "^image_names@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^steps@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.step"
          },
          "type": "array",
          "description": "Context string  `yaml:\"context\"`",
          "x-intellij-html-description": "Context string  <code>yaml:&quot;context&quot;</code>"
        },
        "^steps@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.ToolName"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromHTTPSpec": {
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "url"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^url@.*": {
          "type": "string"
        },
        "^url@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromImageSpec": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "extra_pull_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kernel": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "ref",
        "kernel",
        "arch",
        "extra_pull_args",
        "path"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^arch@.*": {
          "type": "string"
        },
        "^arch@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_pull_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^extra_pull_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^kernel@.*": {
          "type": "string"
        },
        "^kernel@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@.*": {
          "type": "string"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ref@.*": {
          "type": "string"
        },
        "^ref@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromLocalSpec": {
      "properties": {
        "path": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "path"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^path@.*": {
          "type": "string"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromSpec": {
      "properties": {
        "http": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromHTTPSpec"
        },
        "image": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromImageSpec"
        },
        "local": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromLocalSpec"
        },
        "step": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromStepSpec"
        },
        "text": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromTextSpec"
        }
      },
      "preferredOrder": [
        "text",
        "local",
        "http",
        "image",
        "step"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^http@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromHTTPSpec"
        },
        "^http@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromImageSpec"
        },
        "^image@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^local@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromLocalSpec"
        },
        "^local@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^step@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromStepSpec"
        },
        "^step@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^text@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromTextSpec"
        },
        "^text@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromStepSpec": {
      "properties": {
        "id": {
          "type": "string",
          "description": "of that step",
          "x-intellij-html-description": "of that step"
        },
        "path": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "id",
        "path"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^id@.*": {
          "type": "string",
          "description": "of that step",
          "x-intellij-html-description": "of that step"
        },
        "^id@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@.*": {
          "type": "string"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyFromTextSpec": {
      "properties": {
        "data": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "data"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^data@.*": {
          "type": "string"
        },
        "^data@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.copyToSpec": {
      "properties": {
        "path": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "path"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^path@.*": {
          "type": "string"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.mountSpec": {
      "properties": {
        "from": {
          "type": "string"
        },
        "options": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "of bind mount \tro, rw, z, Z, O \tshared, slave, private, unbindable  rshared, rslave, rprivate, runbindable",
          "x-intellij-html-description": "of bind mount \tro, rw, z, Z, O \tshared, slave, private, unbindable  rshared, rslave, rprivate, runbindable"
        },
        "to": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "from",
        "to",
        "options"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^from@.*": {
          "type": "string"
        },
        "^from@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^options@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "of bind mount \tro, rw, z, Z, O \tshared, slave, private, unbindable  rshared, rslave, rprivate, runbindable",
          "x-intellij-html-description": "of bind mount \tro, rw, z, Z, O \tshared, slave, private, unbindable  rshared, rslave, rprivate, runbindable"
        },
        "^options@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^to@.*": {
          "type": "string"
        },
        "^to@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.step": {
      "properties": {
        "commit": {
          "type": "boolean",
          "description": "this step as a new layer after this step finished  this is set to true by default when: - at last step - switching to different container at next step (next step is a FROM statement)",
          "x-intellij-html-description": "this step as a new layer after this step finished  this is set to true by default when: - at last step - switching to different container at next step (next step is a FROM statement)"
        },
        "commit_as": {
          "type": "string",
          "description": "set the image name the container committed as",
          "x-intellij-html-description": "set the image name the container committed as"
        },
        "compress": {
          "type": "boolean",
          "description": "when commit, defaults to true",
          "x-intellij-html-description": "when commit, defaults to true"
        },
        "copy": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepCopy",
          "description": "files to somewhere",
          "x-intellij-html-description": "files to somewhere"
        },
        "extra_commit_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "from": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepFrom",
          "description": "some rootfs",
          "x-intellij-html-description": "some rootfs"
        },
        "id": {
          "type": "string",
          "description": "of this step, if not set, will be the array index of this step",
          "x-intellij-html-description": "of this step, if not set, will be the array index of this step"
        },
        "record": {
          "type": "boolean",
          "description": "to add flag --add-history",
          "x-intellij-html-description": "to add flag --add-history"
        },
        "run": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepRun",
          "description": "some command",
          "x-intellij-html-description": "some command"
        },
        "set": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepSet",
          "description": "default options for all following steps",
          "x-intellij-html-description": "default options for all following steps"
        },
        "skip": {
          "type": "boolean",
          "description": "this step when set to true",
          "x-intellij-html-description": "this step when set to true",
          "default": "false"
        }
      },
      "preferredOrder": [
        "id",
        "record",
        "commit",
        "commit_as",
        "extra_commit_args",
        "compress",
        "skip",
        "set",
        "from",
        "run",
        "copy"
      ],
      "additionalProperties": false,
      "description": "structured `buildah <subcmd>` for image building",
      "x-intellij-html-description": "structured <code>buildah &lt;subcmd&gt;</code> for image building",
      "patternProperties": {
        "^commit@.*": {
          "type": "boolean",
          "description": "this step as a new layer after this step finished  this is set to true by default when: - at last step - switching to different container at next step (next step is a FROM statement)",
          "x-intellij-html-description": "this step as a new layer after this step finished  this is set to true by default when: - at last step - switching to different container at next step (next step is a FROM statement)"
        },
        "^commit@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^commit_as@.*": {
          "type": "string",
          "description": "set the image name the container committed as",
          "x-intellij-html-description": "set the image name the container committed as"
        },
        "^commit_as@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^compress@.*": {
          "type": "boolean",
          "description": "when commit, defaults to true",
          "x-intellij-html-description": "when commit, defaults to true"
        },
        "^compress@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^copy@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepCopy",
          "description": "files to somewhere",
          "x-intellij-html-description": "files to somewhere"
        },
        "^copy@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_commit_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^extra_commit_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^from@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepFrom",
          "description": "some rootfs",
          "x-intellij-html-description": "some rootfs"
        },
        "^from@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^id@.*": {
          "type": "string",
          "description": "of this step, if not set, will be the array index of this step",
          "x-intellij-html-description": "of this step, if not set, will be the array index of this step"
        },
        "^id@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^record@.*": {
          "type": "boolean",
          "description": "to add flag --add-history",
          "x-intellij-html-description": "to add flag --add-history"
        },
        "^record@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^run@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepRun",
          "description": "some command",
          "x-intellij-html-description": "some command"
        },
        "^run@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^set@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.stepSet",
          "description": "default options for all following steps",
          "x-intellij-html-description": "default options for all following steps"
        },
        "^set@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^skip@.*": {
          "type": "boolean",
          "description": "this step when set to true",
          "x-intellij-html-description": "this step when set to true",
          "default": "false"
        },
        "^skip@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.stepCopy": {
      "properties": {
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "for buildah copy",
          "x-intellij-html-description": "for buildah copy"
        },
        "from": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromSpec"
        },
        "to": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyToSpec"
        }
      },
      "preferredOrder": [
        "from",
        "to",
        "extra_args"
      ],
      "additionalProperties": false,
      "description": "structured `buildah copy`",
      "x-intellij-html-description": "structured <code>buildah copy</code>",
      "patternProperties": {
        "^extra_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "for buildah copy",
          "x-intellij-html-description": "for buildah copy"
        },
        "^extra_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^from@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyFromSpec"
        },
        "^from@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^to@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.copyToSpec"
        },
        "^to@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.stepFrom": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "extra_pull_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kernel": {
          "type": "string"
        },
        "mount": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.mountSpec"
          },
          "type": "array",
          "description": "TODO: implement",
          "x-intellij-html-description": "TODO: implement"
        },
        "ref": {
          "type": "string",
          "description": "image",
          "x-intellij-html-description": "image"
        }
      },
      "preferredOrder": [
        "ref",
        "kernel",
        "arch",
        "extra_pull_args",
        "mount",
        "extra_args"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^arch@.*": {
          "type": "string"
        },
        "^arch@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^extra_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_pull_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^extra_pull_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^kernel@.*": {
          "type": "string"
        },
        "^kernel@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^mount@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.mountSpec"
          },
          "type": "array",
          "description": "TODO: implement",
          "x-intellij-html-description": "TODO: implement"
        },
        "^mount@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ref@.*": {
          "type": "string",
          "description": "image",
          "x-intellij-html-description": "image"
        },
        "^ref@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.stepRun": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "as bare exec",
          "x-intellij-html-description": "as bare exec"
        },
        "executable_args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "for the executable",
          "x-intellij-html-description": "for the executable"
        },
        "executable_file": {
          "type": "string",
          "description": "path in local fs, run it in container  Will copy the executable to container and remove it after executaion  helpful when your executable is large to load as `script`",
          "x-intellij-html-description": "path in local fs, run it in container  Will copy the executable to container and remove it after executaion  helpful when your executable is large to load as <code>script</code>"
        },
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "script": {
          "type": "string",
          "description": " helpful when you need to run remote script, use:  \trun: \t  script@http: http://some-script.company",
          "x-intellij-html-description": "helpful when you need to run remote script, use:  \trun: \t  script@http: http://some-script.company"
        },
        "script_args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "for the script",
          "x-intellij-html-description": "for the script"
        }
      },
      "preferredOrder": [
        "script",
        "script_args",
        "executable_file",
        "executable_args",
        "cmd",
        "extra_args"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "as bare exec",
          "x-intellij-html-description": "as bare exec"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^executable_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "for the executable",
          "x-intellij-html-description": "for the executable"
        },
        "^executable_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^executable_file@.*": {
          "type": "string",
          "description": "path in local fs, run it in container  Will copy the executable to container and remove it after executaion  helpful when your executable is large to load as `script`",
          "x-intellij-html-description": "path in local fs, run it in container  Will copy the executable to container and remove it after executaion  helpful when your executable is large to load as <code>script</code>"
        },
        "^executable_file@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^extra_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^script@.*": {
          "type": "string",
          "description": " helpful when you need to run remote script, use:  \trun: \t  script@http: http://some-script.company",
          "x-intellij-html-description": "helpful when you need to run remote script, use:  \trun: \t  script@http: http://some-script.company"
        },
        "^script@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^script_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "for the script",
          "x-intellij-html-description": "for the script"
        },
        "^script_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.buildah.stepSet": {
      "properties": {
        "annotations": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
          },
          "type": "array"
        },
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "entrypoint": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
          },
          "type": "array"
        },
        "labels": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
          },
          "type": "array"
        },
        "ports": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "shell": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "command to interpreter scripts in run step",
          "x-intellij-html-description": "command to interpreter scripts in run step"
        },
        "stop_signal": {
          "type": "string"
        },
        "user": {
          "type": "string",
          "description": "for command running in run step",
          "x-intellij-html-description": "for command running in run step"
        },
        "volumes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workdir": {
          "type": "string",
          "description": "Workdir",
          "x-intellij-html-description": "Workdir"
        }
      },
      "preferredOrder": [
        "workdir",
        "user",
        "shell",
        "env",
        "annotations",
        "labels",
        "ports",
        "entrypoint",
        "cmd",
        "volumes",
        "stop_signal"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^annotations@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
          },
          "type": "array"
        },
        "^annotations@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^entrypoint@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^entrypoint@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
          },
          "type": "array"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^labels@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.EnvEntry"
          },
          "type": "array"
        },
        "^labels@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ports@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^ports@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^shell@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "command to interpreter scripts in run step",
          "x-intellij-html-description": "command to interpreter scripts in run step"
        },
        "^shell@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^stop_signal@.*": {
          "type": "string"
        },
        "^stop_signal@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^user@.*": {
          "type": "string",
          "description": "for command running in run step",
          "x-intellij-html-description": "for command running in run step"
        },
        "^user@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^volumes@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^volumes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^workdir@.*": {
          "type": "string",
          "description": "Workdir",
          "x-intellij-html-description": "Workdir"
        },
        "^workdir@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.FileSpec": {
      "properties": {
        "content_type": {
          "type": "string",
          "description": "of the local file",
          "x-intellij-html-description": "of the local file"
        },
        "path": {
          "type": "string",
          "description": "to local blob/wasm file",
          "x-intellij-html-description": "to local blob/wasm file"
        }
      },
      "preferredOrder": [
        "path",
        "content_type"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^content_type@.*": {
          "type": "string",
          "description": "of the local file",
          "x-intellij-html-description": "of the local file"
        },
        "^content_type@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@.*": {
          "type": "string",
          "description": "to local blob/wasm file",
          "x-intellij-html-description": "to local blob/wasm file"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.TaskSign": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.blobSigningFileSpec"
          },
          "type": "array",
          "description": "to sign",
          "x-intellij-html-description": "to sign"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "private_key": {
          "type": "string",
          "description": "content of private key to sign content",
          "x-intellij-html-description": "content of private key to sign content"
        },
        "private_key_password": {
          "type": "string",
          "description": "password to the private key",
          "x-intellij-html-description": "password to the private key"
        },
        "public_key": {
          "type": "string",
          "description": "content of public key to verify signed content  if not set, derive from private key",
          "x-intellij-html-description": "content of public key to verify signed content  if not set, derive from private key"
        },
        "verify": {
          "type": "boolean",
          "description": "signature of signed content",
          "x-intellij-html-description": "signature of signed content",
          "default": true
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "private_key",
        "private_key_password",
        "verify",
        "public_key",
        "files"
      ],
      "additionalProperties": false,
      "description": "signs blob",
      "x-intellij-html-description": "signs blob",
      "patternProperties": {
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^files@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.blobSigningFileSpec"
          },
          "type": "array",
          "description": "to sign",
          "x-intellij-html-description": "to sign"
        },
        "^files@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^private_key@.*": {
          "type": "string",
          "description": "content of private key to sign content",
          "x-intellij-html-description": "content of private key to sign content"
        },
        "^private_key@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^private_key_password@.*": {
          "type": "string",
          "description": "password to the private key",
          "x-intellij-html-description": "password to the private key"
        },
        "^private_key_password@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^public_key@.*": {
          "type": "string",
          "description": "content of public key to verify signed content  if not set, derive from private key",
          "x-intellij-html-description": "content of public key to verify signed content  if not set, derive from private key"
        },
        "^public_key@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^verify@.*": {
          "type": "boolean",
          "description": "signature of signed content",
          "x-intellij-html-description": "signature of signed content",
          "default": true
        },
        "^verify@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.TaskSignImage": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "additional key-value data pairs added when signing",
          "x-intellij-html-description": "additional key-value data pairs added when signing",
          "default": "{}"
        },
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "image_names": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array",
          "description": "ImageNames",
          "x-intellij-html-description": "ImageNames"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "private_key": {
          "type": "string",
          "description": "content of private key to sign content",
          "x-intellij-html-description": "content of private key to sign content"
        },
        "private_key_password": {
          "type": "string",
          "description": "password to the private key",
          "x-intellij-html-description": "password to the private key"
        },
        "public_key": {
          "type": "string",
          "description": "content of public key to verify signed content  if not set, derive from private key",
          "x-intellij-html-description": "content of public key to verify signed content  if not set, derive from private key"
        },
        "repo": {
          "type": "string",
          "description": "signature storage repo, defaults to the same repo as image name",
          "x-intellij-html-description": "signature storage repo, defaults to the same repo as image name"
        },
        "verify": {
          "type": "boolean",
          "description": "signature of signed content",
          "x-intellij-html-description": "signature of signed content",
          "default": true
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "private_key",
        "private_key_password",
        "verify",
        "public_key",
        "repo",
        "annotations",
        "image_names"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^annotations@.*": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "additional key-value data pairs added when signing",
          "x-intellij-html-description": "additional key-value data pairs added when signing",
          "default": "{}"
        },
        "^annotations@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image_names@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array",
          "description": "ImageNames",
          "x-intellij-html-description": "ImageNames"
        },
        "^image_names@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^private_key@.*": {
          "type": "string",
          "description": "content of private key to sign content",
          "x-intellij-html-description": "content of private key to sign content"
        },
        "^private_key@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^private_key_password@.*": {
          "type": "string",
          "description": "password to the private key",
          "x-intellij-html-description": "password to the private key"
        },
        "^private_key_password@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^public_key@.*": {
          "type": "string",
          "description": "content of public key to verify signed content  if not set, derive from private key",
          "x-intellij-html-description": "content of public key to verify signed content  if not set, derive from private key"
        },
        "^public_key@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^repo@.*": {
          "type": "string",
          "description": "signature storage repo, defaults to the same repo as image name",
          "x-intellij-html-description": "signature storage repo, defaults to the same repo as image name"
        },
        "^repo@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^verify@.*": {
          "type": "boolean",
          "description": "signature of signed content",
          "x-intellij-html-description": "signature of signed content",
          "default": true
        },
        "^verify@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.TaskUpload": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.FileSpec"
          },
          "type": "array",
          "description": "to upload at one batch",
          "x-intellij-html-description": "to upload at one batch"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "image_names": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array",
          "description": "ImageNames",
          "x-intellij-html-description": "ImageNames"
        },
        "kind": {
          "type": "string",
          "description": "Kind is either blob or wasm",
          "x-intellij-html-description": "Kind is either blob or wasm",
          "default": "blob"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "signing": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.signingSpec",
          "description": "sign uploaded images",
          "x-intellij-html-description": "sign uploaded images"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "kind",
        "files",
        "signing",
        "image_names"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^files@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.FileSpec"
          },
          "type": "array",
          "description": "to upload at one batch",
          "x-intellij-html-description": "to upload at one batch"
        },
        "^files@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^image_names@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.ImageNameSpec"
          },
          "type": "array",
          "description": "ImageNames",
          "x-intellij-html-description": "ImageNames"
        },
        "^image_names@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^kind@.*": {
          "type": "string",
          "description": "Kind is either blob or wasm",
          "x-intellij-html-description": "Kind is either blob or wasm",
          "default": "blob"
        },
        "^kind@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^signing@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.cosign.signingSpec",
          "description": "sign uploaded images",
          "x-intellij-html-description": "sign uploaded images"
        },
        "^signing@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.ToolName"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.blobSigningFileSpec": {
      "properties": {
        "output": {
          "type": "string",
          "description": "destination path of signature output",
          "x-intellij-html-description": "destination path of signature output"
        },
        "path": {
          "type": "string",
          "description": "local file path to the blob",
          "x-intellij-html-description": "local file path to the blob"
        }
      },
      "preferredOrder": [
        "path",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^output@.*": {
          "type": "string",
          "description": "destination path of signature output",
          "x-intellij-html-description": "destination path of signature output"
        },
        "^output@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@.*": {
          "type": "string",
          "description": "local file path to the blob",
          "x-intellij-html-description": "local file path to the blob"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.cosign.signingSpec": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "additional key-value data pairs added when signing",
          "x-intellij-html-description": "additional key-value data pairs added when signing",
          "default": "{}"
        },
        "enabled": {
          "type": "boolean",
          "description": "Enable signing",
          "x-intellij-html-description": "Enable signing",
          "default": "false"
        },
        "private_key": {
          "type": "string",
          "description": "content of private key to sign content",
          "x-intellij-html-description": "content of private key to sign content"
        },
        "private_key_password": {
          "type": "string",
          "description": "password to the private key",
          "x-intellij-html-description": "password to the private key"
        },
        "public_key": {
          "type": "string",
          "description": "content of public key to verify signed content  if not set, derive from private key",
          "x-intellij-html-description": "content of public key to verify signed content  if not set, derive from private key"
        },
        "repo": {
          "type": "string",
          "description": "signature storage repo, defaults to the same repo as image name",
          "x-intellij-html-description": "signature storage repo, defaults to the same repo as image name"
        },
        "verify": {
          "type": "boolean",
          "description": "signature of signed content",
          "x-intellij-html-description": "signature of signed content",
          "default": true
        }
      },
      "preferredOrder": [
        "enabled",
        "private_key",
        "private_key_password",
        "verify",
        "public_key",
        "repo",
        "annotations"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^annotations@.*": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "additional key-value data pairs added when signing",
          "x-intellij-html-description": "additional key-value data pairs added when signing",
          "default": "{}"
        },
        "^annotations@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enabled@.*": {
          "type": "boolean",
          "description": "Enable signing",
          "x-intellij-html-description": "Enable signing",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^private_key@.*": {
          "type": "string",
          "description": "content of private key to sign content",
          "x-intellij-html-description": "content of private key to sign content"
        },
        "^private_key@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^private_key_password@.*": {
          "type": "string",
          "description": "password to the private key",
          "x-intellij-html-description": "password to the private key"
        },
        "^private_key_password@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^public_key@.*": {
          "type": "string",
          "description": "content of public key to verify signed content  if not set, derive from private key",
          "x-intellij-html-description": "content of public key to verify signed content  if not set, derive from private key"
        },
        "^public_key@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^repo@.*": {
          "type": "string",
          "description": "signature storage repo, defaults to the same repo as image name",
          "x-intellij-html-description": "signature storage repo, defaults to the same repo as image name"
        },
        "^repo@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^verify@.*": {
          "type": "boolean",
          "description": "signature of signed content",
          "x-intellij-html-description": "signature of signed content",
          "default": true
        },
        "^verify@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.docker.TaskBuild": {
      "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskBuild"
    },
    "arhat.dev.dukkha.pkg.tools.docker.TaskLogin": {
      "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskLogin"
    },
    "arhat.dev.dukkha.pkg.tools.docker.TaskPush": {
      "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.buildah.TaskPush"
    },
    "arhat.dev.dukkha.pkg.tools.docker.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.ToolName"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.git.TaskClone": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "local_branch": {
          "type": "string"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "remote_branch": {
          "type": "string"
        },
        "remote_name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "url",
        "path",
        "remote_branch",
        "local_branch",
        "remote_name",
        "extra_args"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^extra_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^local_branch@.*": {
          "type": "string"
        },
        "^local_branch@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@.*": {
          "type": "string"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^remote_branch@.*": {
          "type": "string"
        },
        "^remote_branch@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^remote_name@.*": {
          "type": "string"
        },
        "^remote_name@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^url@.*": {
          "type": "string"
        },
        "^url@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.git.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.ToolName"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.github.ReleaseFileSpec": {
      "properties": {
        "label": {
          "type": "string",
          "description": "the display label as noted in gh docs https://cli.github.com/manual/gh_release_create",
          "x-intellij-html-description": "the display label as noted in gh docs https://cli.github.com/manual/gh<em>release</em>create"
        },
        "path": {
          "type": "string",
          "description": "path to the file, can use glob",
          "x-intellij-html-description": "path to the file, can use glob"
        }
      },
      "preferredOrder": [
        "path",
        "label"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^label@.*": {
          "type": "string",
          "description": "the display label as noted in gh docs https://cli.github.com/manual/gh_release_create",
          "x-intellij-html-description": "the display label as noted in gh docs https://cli.github.com/manual/gh<em>release</em>create"
        },
        "^label@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@.*": {
          "type": "string",
          "description": "path to the file, can use glob",
          "x-intellij-html-description": "path to the file, can use glob"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.github.TaskRelease": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "draft": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.ReleaseFileSpec"
          },
          "type": "array"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "pre_release": {
          "type": "boolean",
          "default": "false"
        },
        "tag": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "tag",
        "draft",
        "pre_release",
        "title",
        "notes",
        "files"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^draft@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^draft@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^files@.*": {
          "items": {
            "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.github.ReleaseFileSpec"
          },
          "type": "array"
        },
        "^files@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^notes@.*": {
          "type": "string"
        },
        "^notes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^pre_release@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^pre_release@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^tag@.*": {
          "type": "string"
        },
        "^tag@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^title@.*": {
          "type": "string"
        },
        "^title@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.github.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.ToolName"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.CGOSepc": {
      "properties": {
        "cc": {
          "type": "string"
        },
        "cflags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_CFLAGS",
          "x-intellij-html-description": "CGO_CFLAGS"
        },
        "cppflags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_CPPFLAGS",
          "x-intellij-html-description": "CGO_CPPFLAGS"
        },
        "cxx": {
          "type": "string"
        },
        "cxxflags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_CXXFLAGS",
          "x-intellij-html-description": "CGO_CXXFLAGS"
        },
        "enabled": {
          "type": "boolean",
          "description": "Enable cgo",
          "x-intellij-html-description": "Enable cgo",
          "default": "false"
        },
        "fc": {
          "type": "string"
        },
        "fflags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_FFLAGS",
          "x-intellij-html-description": "CGO_FFLAGS"
        },
        "ldflags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_LDFLAGS",
          "x-intellij-html-description": "CGO_LDFLAGS"
        }
      },
      "preferredOrder": [
        "enabled",
        "cppflags",
        "cflags",
        "cxxflags",
        "fflags",
        "ldflags",
        "cc",
        "cxx",
        "fc"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cc@.*": {
          "type": "string"
        },
        "^cc@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cflags@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_CFLAGS",
          "x-intellij-html-description": "CGO_CFLAGS"
        },
        "^cflags@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cppflags@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_CPPFLAGS",
          "x-intellij-html-description": "CGO_CPPFLAGS"
        },
        "^cppflags@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cxx@.*": {
          "type": "string"
        },
        "^cxx@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cxxflags@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_CXXFLAGS",
          "x-intellij-html-description": "CGO_CXXFLAGS"
        },
        "^cxxflags@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enabled@.*": {
          "type": "boolean",
          "description": "Enable cgo",
          "x-intellij-html-description": "Enable cgo",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^fc@.*": {
          "type": "string"
        },
        "^fc@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^fflags@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_FFLAGS",
          "x-intellij-html-description": "CGO_FFLAGS"
        },
        "^fflags@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ldflags@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CGO_LDFLAGS",
          "x-intellij-html-description": "CGO_LDFLAGS"
        },
        "^ldflags@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.TaskBuild": {
      "properties": {
        "cgo": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.CGOSepc"
        },
        "chdir": {
          "type": "string"
        },
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "extra_args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "ldflags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "outputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "type": "string"
        },
        "race": {
          "type": "boolean",
          "default": "false"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "chdir",
        "path",
        "extra_args",
        "outputs",
        "race",
        "ldflags",
        "tags",
        "cgo"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cgo@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.CGOSepc"
        },
        "^cgo@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^chdir@.*": {
          "type": "string"
        },
        "^chdir@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^extra_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^extra_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ldflags@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^ldflags@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^outputs@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^outputs@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@.*": {
          "type": "string"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^race@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^race@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^tags@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^tags@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.TaskTest": {
      "properties": {
        "benchmark": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testBenchmarkSpec"
        },
        "cgo": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.CGOSepc"
        },
        "chdir": {
          "type": "string"
        },
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "count": {
          "type": "integer",
          "description": "go test -count",
          "x-intellij-html-description": "go test -count"
        },
        "cpu": {
          "items": {
            "type": "integer"
          },
          "type": "array",
          "description": "go test -cpu",
          "x-intellij-html-description": "go test -cpu"
        },
        "custom_args": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "custom args only used when running the test",
          "x-intellij-html-description": "custom args only used when running the test"
        },
        "custom_cmd_prefix": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "to run compiled test file with this cmd prefix",
          "x-intellij-html-description": "to run compiled test file with this cmd prefix"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "failfast": {
          "type": "boolean",
          "description": "go test -failfast",
          "x-intellij-html-description": "go test -failfast",
          "default": "false"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "json_output_file": {
          "type": "string",
          "description": "JSONOutputFile",
          "x-intellij-html-description": "JSONOutputFile"
        },
        "ldflags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "log_file": {
          "type": "string"
        },
        "match": {
          "type": "string",
          "description": "go test -run",
          "x-intellij-html-description": "go test -run"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "panic_on_exit_0": {
          "type": "boolean",
          "description": "Panic on calling os.Exit(0)",
          "x-intellij-html-description": "Panic on calling os.Exit(0)",
          "default": "false"
        },
        "parallel": {
          "type": "integer",
          "description": "go test -parallel",
          "x-intellij-html-description": "go test -parallel"
        },
        "path": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testProfileSpec"
        },
        "race": {
          "type": "boolean",
          "default": "false"
        },
        "short": {
          "type": "boolean",
          "description": "go test -short",
          "x-intellij-html-description": "go test -short",
          "default": "false"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "timeout": {
          "$ref": "#/definitions/time.Duration",
          "description": "go test -timeout",
          "x-intellij-html-description": "go test -timeout"
        },
        "verbose": {
          "type": "boolean",
          "description": "go test -v",
          "x-intellij-html-description": "go test -v",
          "default": "false"
        },
        "work_dir": {
          "type": "string",
          "description": "to run test, defaults to DUKKHA_WORKDIR",
          "x-intellij-html-description": "to run test, defaults to DUKKHA_WORKDIR"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "cgo",
        "path",
        "chdir",
        "race",
        "ldflags",
        "tags",
        "log_file",
        "count",
        "cpu",
        "parallel",
        "failfast",
        "short",
        "timeout",
        "match",
        "verbose",
        "json_output_file",
        "panic_on_exit_0",
        "work_dir",
        "benchmark",
        "profile",
        "custom_cmd_prefix",
        "custom_args"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^benchmark@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testBenchmarkSpec"
        },
        "^benchmark@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cgo@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.CGOSepc"
        },
        "^cgo@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^chdir@.*": {
          "type": "string"
        },
        "^chdir@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^count@.*": {
          "type": "integer",
          "description": "go test -count",
          "x-intellij-html-description": "go test -count"
        },
        "^count@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cpu@.*": {
          "items": {
            "type": "integer"
          },
          "type": "array",
          "description": "go test -cpu",
          "x-intellij-html-description": "go test -cpu"
        },
        "^cpu@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^custom_args@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "custom args only used when running the test",
          "x-intellij-html-description": "custom args only used when running the test"
        },
        "^custom_args@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^custom_cmd_prefix@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "to run compiled test file with this cmd prefix",
          "x-intellij-html-description": "to run compiled test file with this cmd prefix"
        },
        "^custom_cmd_prefix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^failfast@.*": {
          "type": "boolean",
          "description": "go test -failfast",
          "x-intellij-html-description": "go test -failfast",
          "default": "false"
        },
        "^failfast@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^json_output_file@.*": {
          "type": "string",
          "description": "JSONOutputFile",
          "x-intellij-html-description": "JSONOutputFile"
        },
        "^json_output_file@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ldflags@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^ldflags@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^log_file@.*": {
          "type": "string"
        },
        "^log_file@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^match@.*": {
          "type": "string",
          "description": "go test -run",
          "x-intellij-html-description": "go test -run"
        },
        "^match@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^panic_on_exit_0@.*": {
          "type": "boolean",
          "description": "Panic on calling os.Exit(0)",
          "x-intellij-html-description": "Panic on calling os.Exit(0)",
          "default": "false"
        },
        "^panic_on_exit_0@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^parallel@.*": {
          "type": "integer",
          "description": "go test -parallel",
          "x-intellij-html-description": "go test -parallel"
        },
        "^parallel@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^path@.*": {
          "type": "string"
        },
        "^path@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^profile@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testProfileSpec"
        },
        "^profile@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^race@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^race@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^short@.*": {
          "type": "boolean",
          "description": "go test -short",
          "x-intellij-html-description": "go test -short",
          "default": "false"
        },
        "^short@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^tags@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^tags@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^timeout@.*": {
          "$ref": "#/definitions/time.Duration",
          "description": "go test -timeout",
          "x-intellij-html-description": "go test -timeout"
        },
        "^timeout@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^verbose@.*": {
          "type": "boolean",
          "description": "go test -v",
          "x-intellij-html-description": "go test -v",
          "default": "false"
        },
        "^verbose@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^work_dir@.*": {
          "type": "string",
          "description": "to run test, defaults to DUKKHA_WORKDIR",
          "x-intellij-html-description": "to run test, defaults to DUKKHA_WORKDIR"
        },
        "^work_dir@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.ToolName"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.benchmarkMemorySpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enbaled by default if benchmark is enabled",
          "x-intellij-html-description": "Enbaled by default if benchmark is enabled"
        }
      },
      "preferredOrder": [
        "enabled"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@.*": {
          "type": "boolean",
          "description": "Enbaled by default if benchmark is enabled",
          "x-intellij-html-description": "Enbaled by default if benchmark is enabled"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testBenchmarkSpec": {
      "properties": {
        "count": {
          "type": "integer",
          "description": "of benchmark run",
          "x-intellij-html-description": "of benchmark run"
        },
        "duration": {
          "$ref": "#/definitions/time.Duration",
          "description": "of each benchmark run",
          "x-intellij-html-description": "of each benchmark run"
        },
        "enabled": {
          "type": "boolean",
          "description": "Run benchmarks during test execution",
          "x-intellij-html-description": "Run benchmarks during test execution",
          "default": "false"
        },
        "match": {
          "type": "string",
          "description": "Run only regexp matched benchmarks  go test -bench  defaults to `.` (all)",
          "x-intellij-html-description": "Run only regexp matched benchmarks  go test -bench  defaults to <code>.</code> (all)"
        },
        "memory": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.benchmarkMemorySpec",
          "description": "benchmark settings",
          "x-intellij-html-description": "benchmark settings"
        }
      },
      "preferredOrder": [
        "enabled",
        "duration",
        "count",
        "match",
        "memory"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^count@.*": {
          "type": "integer",
          "description": "of benchmark run",
          "x-intellij-html-description": "of benchmark run"
        },
        "^count@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^duration@.*": {
          "$ref": "#/definitions/time.Duration",
          "description": "of each benchmark run",
          "x-intellij-html-description": "of each benchmark run"
        },
        "^duration@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enabled@.*": {
          "type": "boolean",
          "description": "Run benchmarks during test execution",
          "x-intellij-html-description": "Run benchmarks during test execution",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^match@.*": {
          "type": "string",
          "description": "Run only regexp matched benchmarks  go test -bench  defaults to `.` (all)",
          "x-intellij-html-description": "Run only regexp matched benchmarks  go test -bench  defaults to <code>.</code> (all)"
        },
        "^match@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^memory@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.benchmarkMemorySpec",
          "description": "benchmark settings",
          "x-intellij-html-description": "benchmark settings"
        },
        "^memory@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testBlockProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Profile goroutine blocking during test execution",
          "x-intellij-html-description": "Profile goroutine blocking during test execution",
          "default": "false"
        },
        "output": {
          "type": "string",
          "description": "filename of block profile  go test -blockprofile  defaults to `block.out` if not set and `enabled` is true",
          "x-intellij-html-description": "filename of block profile  go test -blockprofile  defaults to <code>block.out</code> if not set and <code>enabled</code> is true"
        },
        "rate": {
          "type": "integer",
          "description": "of block profile  go test -blockprofilerate  no default",
          "x-intellij-html-description": "of block profile  go test -blockprofilerate  no default"
        }
      },
      "preferredOrder": [
        "enabled",
        "rate",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@.*": {
          "type": "boolean",
          "description": "Profile goroutine blocking during test execution",
          "x-intellij-html-description": "Profile goroutine blocking during test execution",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@.*": {
          "type": "string",
          "description": "filename of block profile  go test -blockprofile  defaults to `block.out` if not set and `enabled` is true",
          "x-intellij-html-description": "filename of block profile  go test -blockprofile  defaults to <code>block.out</code> if not set and <code>enabled</code> is true"
        },
        "^output@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^rate@.*": {
          "type": "integer",
          "description": "of block profile  go test -blockprofilerate  no default",
          "x-intellij-html-description": "of block profile  go test -blockprofilerate  no default"
        },
        "^rate@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testCPUProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Profile cpu during test execution",
          "x-intellij-html-description": "Profile cpu during test execution",
          "default": "false"
        },
        "output": {
          "type": "string",
          "description": "filename of cpu profile  go test -cpuprofile  defaults to `cpu.out` if not set and `enabled` is true",
          "x-intellij-html-description": "filename of cpu profile  go test -cpuprofile  defaults to <code>cpu.out</code> if not set and <code>enabled</code> is true"
        }
      },
      "preferredOrder": [
        "enabled",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@.*": {
          "type": "boolean",
          "description": "Profile cpu during test execution",
          "x-intellij-html-description": "Profile cpu during test execution",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@.*": {
          "type": "string",
          "description": "filename of cpu profile  go test -cpuprofile  defaults to `cpu.out` if not set and `enabled` is true",
          "x-intellij-html-description": "filename of cpu profile  go test -cpuprofile  defaults to <code>cpu.out</code> if not set and <code>enabled</code> is true"
        },
        "^output@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testCoverageProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": "false"
        },
        "mode": {
          "type": "string",
          "description": "of coverage  go test -covermode  defaults to `atomic` if not set and `enabled` is true",
          "x-intellij-html-description": "of coverage  go test -covermode  defaults to <code>atomic</code> if not set and <code>enabled</code> is true"
        },
        "output": {
          "type": "string",
          "description": "file of the coverage  go test -coverprofile  defaults to cover.out if not set and `enabled` is true",
          "x-intellij-html-description": "file of the coverage  go test -coverprofile  defaults to cover.out if not set and <code>enabled</code> is true"
        },
        "packages": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "to coverage  go test -coverpkg  no default (use golang default behavior)",
          "x-intellij-html-description": "to coverage  go test -coverpkg  no default (use golang default behavior)"
        }
      },
      "preferredOrder": [
        "enabled",
        "output",
        "mode",
        "packages"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^mode@.*": {
          "type": "string",
          "description": "of coverage  go test -covermode  defaults to `atomic` if not set and `enabled` is true",
          "x-intellij-html-description": "of coverage  go test -covermode  defaults to <code>atomic</code> if not set and <code>enabled</code> is true"
        },
        "^mode@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@.*": {
          "type": "string",
          "description": "file of the coverage  go test -coverprofile  defaults to cover.out if not set and `enabled` is true",
          "x-intellij-html-description": "file of the coverage  go test -coverprofile  defaults to cover.out if not set and <code>enabled</code> is true"
        },
        "^output@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^packages@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "to coverage  go test -coverpkg  no default (use golang default behavior)",
          "x-intellij-html-description": "to coverage  go test -coverpkg  no default (use golang default behavior)"
        },
        "^packages@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testMemoryProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Profile memory during test execution",
          "x-intellij-html-description": "Profile memory during test execution",
          "default": "false"
        },
        "output": {
          "type": "string",
          "description": "filename of memory profile  go test -memprofile  defaults to mem.out if not set and `enabled` is true",
          "x-intellij-html-description": "filename of memory profile  go test -memprofile  defaults to mem.out if not set and <code>enabled</code> is true"
        },
        "rate": {
          "type": "integer",
          "description": "of memory profile  go test -memprofilerate",
          "x-intellij-html-description": "of memory profile  go test -memprofilerate"
        }
      },
      "preferredOrder": [
        "enabled",
        "rate",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@.*": {
          "type": "boolean",
          "description": "Profile memory during test execution",
          "x-intellij-html-description": "Profile memory during test execution",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@.*": {
          "type": "string",
          "description": "filename of memory profile  go test -memprofile  defaults to mem.out if not set and `enabled` is true",
          "x-intellij-html-description": "filename of memory profile  go test -memprofile  defaults to mem.out if not set and <code>enabled</code> is true"
        },
        "^output@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^rate@.*": {
          "type": "integer",
          "description": "of memory profile  go test -memprofilerate",
          "x-intellij-html-description": "of memory profile  go test -memprofilerate"
        },
        "^rate@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testMutexProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Profile mutex during test execution",
          "x-intellij-html-description": "Profile mutex during test execution",
          "default": "false"
        },
        "fraction": {
          "type": "integer",
          "description": "number  go test -mutexprofilefraction",
          "x-intellij-html-description": "number  go test -mutexprofilefraction"
        },
        "output": {
          "type": "string",
          "description": "filename of mutex profile  go test -mutexprofile  defaults to `mutex.out` if not set and `enabled` is true",
          "x-intellij-html-description": "filename of mutex profile  go test -mutexprofile  defaults to <code>mutex.out</code> if not set and <code>enabled</code> is true"
        }
      },
      "preferredOrder": [
        "enabled",
        "fraction",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@.*": {
          "type": "boolean",
          "description": "Profile mutex during test execution",
          "x-intellij-html-description": "Profile mutex during test execution",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^fraction@.*": {
          "type": "integer",
          "description": "number  go test -mutexprofilefraction",
          "x-intellij-html-description": "number  go test -mutexprofilefraction"
        },
        "^fraction@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@.*": {
          "type": "string",
          "description": "filename of mutex profile  go test -mutexprofile  defaults to `mutex.out` if not set and `enabled` is true",
          "x-intellij-html-description": "filename of mutex profile  go test -mutexprofile  defaults to <code>mutex.out</code> if not set and <code>enabled</code> is true"
        },
        "^output@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testProfileSpec": {
      "properties": {
        "block": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testBlockProfileSpec",
          "description": "Goroutine Block profile",
          "x-intellij-html-description": "Goroutine Block profile"
        },
        "coverage": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testCoverageProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "cpu": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testCPUProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "memory": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testMemoryProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "mutex": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testMutexProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "output_dir": {
          "type": "string",
          "description": "Directory to save all profile output files",
          "x-intellij-html-description": "Directory to save all profile output files"
        },
        "trace": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testTraceProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        }
      },
      "preferredOrder": [
        "output_dir",
        "coverage",
        "block",
        "cpu",
        "memory",
        "mutex",
        "trace"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^block@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testBlockProfileSpec",
          "description": "Goroutine Block profile",
          "x-intellij-html-description": "Goroutine Block profile"
        },
        "^block@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^coverage@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testCoverageProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "^coverage@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cpu@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testCPUProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "^cpu@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^memory@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testMemoryProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "^memory@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^mutex@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testMutexProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "^mutex@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output_dir@.*": {
          "type": "string",
          "description": "Directory to save all profile output files",
          "x-intellij-html-description": "Directory to save all profile output files"
        },
        "^output_dir@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^trace@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.golang.testTraceProfileSpec",
          "description": "profile",
          "x-intellij-html-description": "profile"
        },
        "^trace@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.golang.testTraceProfileSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Write test execution trace",
          "x-intellij-html-description": "Write test execution trace",
          "default": "false"
        },
        "output": {
          "type": "string",
          "description": "filename of trace profile  go test -trace  defaults to trace.out if not set and `enabled` is true",
          "x-intellij-html-description": "filename of trace profile  go test -trace  defaults to trace.out if not set and <code>enabled</code> is true"
        }
      },
      "preferredOrder": [
        "enabled",
        "output"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@.*": {
          "type": "boolean",
          "description": "Write test execution trace",
          "x-intellij-html-description": "Write test execution trace",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^output@.*": {
          "type": "string",
          "description": "filename of trace profile  go test -trace  defaults to trace.out if not set and `enabled` is true",
          "x-intellij-html-description": "filename of trace profile  go test -trace  defaults to trace.out if not set and <code>enabled</code> is true"
        },
        "^output@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.helm.PackageSigningSpec": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": "false"
        },
        "gpg_key_name": {
          "type": "string"
        },
        "gpg_key_passphrase": {
          "type": "string"
        },
        "gpg_keyring": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "enabled",
        "gpg_keyring",
        "gpg_key_name",
        "gpg_key_passphrase"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^enabled@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^gpg_key_name@.*": {
          "type": "string"
        },
        "^gpg_key_name@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^gpg_key_passphrase@.*": {
          "type": "string"
        },
        "^gpg_key_passphrase@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^gpg_keyring@.*": {
          "type": "string"
        },
        "^gpg_keyring@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.helm.TaskIndex": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "merge": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packages_dir": {
          "type": "string"
        },
        "repo_url": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "repo_url",
        "packages_dir",
        "merge"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^merge@.*": {
          "type": "string"
        },
        "^merge@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^packages_dir@.*": {
          "type": "string"
        },
        "^packages_dir@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^repo_url@.*": {
          "type": "string"
        },
        "^repo_url@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.helm.TaskPackage": {
      "properties": {
        "chart": {
          "type": "string"
        },
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        },
        "packages_dir": {
          "type": "string"
        },
        "signing": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.PackageSigningSpec"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "chart",
        "packages_dir",
        "signing"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^chart@.*": {
          "type": "string"
        },
        "^chart@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^packages_dir@.*": {
          "type": "string"
        },
        "^packages_dir@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^signing@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.helm.PackageSigningSpec"
        },
        "^signing@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.helm.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.ToolName"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.workflow.TaskRun": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "jobs": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error",
        "jobs"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^jobs@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.Actions"
        },
        "^jobs@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.workflow.TaskTest": {
      "properties": {
        "continue_on_error": {
          "type": "boolean",
          "default": "false"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "hooks": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "matrix": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "name": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "matrix",
        "hooks",
        "continue_on_error"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^continue_on_error@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^continue_on_error@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^hooks@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.tools.TaskHooks"
        },
        "^hooks@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^matrix@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.matrix.Spec"
        },
        "^matrix@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.tools.workflow.Tool": {
      "properties": {
        "cmd": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "name": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.ToolName"
        }
      },
      "preferredOrder": [
        "name",
        "env",
        "cmd"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^cmd@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cmd@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^env@.*": {
          "$ref": "#/definitions/arhat.dev.dukkha.pkg.dukkha.Env"
        },
        "^env@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.dukkha.pkg.utils.Size": {
      "type": "string",
      "description": "human-readable data size in KB, MB, GB, TB, TB",
      "x-intellij-html-description": "human-readable data size in KB, MB, GB, TB, TB"
    },
    "arhat.dev.pkg.tlshelper.TLSConfig": {
      "properties": {
        "allow_insecure_hashes": {
          "type": "boolean",
          "description": "options for dtls",
          "x-intellij-html-description": "options for dtls",
          "default": "false"
        },
        "ca_cert": {
          "type": "string"
        },
        "cert": {
          "type": "string"
        },
        "cipher_suites": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "enabled": {
          "type": "boolean",
          "default": "false"
        },
        "insecure_skip_verify": {
          "type": "boolean",
          "default": "false"
        },
        "key": {
          "type": "string"
        },
        "key_log_file": {
          "type": "string",
          "description": "write tls session shared key to this file",
          "x-intellij-html-description": "write tls session shared key to this file"
        },
        "pre_shared_key": {
          "$ref": "#/definitions/arhat.dev.pkg.tlshelper.TLSPreSharedKeyConfig"
        },
        "server_name": {
          "type": "string"
        }
      },
      "preferredOrder": [
        "enabled",
        "ca_cert",
        "cert",
        "key",
        "server_name",
        "insecure_skip_verify",
        "key_log_file",
        "cipher_suites",
        "allow_insecure_hashes",
        "pre_shared_key"
      ],
      "additionalProperties": false,
      "description": "for common tls settings, support both client and server tls nolint:maligned",
      "x-intellij-html-description": "for common tls settings, support both client and server tls nolint:maligned",
      "patternProperties": {
        "^allow_insecure_hashes@.*": {
          "type": "boolean",
          "description": "options for dtls",
          "x-intellij-html-description": "options for dtls",
          "default": "false"
        },
        "^allow_insecure_hashes@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^ca_cert@.*": {
          "type": "string"
        },
        "^ca_cert@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cert@.*": {
          "type": "string"
        },
        "^cert@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^cipher_suites@.*": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "^cipher_suites@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^enabled@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^enabled@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^insecure_skip_verify@.*": {
          "type": "boolean",
          "default": "false"
        },
        "^insecure_skip_verify@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^key@.*": {
          "type": "string"
        },
        "^key@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^key_log_file@.*": {
          "type": "string",
          "description": "write tls session shared key to this file",
          "x-intellij-html-description": "write tls session shared key to this file"
        },
        "^key_log_file@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^pre_shared_key@.*": {
          "$ref": "#/definitions/arhat.dev.pkg.tlshelper.TLSPreSharedKeyConfig"
        },
        "^pre_shared_key@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^server_name@.*": {
          "type": "string"
        },
        "^server_name@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.pkg.tlshelper.TLSPreSharedKeyConfig": {
      "properties": {
        "identity_hint": {
          "type": "string",
          "description": "the client hint provided to server, base64 encoded value",
          "x-intellij-html-description": "the client hint provided to server, base64 encoded value"
        },
        "server_hint_mapping": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "map server hint(s) to pre shared key(s) colon separated base64 encoded key value pairs",
          "x-intellij-html-description": "map server hint(s) to pre shared key(s) colon separated base64 encoded key value pairs"
        }
      },
      "preferredOrder": [
        "server_hint_mapping",
        "identity_hint"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^identity_hint@.*": {
          "type": "string",
          "description": "the client hint provided to server, base64 encoded value",
          "x-intellij-html-description": "the client hint provided to server, base64 encoded value"
        },
        "^identity_hint@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        },
        "^server_hint_mapping@.*": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "map server hint(s) to pre shared key(s) colon separated base64 encoded key value pairs",
          "x-intellij-html-description": "map server hint(s) to pre shared key(s) colon separated base64 encoded key value pairs"
        },
        "^server_hint_mapping@[^\\|]*!": {
          "$ref": "#/definitions/PatchSpec"
        }
      }
    },
    "arhat.dev.rs.AnyObjectMap": {
      "description": "a `map[string]interface{}` equivalent with rendering suffix support",
      "x-intellij-html-description": "a <code>map[string]interface{}</code> equivalent with rendering suffix support"
    },
    "time.Duration": {
      "type": "integer",
      "description": "A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.",
      "x-intellij-html-description": "A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years."
    }
  }
}
