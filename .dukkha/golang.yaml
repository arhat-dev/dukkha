tools:
  golang:
  - name: default-golang
    env:
    - GO111MODULE=on
    - GO_PROXY=direct
    - GO_SUMDB=off
    args: []

golang:test: []

golang:build:
- name: dukkha
  path: ./cmd/dukkha
  env:
  - CGO_ENABLED=0
  matrix:
    include:
    - os:
      - darwin
      arch:
      - arm64
      - amd64
    - os:
      - solaris
      - dragonfly
      arch: [amd64]
    - os:
      - aix
      - linux
      arch: [ppc64]
    - os:
      - windows
      arch:
      - x86
      - amd64
      # - arm64
      - armv7
      - armv6
      - armv5
    - os:
      - linux
      arch:
      - mips
      - mipshf
      - mipsle
      - mipslehf
      - mips64
      - mips64hf
      - mips64le
      - mips64lehf
      - ppc64le
      - s390x
      - riscv64
    os:
    - linux
    - freebsd
    - netbsd
    - openbsd
    - plan9
    arch:
    - x86
    - arm64
    - amd64
    - armv7
    - armv6
    - armv5
  tags:
  - nokube
  - nocloud
  - netgo
  ldflags:
  - -X arhat.dev/dukkha/pkg/version.branch="${GIT_BRANCH}"
  - -X arhat.dev/dukkha/pkg/version.commit="${GIT_COMMIT}"
  - -X arhat.dev/dukkha/pkg/version.tag="${GIT_TAG}"
  - -X arhat.dev/dukkha/pkg/version.arch="${MATRIX_ARCH}"
  - -X arhat.dev/dukkha/pkg/version.workspaceClean="${GIT_WORKSPACE_CLEAN}"
  - -X arhat.dev/dukkha/pkg/version.goCompilerPlatform="$(go version | cut -d\  -f4)"
  outputs@shell: |-
    suffix=""
    if [ "${MATRIX_OS}" = "windows" ]; then
      suffix="${suffix}.exe"
    fi

    if [ "${MATRIX_OS}" = "${HOST_OS}" ] && [ "${MATRIX_ARCH}" = "${HOST_ARCH}" ]; then
      echo "- build/dukkha.native${suffix}"
    fi

    echo "- build/dukkha.${MATRIX_OS}.${MATRIX_ARCH}${suffix}"
  extraArgs:
  - -buildmode=default
  - -mod=vendor
  - -trimpath
