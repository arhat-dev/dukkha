tools:
  workflow:
  - name: local
    env:
    - name: TOOL_SPECIFIC_ENV
      value: tool_specific_env

renderers:
  input: {}
  http:custom: {}

workflow:run:
- name: test-prompt
  jobs:
  - shell@input: "Enter your script: "

- name: test
  env:
  - name: FROM_TOOL
    value@env: ${TOOL_SPECIFIC_ENV}
  - name: FOO
    value: task_specific_env_FOO
  - name: BAR
    value@env: ${FOO}
  hooks:
    before:
    - shell@template: echo "check embedded shell ${FOO}"

    - name: Test `Each` implementation of embedded shell env
      shell: printenv FROM_TOOL

    - shell: |-
        if [[ "${FOO}" != "${BAR}" ]]; then
          echo "FOO=${FOO} and BAR=${BAR} should have same value"
          exit 1
        fi

        echo "${FOO}=${BAR}"

    before:matrix:
    - shell:bash: echo "check bash shell ${FOO}"

    after:matrix:success:
    - name: Run go test
      task: golang:test(dukkha, {})

    - shell: echo matrix run success

    after:matrix:failure:
    - shell: echo matrix run failed

    after:matrix:
    - name: Test task reference with matrix spec
      env:
      - name: PUSH_DUKKHA_BLOB_IN_CMD_TEST
        value: "false"
      task: |-
        golang:build(dukkha, {
          kernel: [
            darwin,
          ],
          arch: [
            amd64, arm64,
          ],
        })

    after:failure:
    - shell: printf 'Failed\n'

    # build all executables and images after success
    after:success@shell: |-
      if [[ "${PUSH_DUKKHA_BLOB_IN_CMD_TEST}" == "true" ]]; then
        echo "- task: golang:build(dukkha, {})"
        echo "- task: cosign:upload(dukkha, {})"
      fi

      buildah_prefix="buildah:local"
      if ! command -v buildah >/dev/null 2>&1; then
        buildah_prefix="buildah:in-docker"
      fi

      if [[ ${PUSH_DUKKHA_IMAGE_IN_CMD_TEST} == "true" ]]; then
        echo "- task: ${buildah_prefix}:xbuild(dukkha, {})"
        echo "- task: ${buildah_prefix}:push(dukkha, {})"
      fi

      echo "- shell: printf 'Succeeded\n'"

  jobs:
  - name: test merged golang build using rendering suffix in matrix include
    task: |-
      golang:build(dukkha-local, {kernel: [windows], arch: [amd64]})

  - name: test dukkha working with rendering suffix
    shell:python@template: print({{- "\"test\"" -}})

  - name: test template func call in embedded shell
    shell: template:printf \"Hello Template %s\\n\" \"test\"

  - name: test piped template func call in embedded shell
    shell: printf "from shell printf" | template:printf \"Hello piped template %s\\n\"

  - name: test script execution
    shell: ./scripts/dukkha/testdata/script.sh

  - name: test task specific env
    shell@env: echo "${FROM_TOOL}+${FOO}"

  - name: test echo renderer
    shell@echo: echo "echo renderer"

  - name: test raw cmd
    # yamllint disable-line rule:quoted-strings
    cmd: [echo, "raw echo ${FOO} not expanded"]

  - name: test raw cmd with rendering suffix
    # yamllint disable-line rule:quoted-strings
    cmd@env: [echo, "raw echo ${FOO} expended"]

  - name: test embedded shell env expansion
    shell: echo ${FOO} in embedded shell

  - name: test script from remote endpoint
    shell@transform?str:
      value@http:custom?str: https://gist.githubusercontent.com/arhatbot/d1f27e2b6d7e41a7c9d0a6ef7e39a921/raw/1e014333a3d78ac1139bc4cab9a68685e5080685/echo.sh
      ops:
      - checksum:
          data@template: |
            {{- VALUE -}}
          kind: sha256
          sum@http: https://gist.githubusercontent.com/arhatbot/d1f27e2b6d7e41a7c9d0a6ef7e39a921/raw/f36f55f83d2bb0d3d45e79e48360bb5c35826048/echo.sh.sha256

  - name: test golang build
    env:
    - name: PUSH_DUKKHA_BLOB_IN_CMD_TEST
      value: "false"
    task: |-
      golang:build(dukkha, {
        kernel: [
          linux, windows,
        ],
        arch: [
          amd64, arm64,
        ],
      })
