tools:
  workflow:
  - name: local
    env:
    - TOOL_SPECIFIC_ENV=tool_specific_env

workflow:run:
- name: test
  env@env:
  - FROM_TOOL=${TOOL_SPECIFIC_ENV}
  - FOO=task_specific_env_FOO
  hooks:
    before:
    - shell@template: echo "check embedded shell ${FOO}"
    - shell: printenv FROM_TOOL
    before:matrix:
    - shell:bash: echo "check bash shell ${FOO}"
    after:matrix:success:
    - task: golang:test(dukkha, {})
    - shell: echo matrix run success

    after:matrix:failure:
    - shell: echo matrix run failed

    after:matrix:
    - task: |-
        golang:build(dukkha, {
          kernel: [
            darwin,
          ],
          arch: [
            amd64, arm64,
          ],
        })

    after:failure:
    - shell: printf 'Failed\n'

    after:success@shell: |-
      prefix="buildah:local"
      if ! command -v buildah >/dev/null 2>&1; then
        prefix="buildah:in-docker"
      fi

      echo "- task: ${prefix}:build(dukkha, {})"

      if [[ ${PUSH_DUKKHA_IMAGE_IN_CMD_TEST} == "true" ]]; then
        echo "- task: ${prefix}:push(dukkha, {})"
      fi

      echo "- shell: printf 'Succeeded\n'"

  jobs@template:
  - name: test dukkha working with nested rendering suffix
    shell:python: print({{- "\"test\"" -}})

  - name: test template func call in embedded shell
    shell: template:printf \"Hello Template %s\\n\" \"test\"

  - name: test piped template func call in embedded shell
    shell: printf "from shell printf" | template:printf \"Hello piped template %s\\n\"

  - name: test script execution
    shell: ./scripts/dukkha/testdata/script.sh

  - name: test task specific env
    shell@env: echo "${FROM_TOOL}+${FOO}"

  - name: test raw cmd
    # yamllint disable-line rule:quoted-strings
    cmd: [echo, "raw echo ${FOO} not expanded"]

  - name: test raw cmd with rendering suffix
    # yamllint disable-line rule:quoted-strings
    cmd@env: [echo, "raw echo ${FOO} expended"]

  - name: test embedded shell env expansion
    shell: echo ${FOO} in embedded shell

  - name: test script from remote endpoint
    shell@http: https://gist.githubusercontent.com/arhatbot/d1f27e2b6d7e41a7c9d0a6ef7e39a921/raw/1e014333a3d78ac1139bc4cab9a68685e5080685/echo.sh

  - name: build
    task: |-
      golang:build(dukkha, {
        kernel: [
          linux, windows,
        ],
        arch: [
          amd64, arm64,
        ],
      })
