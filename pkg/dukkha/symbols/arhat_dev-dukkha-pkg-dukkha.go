// Code generated by 'yaegi extract arhat.dev/dukkha/pkg/dukkha'. DO NOT EDIT.

package dukkha_symbols

import (
	"arhat.dev/dukkha/pkg/dukkha"
	"arhat.dev/dukkha/pkg/matrix"
	"arhat.dev/rs"
	"github.com/muesli/termenv"
	"gopkg.in/yaml.v3"
	"mvdan.cc/sh/v3/expand"
	"reflect"
	"time"
)

func init() {
	Symbols["arhat.dev/dukkha/pkg/dukkha/dukkha"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CreateTaskExecOptions":      reflect.ValueOf(dukkha.CreateTaskExecOptions),
		"GlobalInterfaceTypeHandler": reflect.ValueOf(&dukkha.GlobalInterfaceTypeHandler).Elem(),
		"NewConfigResolvingContext":  reflect.ValueOf(dukkha.NewConfigResolvingContext),
		"ParseTaskReference":         reflect.ValueOf(dukkha.ParseTaskReference),
		"RegisterRenderer":           reflect.ValueOf(dukkha.RegisterRenderer),
		"RegisterTask":               reflect.ValueOf(dukkha.RegisterTask),
		"RegisterTool":               reflect.ValueOf(dukkha.RegisterTool),
		"ResolveEnv":                 reflect.ValueOf(dukkha.ResolveEnv),
		"StageAfter":                 reflect.ValueOf(dukkha.StageAfter),
		"StageAfterFailure":          reflect.ValueOf(dukkha.StageAfterFailure),
		"StageAfterMatrix":           reflect.ValueOf(dukkha.StageAfterMatrix),
		"StageAfterMatrixFailure":    reflect.ValueOf(dukkha.StageAfterMatrixFailure),
		"StageAfterMatrixSuccess":    reflect.ValueOf(dukkha.StageAfterMatrixSuccess),
		"StageAfterSuccess":          reflect.ValueOf(dukkha.StageAfterSuccess),
		"StageBefore":                reflect.ValueOf(dukkha.StageBefore),
		"StageBeforeMatrix":          reflect.ValueOf(dukkha.StageBeforeMatrix),

		// type definitions
		"ArbitraryValues":        reflect.ValueOf((*dukkha.ArbitraryValues)(nil)),
		"ConfigResolvingContext": reflect.ValueOf((*dukkha.ConfigResolvingContext)(nil)),
		"Context":                reflect.ValueOf((*dukkha.Context)(nil)),
		"Env":                    reflect.ValueOf((*dukkha.Env)(nil)),
		"EnvEntry":               reflect.ValueOf((*dukkha.EnvEntry)(nil)),
		"EnvValues":              reflect.ValueOf((*dukkha.EnvValues)(nil)),
		"ExecSpecGetFunc":        reflect.ValueOf((*dukkha.ExecSpecGetFunc)(nil)),
		"ExecValues":             reflect.ValueOf((*dukkha.ExecValues)(nil)),
		"GlobalValues":           reflect.ValueOf((*dukkha.GlobalValues)(nil)),
		"Renderer":               reflect.ValueOf((*dukkha.Renderer)(nil)),
		"RendererCreateFunc":     reflect.ValueOf((*dukkha.RendererCreateFunc)(nil)),
		"RendererManager":        reflect.ValueOf((*dukkha.RendererManager)(nil)),
		"RenderingContext":       reflect.ValueOf((*dukkha.RenderingContext)(nil)),
		"ReplaceEntries":         reflect.ValueOf((*dukkha.ReplaceEntries)(nil)),
		"ReplaceEntry":           reflect.ValueOf((*dukkha.ReplaceEntry)(nil)),
		"RunTaskOrRunCmd":        reflect.ValueOf((*dukkha.RunTaskOrRunCmd)(nil)),
		"Shell":                  reflect.ValueOf((*dukkha.Shell)(nil)),
		"ShellManager":           reflect.ValueOf((*dukkha.ShellManager)(nil)),
		"ShellUser":              reflect.ValueOf((*dukkha.ShellUser)(nil)),
		"Task":                   reflect.ValueOf((*dukkha.Task)(nil)),
		"TaskCreateFunc":         reflect.ValueOf((*dukkha.TaskCreateFunc)(nil)),
		"TaskExecContext":        reflect.ValueOf((*dukkha.TaskExecContext)(nil)),
		"TaskExecOptions":        reflect.ValueOf((*dukkha.TaskExecOptions)(nil)),
		"TaskExecSpec":           reflect.ValueOf((*dukkha.TaskExecSpec)(nil)),
		"TaskExecStage":          reflect.ValueOf((*dukkha.TaskExecStage)(nil)),
		"TaskKey":                reflect.ValueOf((*dukkha.TaskKey)(nil)),
		"TaskKind":               reflect.ValueOf((*dukkha.TaskKind)(nil)),
		"TaskManager":            reflect.ValueOf((*dukkha.TaskManager)(nil)),
		"TaskMatrixExecOptions":  reflect.ValueOf((*dukkha.TaskMatrixExecOptions)(nil)),
		"TaskName":               reflect.ValueOf((*dukkha.TaskName)(nil)),
		"TaskReference":          reflect.ValueOf((*dukkha.TaskReference)(nil)),
		"TaskUser":               reflect.ValueOf((*dukkha.TaskUser)(nil)),
		"Tool":                   reflect.ValueOf((*dukkha.Tool)(nil)),
		"ToolCreateFunc":         reflect.ValueOf((*dukkha.ToolCreateFunc)(nil)),
		"ToolKey":                reflect.ValueOf((*dukkha.ToolKey)(nil)),
		"ToolKind":               reflect.ValueOf((*dukkha.ToolKind)(nil)),
		"ToolManager":            reflect.ValueOf((*dukkha.ToolManager)(nil)),
		"ToolName":               reflect.ValueOf((*dukkha.ToolName)(nil)),
		"ToolUser":               reflect.ValueOf((*dukkha.ToolUser)(nil)),

		// interface wrapper definitions
		"_ConfigResolvingContext": reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext)(nil)),
		"_Context":                reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_Context)(nil)),
		"_EnvValues":              reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_EnvValues)(nil)),
		"_ExecValues":             reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_ExecValues)(nil)),
		"_GlobalValues":           reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_GlobalValues)(nil)),
		"_Renderer":               reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_Renderer)(nil)),
		"_RendererManager":        reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_RendererManager)(nil)),
		"_RenderingContext":       reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_RenderingContext)(nil)),
		"_RunTaskOrRunCmd":        reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_RunTaskOrRunCmd)(nil)),
		"_Shell":                  reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_Shell)(nil)),
		"_ShellManager":           reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_ShellManager)(nil)),
		"_ShellUser":              reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_ShellUser)(nil)),
		"_Task":                   reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_Task)(nil)),
		"_TaskExecContext":        reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_TaskExecContext)(nil)),
		"_TaskExecOptions":        reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_TaskExecOptions)(nil)),
		"_TaskManager":            reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_TaskManager)(nil)),
		"_TaskMatrixExecOptions":  reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_TaskMatrixExecOptions)(nil)),
		"_TaskUser":               reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_TaskUser)(nil)),
		"_Tool":                   reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_Tool)(nil)),
		"_ToolManager":            reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_ToolManager)(nil)),
		"_ToolUser":               reflect.ValueOf((*_arhat_dev_dukkha_pkg_dukkha_ToolUser)(nil)),
	}
}

// _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext is an interface wrapper for ConfigResolvingContext type
type _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext struct {
	IValue                    interface{}
	WAddEnv                   func(override bool, env ...*dukkha.EnvEntry)
	WAddListEnv               func(env ...string)
	WAddRenderer              func(name string, renderer dukkha.Renderer)
	WAddShell                 func(name string, impl dukkha.Shell)
	WAddTool                  func(k dukkha.ToolKey, t dukkha.Tool)
	WAddToolSpecificTasks     func(kind dukkha.ToolKind, name dukkha.ToolName, tasks []dukkha.Task)
	WAddValues                func(values map[string]interface{}) error
	WAllRenderers             func() map[string]dukkha.Renderer
	WAllShells                func() map[string]dukkha.Shell
	WAllToolSpecificTasks     func() map[dukkha.ToolKey][]dukkha.Task
	WAllTools                 func() map[dukkha.ToolKey]dukkha.Tool
	WCacheDir                 func() string
	WCancel                   func()
	WClaimWorkers             func(n int) int
	WColorOutput              func() bool
	WCreate                   func(typ reflect.Type, yamlKey string) (interface{}, error)
	WCurrentTask              func() dukkha.TaskKey
	WCurrentTool              func() dukkha.ToolKey
	WDeadline                 func() (deadline time.Time, ok bool)
	WDeriveNew                func() dukkha.Context
	WDone                     func() <-chan struct{}
	WEach                     func(a0 func(name string, vr expand.Variable) bool)
	WEnv                      func() map[string]string
	WErr                      func() error
	WFailFast                 func() bool
	WGet                      func(name string) expand.Variable
	WGetShell                 func(name string) (dukkha.Shell, bool)
	WGetTool                  func(k dukkha.ToolKey) (dukkha.Tool, bool)
	WGetToolSpecificTasks     func(k dukkha.ToolKey) ([]dukkha.Task, bool)
	WGitBranch                func() string
	WGitCommit                func() string
	WGitDefaultBranch         func() string
	WGitTag                   func() string
	WGitWorkTreeClean         func() bool
	WHostArch                 func() string
	WHostKernel               func() string
	WHostKernelVersion        func() string
	WHostOS                   func() string
	WHostOSVersion            func() string
	WMatrixArch               func() string
	WMatrixFilter             func() map[string][]string
	WMatrixKernel             func() string
	WMatrixLibc               func() string
	WOutputColor              func() termenv.Color
	WOutputPrefix             func() string
	WOverrideDefaultGitBranch func(branch string)
	WPrefixColor              func() termenv.Color
	WRenderYaml               func(renderer string, rawData interface{}) (result []byte, err error)
	WRetainANSIStyle          func() bool
	WRunTask                  func(a0 dukkha.ToolKey, a1 dukkha.TaskKey) error
	WSetCacheDir              func(dir string)
	WSetMatrixFilter          func(mf map[string][]string)
	WSetOutputPrefix          func(s string)
	WSetTask                  func(k dukkha.ToolKey, tK dukkha.TaskKey)
	WSetTaskColors            func(prefixColor termenv.Color, outputColor termenv.Color)
	WTranslateANSIStream      func() bool
	WValue                    func(key interface{}) interface{}
	WValues                   func() map[string]interface{}
	WWorkingDir               func() string
}

func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AddEnv(override bool, env ...*dukkha.EnvEntry) {
	W.WAddEnv(override, env...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AddListEnv(env ...string) {
	W.WAddListEnv(env...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AddRenderer(name string, renderer dukkha.Renderer) {
	W.WAddRenderer(name, renderer)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AddShell(name string, impl dukkha.Shell) {
	W.WAddShell(name, impl)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AddTool(k dukkha.ToolKey, t dukkha.Tool) {
	W.WAddTool(k, t)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AddToolSpecificTasks(kind dukkha.ToolKind, name dukkha.ToolName, tasks []dukkha.Task) {
	W.WAddToolSpecificTasks(kind, name, tasks)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AddValues(values map[string]interface{}) error {
	return W.WAddValues(values)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AllRenderers() map[string]dukkha.Renderer {
	return W.WAllRenderers()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AllShells() map[string]dukkha.Shell {
	return W.WAllShells()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AllToolSpecificTasks() map[dukkha.ToolKey][]dukkha.Task {
	return W.WAllToolSpecificTasks()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) AllTools() map[dukkha.ToolKey]dukkha.Tool {
	return W.WAllTools()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) CacheDir() string { return W.WCacheDir() }
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) Cancel()          { W.WCancel() }
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) ClaimWorkers(n int) int {
	return W.WClaimWorkers(n)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) ColorOutput() bool {
	return W.WColorOutput()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) Create(typ reflect.Type, yamlKey string) (interface{}, error) {
	return W.WCreate(typ, yamlKey)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) CurrentTask() dukkha.TaskKey {
	return W.WCurrentTask()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) CurrentTool() dukkha.ToolKey {
	return W.WCurrentTool()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) DeriveNew() dukkha.Context {
	return W.WDeriveNew()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) Done() <-chan struct{} { return W.WDone() }
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) Each(a0 func(name string, vr expand.Variable) bool) {
	W.WEach(a0)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) Env() map[string]string { return W.WEnv() }
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) Err() error             { return W.WErr() }
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) FailFast() bool         { return W.WFailFast() }
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) Get(name string) expand.Variable {
	return W.WGet(name)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) GetShell(name string) (dukkha.Shell, bool) {
	return W.WGetShell(name)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) GetTool(k dukkha.ToolKey) (dukkha.Tool, bool) {
	return W.WGetTool(k)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) GetToolSpecificTasks(k dukkha.ToolKey) ([]dukkha.Task, bool) {
	return W.WGetToolSpecificTasks(k)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) GitBranch() string {
	return W.WGitBranch()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) GitCommit() string {
	return W.WGitCommit()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) GitDefaultBranch() string {
	return W.WGitDefaultBranch()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) GitTag() string { return W.WGitTag() }
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) GitWorkTreeClean() bool {
	return W.WGitWorkTreeClean()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) HostArch() string { return W.WHostArch() }
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) HostKernel() string {
	return W.WHostKernel()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) HostKernelVersion() string {
	return W.WHostKernelVersion()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) HostOS() string { return W.WHostOS() }
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) HostOSVersion() string {
	return W.WHostOSVersion()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) MatrixArch() string {
	return W.WMatrixArch()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) MatrixFilter() map[string][]string {
	return W.WMatrixFilter()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) MatrixKernel() string {
	return W.WMatrixKernel()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) MatrixLibc() string {
	return W.WMatrixLibc()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) OutputColor() termenv.Color {
	return W.WOutputColor()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) OutputPrefix() string {
	return W.WOutputPrefix()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) OverrideDefaultGitBranch(branch string) {
	W.WOverrideDefaultGitBranch(branch)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) PrefixColor() termenv.Color {
	return W.WPrefixColor()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) RenderYaml(renderer string, rawData interface{}) (result []byte, err error) {
	return W.WRenderYaml(renderer, rawData)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) RetainANSIStyle() bool {
	return W.WRetainANSIStyle()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) RunTask(a0 dukkha.ToolKey, a1 dukkha.TaskKey) error {
	return W.WRunTask(a0, a1)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) SetCacheDir(dir string) {
	W.WSetCacheDir(dir)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) SetMatrixFilter(mf map[string][]string) {
	W.WSetMatrixFilter(mf)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) SetOutputPrefix(s string) {
	W.WSetOutputPrefix(s)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) SetTask(k dukkha.ToolKey, tK dukkha.TaskKey) {
	W.WSetTask(k, tK)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) SetTaskColors(prefixColor termenv.Color, outputColor termenv.Color) {
	W.WSetTaskColors(prefixColor, outputColor)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) TranslateANSIStream() bool {
	return W.WTranslateANSIStream()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) Value(key interface{}) interface{} {
	return W.WValue(key)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) Values() map[string]interface{} {
	return W.WValues()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ConfigResolvingContext) WorkingDir() string {
	return W.WWorkingDir()
}

// _arhat_dev_dukkha_pkg_dukkha_Context is an interface wrapper for Context type
type _arhat_dev_dukkha_pkg_dukkha_Context struct {
	IValue                    interface{}
	WAddEnv                   func(override bool, env ...*dukkha.EnvEntry)
	WAddListEnv               func(env ...string)
	WAddValues                func(values map[string]interface{}) error
	WAllShells                func() map[string]dukkha.Shell
	WAllToolSpecificTasks     func() map[dukkha.ToolKey][]dukkha.Task
	WAllTools                 func() map[dukkha.ToolKey]dukkha.Tool
	WCacheDir                 func() string
	WCancel                   func()
	WClaimWorkers             func(n int) int
	WColorOutput              func() bool
	WCreate                   func(typ reflect.Type, yamlKey string) (interface{}, error)
	WCurrentTask              func() dukkha.TaskKey
	WCurrentTool              func() dukkha.ToolKey
	WDeadline                 func() (deadline time.Time, ok bool)
	WDeriveNew                func() dukkha.Context
	WDone                     func() <-chan struct{}
	WEach                     func(a0 func(name string, vr expand.Variable) bool)
	WEnv                      func() map[string]string
	WErr                      func() error
	WFailFast                 func() bool
	WGet                      func(name string) expand.Variable
	WGetShell                 func(name string) (dukkha.Shell, bool)
	WGetTool                  func(k dukkha.ToolKey) (dukkha.Tool, bool)
	WGetToolSpecificTasks     func(k dukkha.ToolKey) ([]dukkha.Task, bool)
	WGitBranch                func() string
	WGitCommit                func() string
	WGitDefaultBranch         func() string
	WGitTag                   func() string
	WGitWorkTreeClean         func() bool
	WHostArch                 func() string
	WHostKernel               func() string
	WHostKernelVersion        func() string
	WHostOS                   func() string
	WHostOSVersion            func() string
	WMatrixArch               func() string
	WMatrixFilter             func() map[string][]string
	WMatrixKernel             func() string
	WMatrixLibc               func() string
	WOutputColor              func() termenv.Color
	WOutputPrefix             func() string
	WOverrideDefaultGitBranch func(branch string)
	WPrefixColor              func() termenv.Color
	WRenderYaml               func(renderer string, rawData interface{}) (result []byte, err error)
	WRetainANSIStyle          func() bool
	WRunTask                  func(a0 dukkha.ToolKey, a1 dukkha.TaskKey) error
	WSetCacheDir              func(dir string)
	WSetMatrixFilter          func(mf map[string][]string)
	WSetOutputPrefix          func(s string)
	WSetTask                  func(k dukkha.ToolKey, tK dukkha.TaskKey)
	WSetTaskColors            func(prefixColor termenv.Color, outputColor termenv.Color)
	WTranslateANSIStream      func() bool
	WValue                    func(key interface{}) interface{}
	WValues                   func() map[string]interface{}
	WWorkingDir               func() string
}

func (W _arhat_dev_dukkha_pkg_dukkha_Context) AddEnv(override bool, env ...*dukkha.EnvEntry) {
	W.WAddEnv(override, env...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) AddListEnv(env ...string) { W.WAddListEnv(env...) }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) AddValues(values map[string]interface{}) error {
	return W.WAddValues(values)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) AllShells() map[string]dukkha.Shell {
	return W.WAllShells()
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) AllToolSpecificTasks() map[dukkha.ToolKey][]dukkha.Task {
	return W.WAllToolSpecificTasks()
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) AllTools() map[dukkha.ToolKey]dukkha.Tool {
	return W.WAllTools()
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) CacheDir() string       { return W.WCacheDir() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) Cancel()                { W.WCancel() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) ClaimWorkers(n int) int { return W.WClaimWorkers(n) }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) ColorOutput() bool      { return W.WColorOutput() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) Create(typ reflect.Type, yamlKey string) (interface{}, error) {
	return W.WCreate(typ, yamlKey)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) CurrentTask() dukkha.TaskKey { return W.WCurrentTask() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) CurrentTool() dukkha.ToolKey { return W.WCurrentTool() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) DeriveNew() dukkha.Context { return W.WDeriveNew() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) Done() <-chan struct{}     { return W.WDone() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) Each(a0 func(name string, vr expand.Variable) bool) {
	W.WEach(a0)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) Env() map[string]string          { return W.WEnv() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) Err() error                      { return W.WErr() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) FailFast() bool                  { return W.WFailFast() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) Get(name string) expand.Variable { return W.WGet(name) }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) GetShell(name string) (dukkha.Shell, bool) {
	return W.WGetShell(name)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) GetTool(k dukkha.ToolKey) (dukkha.Tool, bool) {
	return W.WGetTool(k)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) GetToolSpecificTasks(k dukkha.ToolKey) ([]dukkha.Task, bool) {
	return W.WGetToolSpecificTasks(k)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) GitBranch() string        { return W.WGitBranch() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) GitCommit() string        { return W.WGitCommit() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) GitDefaultBranch() string { return W.WGitDefaultBranch() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) GitTag() string           { return W.WGitTag() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) GitWorkTreeClean() bool   { return W.WGitWorkTreeClean() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) HostArch() string         { return W.WHostArch() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) HostKernel() string       { return W.WHostKernel() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) HostKernelVersion() string {
	return W.WHostKernelVersion()
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) HostOS() string        { return W.WHostOS() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) HostOSVersion() string { return W.WHostOSVersion() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) MatrixArch() string    { return W.WMatrixArch() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) MatrixFilter() map[string][]string {
	return W.WMatrixFilter()
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) MatrixKernel() string       { return W.WMatrixKernel() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) MatrixLibc() string         { return W.WMatrixLibc() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) OutputColor() termenv.Color { return W.WOutputColor() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) OutputPrefix() string       { return W.WOutputPrefix() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) OverrideDefaultGitBranch(branch string) {
	W.WOverrideDefaultGitBranch(branch)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) PrefixColor() termenv.Color { return W.WPrefixColor() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) RenderYaml(renderer string, rawData interface{}) (result []byte, err error) {
	return W.WRenderYaml(renderer, rawData)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) RetainANSIStyle() bool { return W.WRetainANSIStyle() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) RunTask(a0 dukkha.ToolKey, a1 dukkha.TaskKey) error {
	return W.WRunTask(a0, a1)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) SetCacheDir(dir string) { W.WSetCacheDir(dir) }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) SetMatrixFilter(mf map[string][]string) {
	W.WSetMatrixFilter(mf)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) SetOutputPrefix(s string) { W.WSetOutputPrefix(s) }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) SetTask(k dukkha.ToolKey, tK dukkha.TaskKey) {
	W.WSetTask(k, tK)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) SetTaskColors(prefixColor termenv.Color, outputColor termenv.Color) {
	W.WSetTaskColors(prefixColor, outputColor)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) TranslateANSIStream() bool {
	return W.WTranslateANSIStream()
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) Value(key interface{}) interface{} {
	return W.WValue(key)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Context) Values() map[string]interface{} { return W.WValues() }
func (W _arhat_dev_dukkha_pkg_dukkha_Context) WorkingDir() string             { return W.WWorkingDir() }

// _arhat_dev_dukkha_pkg_dukkha_EnvValues is an interface wrapper for EnvValues type
type _arhat_dev_dukkha_pkg_dukkha_EnvValues struct {
	IValue                    interface{}
	WAddEnv                   func(override bool, env ...*dukkha.EnvEntry)
	WAddListEnv               func(env ...string)
	WCacheDir                 func() string
	WGitBranch                func() string
	WGitCommit                func() string
	WGitDefaultBranch         func() string
	WGitTag                   func() string
	WGitWorkTreeClean         func() bool
	WHostArch                 func() string
	WHostKernel               func() string
	WHostKernelVersion        func() string
	WHostOS                   func() string
	WHostOSVersion            func() string
	WMatrixArch               func() string
	WMatrixFilter             func() map[string][]string
	WMatrixKernel             func() string
	WMatrixLibc               func() string
	WOverrideDefaultGitBranch func(branch string)
	WSetCacheDir              func(dir string)
	WSetMatrixFilter          func(mf map[string][]string)
	WWorkingDir               func() string
}

func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) AddEnv(override bool, env ...*dukkha.EnvEntry) {
	W.WAddEnv(override, env...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) AddListEnv(env ...string) { W.WAddListEnv(env...) }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) CacheDir() string         { return W.WCacheDir() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) GitBranch() string        { return W.WGitBranch() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) GitCommit() string        { return W.WGitCommit() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) GitDefaultBranch() string {
	return W.WGitDefaultBranch()
}
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) GitTag() string         { return W.WGitTag() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) GitWorkTreeClean() bool { return W.WGitWorkTreeClean() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) HostArch() string       { return W.WHostArch() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) HostKernel() string     { return W.WHostKernel() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) HostKernelVersion() string {
	return W.WHostKernelVersion()
}
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) HostOS() string        { return W.WHostOS() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) HostOSVersion() string { return W.WHostOSVersion() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) MatrixArch() string    { return W.WMatrixArch() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) MatrixFilter() map[string][]string {
	return W.WMatrixFilter()
}
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) MatrixKernel() string { return W.WMatrixKernel() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) MatrixLibc() string   { return W.WMatrixLibc() }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) OverrideDefaultGitBranch(branch string) {
	W.WOverrideDefaultGitBranch(branch)
}
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) SetCacheDir(dir string) { W.WSetCacheDir(dir) }
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) SetMatrixFilter(mf map[string][]string) {
	W.WSetMatrixFilter(mf)
}
func (W _arhat_dev_dukkha_pkg_dukkha_EnvValues) WorkingDir() string { return W.WWorkingDir() }

// _arhat_dev_dukkha_pkg_dukkha_ExecValues is an interface wrapper for ExecValues type
type _arhat_dev_dukkha_pkg_dukkha_ExecValues struct {
	IValue           interface{}
	WCurrentTask     func() dukkha.TaskKey
	WCurrentTool     func() dukkha.ToolKey
	WOutputColor     func() termenv.Color
	WOutputPrefix    func() string
	WPrefixColor     func() termenv.Color
	WSetOutputPrefix func(s string)
	WSetTask         func(k dukkha.ToolKey, tK dukkha.TaskKey)
	WSetTaskColors   func(prefixColor termenv.Color, outputColor termenv.Color)
}

func (W _arhat_dev_dukkha_pkg_dukkha_ExecValues) CurrentTask() dukkha.TaskKey {
	return W.WCurrentTask()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ExecValues) CurrentTool() dukkha.ToolKey {
	return W.WCurrentTool()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ExecValues) OutputColor() termenv.Color { return W.WOutputColor() }
func (W _arhat_dev_dukkha_pkg_dukkha_ExecValues) OutputPrefix() string       { return W.WOutputPrefix() }
func (W _arhat_dev_dukkha_pkg_dukkha_ExecValues) PrefixColor() termenv.Color { return W.WPrefixColor() }
func (W _arhat_dev_dukkha_pkg_dukkha_ExecValues) SetOutputPrefix(s string)   { W.WSetOutputPrefix(s) }
func (W _arhat_dev_dukkha_pkg_dukkha_ExecValues) SetTask(k dukkha.ToolKey, tK dukkha.TaskKey) {
	W.WSetTask(k, tK)
}
func (W _arhat_dev_dukkha_pkg_dukkha_ExecValues) SetTaskColors(prefixColor termenv.Color, outputColor termenv.Color) {
	W.WSetTaskColors(prefixColor, outputColor)
}

// _arhat_dev_dukkha_pkg_dukkha_GlobalValues is an interface wrapper for GlobalValues type
type _arhat_dev_dukkha_pkg_dukkha_GlobalValues struct {
	IValue                    interface{}
	WCacheDir                 func() string
	WGitBranch                func() string
	WGitCommit                func() string
	WGitDefaultBranch         func() string
	WGitTag                   func() string
	WGitWorkTreeClean         func() bool
	WHostArch                 func() string
	WHostKernel               func() string
	WHostKernelVersion        func() string
	WHostOS                   func() string
	WHostOSVersion            func() string
	WOverrideDefaultGitBranch func(branch string)
	WSetCacheDir              func(dir string)
	WWorkingDir               func() string
}

func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) CacheDir() string  { return W.WCacheDir() }
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) GitBranch() string { return W.WGitBranch() }
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) GitCommit() string { return W.WGitCommit() }
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) GitDefaultBranch() string {
	return W.WGitDefaultBranch()
}
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) GitTag() string { return W.WGitTag() }
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) GitWorkTreeClean() bool {
	return W.WGitWorkTreeClean()
}
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) HostArch() string   { return W.WHostArch() }
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) HostKernel() string { return W.WHostKernel() }
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) HostKernelVersion() string {
	return W.WHostKernelVersion()
}
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) HostOS() string        { return W.WHostOS() }
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) HostOSVersion() string { return W.WHostOSVersion() }
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) OverrideDefaultGitBranch(branch string) {
	W.WOverrideDefaultGitBranch(branch)
}
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) SetCacheDir(dir string) { W.WSetCacheDir(dir) }
func (W _arhat_dev_dukkha_pkg_dukkha_GlobalValues) WorkingDir() string     { return W.WWorkingDir() }

// _arhat_dev_dukkha_pkg_dukkha_Renderer is an interface wrapper for Renderer type
type _arhat_dev_dukkha_pkg_dukkha_Renderer struct {
	IValue         interface{}
	WInit          func(ctx dukkha.ConfigResolvingContext) error
	WRenderYaml    func(rc dukkha.RenderingContext, rawData interface{}) (result []byte, err error)
	WResolveFields func(rc rs.RenderingHandler, depth int, fieldNames ...string) error
	WUnmarshalYAML func(value *yaml.Node) error
}

func (W _arhat_dev_dukkha_pkg_dukkha_Renderer) Init(ctx dukkha.ConfigResolvingContext) error {
	return W.WInit(ctx)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Renderer) RenderYaml(rc dukkha.RenderingContext, rawData interface{}) (result []byte, err error) {
	return W.WRenderYaml(rc, rawData)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Renderer) ResolveFields(rc rs.RenderingHandler, depth int, fieldNames ...string) error {
	return W.WResolveFields(rc, depth, fieldNames...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Renderer) UnmarshalYAML(value *yaml.Node) error {
	return W.WUnmarshalYAML(value)
}

// _arhat_dev_dukkha_pkg_dukkha_RendererManager is an interface wrapper for RendererManager type
type _arhat_dev_dukkha_pkg_dukkha_RendererManager struct {
	IValue        interface{}
	WAddRenderer  func(name string, renderer dukkha.Renderer)
	WAllRenderers func() map[string]dukkha.Renderer
}

func (W _arhat_dev_dukkha_pkg_dukkha_RendererManager) AddRenderer(name string, renderer dukkha.Renderer) {
	W.WAddRenderer(name, renderer)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RendererManager) AllRenderers() map[string]dukkha.Renderer {
	return W.WAllRenderers()
}

// _arhat_dev_dukkha_pkg_dukkha_RenderingContext is an interface wrapper for RenderingContext type
type _arhat_dev_dukkha_pkg_dukkha_RenderingContext struct {
	IValue                    interface{}
	WAddEnv                   func(override bool, env ...*dukkha.EnvEntry)
	WAddListEnv               func(env ...string)
	WAddValues                func(values map[string]interface{}) error
	WCacheDir                 func() string
	WCreate                   func(typ reflect.Type, yamlKey string) (interface{}, error)
	WDeadline                 func() (deadline time.Time, ok bool)
	WDone                     func() <-chan struct{}
	WEach                     func(a0 func(name string, vr expand.Variable) bool)
	WEnv                      func() map[string]string
	WErr                      func() error
	WGet                      func(name string) expand.Variable
	WGitBranch                func() string
	WGitCommit                func() string
	WGitDefaultBranch         func() string
	WGitTag                   func() string
	WGitWorkTreeClean         func() bool
	WHostArch                 func() string
	WHostKernel               func() string
	WHostKernelVersion        func() string
	WHostOS                   func() string
	WHostOSVersion            func() string
	WMatrixArch               func() string
	WMatrixFilter             func() map[string][]string
	WMatrixKernel             func() string
	WMatrixLibc               func() string
	WOverrideDefaultGitBranch func(branch string)
	WRenderYaml               func(renderer string, rawData interface{}) (result []byte, err error)
	WSetCacheDir              func(dir string)
	WSetMatrixFilter          func(mf map[string][]string)
	WValue                    func(key interface{}) interface{}
	WValues                   func() map[string]interface{}
	WWorkingDir               func() string
}

func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) AddEnv(override bool, env ...*dukkha.EnvEntry) {
	W.WAddEnv(override, env...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) AddListEnv(env ...string) {
	W.WAddListEnv(env...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) AddValues(values map[string]interface{}) error {
	return W.WAddValues(values)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) CacheDir() string { return W.WCacheDir() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) Create(typ reflect.Type, yamlKey string) (interface{}, error) {
	return W.WCreate(typ, yamlKey)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) Done() <-chan struct{} { return W.WDone() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) Each(a0 func(name string, vr expand.Variable) bool) {
	W.WEach(a0)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) Env() map[string]string { return W.WEnv() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) Err() error             { return W.WErr() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) Get(name string) expand.Variable {
	return W.WGet(name)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) GitBranch() string { return W.WGitBranch() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) GitCommit() string { return W.WGitCommit() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) GitDefaultBranch() string {
	return W.WGitDefaultBranch()
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) GitTag() string { return W.WGitTag() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) GitWorkTreeClean() bool {
	return W.WGitWorkTreeClean()
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) HostArch() string   { return W.WHostArch() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) HostKernel() string { return W.WHostKernel() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) HostKernelVersion() string {
	return W.WHostKernelVersion()
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) HostOS() string { return W.WHostOS() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) HostOSVersion() string {
	return W.WHostOSVersion()
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) MatrixArch() string { return W.WMatrixArch() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) MatrixFilter() map[string][]string {
	return W.WMatrixFilter()
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) MatrixKernel() string {
	return W.WMatrixKernel()
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) MatrixLibc() string { return W.WMatrixLibc() }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) OverrideDefaultGitBranch(branch string) {
	W.WOverrideDefaultGitBranch(branch)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) RenderYaml(renderer string, rawData interface{}) (result []byte, err error) {
	return W.WRenderYaml(renderer, rawData)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) SetCacheDir(dir string) { W.WSetCacheDir(dir) }
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) SetMatrixFilter(mf map[string][]string) {
	W.WSetMatrixFilter(mf)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) Value(key interface{}) interface{} {
	return W.WValue(key)
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) Values() map[string]interface{} {
	return W.WValues()
}
func (W _arhat_dev_dukkha_pkg_dukkha_RenderingContext) WorkingDir() string { return W.WWorkingDir() }

// _arhat_dev_dukkha_pkg_dukkha_RunTaskOrRunCmd is an interface wrapper for RunTaskOrRunCmd type
type _arhat_dev_dukkha_pkg_dukkha_RunTaskOrRunCmd struct {
	IValue interface{}
}

// _arhat_dev_dukkha_pkg_dukkha_Shell is an interface wrapper for Shell type
type _arhat_dev_dukkha_pkg_dukkha_Shell struct {
	IValue         interface{}
	WGetExecSpec   func(toExec []string, isFilePath bool) (env dukkha.Env, cmd []string, err error)
	WResolveFields func(rc rs.RenderingHandler, depth int, fieldNames ...string) error
	WUnmarshalYAML func(value *yaml.Node) error
}

func (W _arhat_dev_dukkha_pkg_dukkha_Shell) GetExecSpec(toExec []string, isFilePath bool) (env dukkha.Env, cmd []string, err error) {
	return W.WGetExecSpec(toExec, isFilePath)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Shell) ResolveFields(rc rs.RenderingHandler, depth int, fieldNames ...string) error {
	return W.WResolveFields(rc, depth, fieldNames...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Shell) UnmarshalYAML(value *yaml.Node) error {
	return W.WUnmarshalYAML(value)
}

// _arhat_dev_dukkha_pkg_dukkha_ShellManager is an interface wrapper for ShellManager type
type _arhat_dev_dukkha_pkg_dukkha_ShellManager struct {
	IValue    interface{}
	WAddShell func(name string, impl dukkha.Shell)
}

func (W _arhat_dev_dukkha_pkg_dukkha_ShellManager) AddShell(name string, impl dukkha.Shell) {
	W.WAddShell(name, impl)
}

// _arhat_dev_dukkha_pkg_dukkha_ShellUser is an interface wrapper for ShellUser type
type _arhat_dev_dukkha_pkg_dukkha_ShellUser struct {
	IValue     interface{}
	WAllShells func() map[string]dukkha.Shell
	WGetShell  func(name string) (dukkha.Shell, bool)
}

func (W _arhat_dev_dukkha_pkg_dukkha_ShellUser) AllShells() map[string]dukkha.Shell {
	return W.WAllShells()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ShellUser) GetShell(name string) (dukkha.Shell, bool) {
	return W.WGetShell(name)
}

// _arhat_dev_dukkha_pkg_dukkha_Task is an interface wrapper for Task type
type _arhat_dev_dukkha_pkg_dukkha_Task struct {
	IValue                 interface{}
	WContinueOnError       func() bool
	WDoAfterFieldsResolved func(rc dukkha.RenderingContext, depth int, do func() error, fieldNames ...string) error
	WGetExecSpecs          func(rc dukkha.TaskExecContext, options dukkha.TaskMatrixExecOptions) ([]dukkha.TaskExecSpec, error)
	WGetHookExecSpecs      func(ctx dukkha.TaskExecContext, state dukkha.TaskExecStage) ([]dukkha.RunTaskOrRunCmd, error)
	WGetMatrixSpecs        func(rc dukkha.RenderingContext) ([]matrix.Entry, error)
	WKey                   func() dukkha.TaskKey
	WKind                  func() dukkha.TaskKind
	WName                  func() dukkha.TaskName
	WResolveFields         func(rc rs.RenderingHandler, depth int, fieldNames ...string) error
	WToolKind              func() dukkha.ToolKind
	WToolName              func() dukkha.ToolName
	WUnmarshalYAML         func(value *yaml.Node) error
}

func (W _arhat_dev_dukkha_pkg_dukkha_Task) ContinueOnError() bool { return W.WContinueOnError() }
func (W _arhat_dev_dukkha_pkg_dukkha_Task) DoAfterFieldsResolved(rc dukkha.RenderingContext, depth int, do func() error, fieldNames ...string) error {
	return W.WDoAfterFieldsResolved(rc, depth, do, fieldNames...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Task) GetExecSpecs(rc dukkha.TaskExecContext, options dukkha.TaskMatrixExecOptions) ([]dukkha.TaskExecSpec, error) {
	return W.WGetExecSpecs(rc, options)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Task) GetHookExecSpecs(ctx dukkha.TaskExecContext, state dukkha.TaskExecStage) ([]dukkha.RunTaskOrRunCmd, error) {
	return W.WGetHookExecSpecs(ctx, state)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Task) GetMatrixSpecs(rc dukkha.RenderingContext) ([]matrix.Entry, error) {
	return W.WGetMatrixSpecs(rc)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Task) Key() dukkha.TaskKey   { return W.WKey() }
func (W _arhat_dev_dukkha_pkg_dukkha_Task) Kind() dukkha.TaskKind { return W.WKind() }
func (W _arhat_dev_dukkha_pkg_dukkha_Task) Name() dukkha.TaskName { return W.WName() }
func (W _arhat_dev_dukkha_pkg_dukkha_Task) ResolveFields(rc rs.RenderingHandler, depth int, fieldNames ...string) error {
	return W.WResolveFields(rc, depth, fieldNames...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Task) ToolKind() dukkha.ToolKind { return W.WToolKind() }
func (W _arhat_dev_dukkha_pkg_dukkha_Task) ToolName() dukkha.ToolName { return W.WToolName() }
func (W _arhat_dev_dukkha_pkg_dukkha_Task) UnmarshalYAML(value *yaml.Node) error {
	return W.WUnmarshalYAML(value)
}

// _arhat_dev_dukkha_pkg_dukkha_TaskExecContext is an interface wrapper for TaskExecContext type
type _arhat_dev_dukkha_pkg_dukkha_TaskExecContext struct {
	IValue                    interface{}
	WAddEnv                   func(override bool, env ...*dukkha.EnvEntry)
	WAddListEnv               func(env ...string)
	WAddValues                func(values map[string]interface{}) error
	WAllShells                func() map[string]dukkha.Shell
	WAllToolSpecificTasks     func() map[dukkha.ToolKey][]dukkha.Task
	WAllTools                 func() map[dukkha.ToolKey]dukkha.Tool
	WCacheDir                 func() string
	WCancel                   func()
	WClaimWorkers             func(n int) int
	WColorOutput              func() bool
	WCreate                   func(typ reflect.Type, yamlKey string) (interface{}, error)
	WCurrentTask              func() dukkha.TaskKey
	WCurrentTool              func() dukkha.ToolKey
	WDeadline                 func() (deadline time.Time, ok bool)
	WDeriveNew                func() dukkha.Context
	WDone                     func() <-chan struct{}
	WEach                     func(a0 func(name string, vr expand.Variable) bool)
	WEnv                      func() map[string]string
	WErr                      func() error
	WFailFast                 func() bool
	WGet                      func(name string) expand.Variable
	WGetShell                 func(name string) (dukkha.Shell, bool)
	WGetTool                  func(k dukkha.ToolKey) (dukkha.Tool, bool)
	WGetToolSpecificTasks     func(k dukkha.ToolKey) ([]dukkha.Task, bool)
	WGitBranch                func() string
	WGitCommit                func() string
	WGitDefaultBranch         func() string
	WGitTag                   func() string
	WGitWorkTreeClean         func() bool
	WHostArch                 func() string
	WHostKernel               func() string
	WHostKernelVersion        func() string
	WHostOS                   func() string
	WHostOSVersion            func() string
	WMatrixArch               func() string
	WMatrixFilter             func() map[string][]string
	WMatrixKernel             func() string
	WMatrixLibc               func() string
	WOutputColor              func() termenv.Color
	WOutputPrefix             func() string
	WOverrideDefaultGitBranch func(branch string)
	WPrefixColor              func() termenv.Color
	WRenderYaml               func(renderer string, rawData interface{}) (result []byte, err error)
	WRetainANSIStyle          func() bool
	WSetCacheDir              func(dir string)
	WSetMatrixFilter          func(mf map[string][]string)
	WSetOutputPrefix          func(s string)
	WSetTask                  func(k dukkha.ToolKey, tK dukkha.TaskKey)
	WSetTaskColors            func(prefixColor termenv.Color, outputColor termenv.Color)
	WTranslateANSIStream      func() bool
	WValue                    func(key interface{}) interface{}
	WValues                   func() map[string]interface{}
	WWorkingDir               func() string
}

func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) AddEnv(override bool, env ...*dukkha.EnvEntry) {
	W.WAddEnv(override, env...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) AddListEnv(env ...string) {
	W.WAddListEnv(env...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) AddValues(values map[string]interface{}) error {
	return W.WAddValues(values)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) AllShells() map[string]dukkha.Shell {
	return W.WAllShells()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) AllToolSpecificTasks() map[dukkha.ToolKey][]dukkha.Task {
	return W.WAllToolSpecificTasks()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) AllTools() map[dukkha.ToolKey]dukkha.Tool {
	return W.WAllTools()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) CacheDir() string { return W.WCacheDir() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) Cancel()          { W.WCancel() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) ClaimWorkers(n int) int {
	return W.WClaimWorkers(n)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) ColorOutput() bool { return W.WColorOutput() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) Create(typ reflect.Type, yamlKey string) (interface{}, error) {
	return W.WCreate(typ, yamlKey)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) CurrentTask() dukkha.TaskKey {
	return W.WCurrentTask()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) CurrentTool() dukkha.ToolKey {
	return W.WCurrentTool()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) Deadline() (deadline time.Time, ok bool) {
	return W.WDeadline()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) DeriveNew() dukkha.Context {
	return W.WDeriveNew()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) Done() <-chan struct{} { return W.WDone() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) Each(a0 func(name string, vr expand.Variable) bool) {
	W.WEach(a0)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) Env() map[string]string { return W.WEnv() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) Err() error             { return W.WErr() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) FailFast() bool         { return W.WFailFast() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) Get(name string) expand.Variable {
	return W.WGet(name)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) GetShell(name string) (dukkha.Shell, bool) {
	return W.WGetShell(name)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) GetTool(k dukkha.ToolKey) (dukkha.Tool, bool) {
	return W.WGetTool(k)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) GetToolSpecificTasks(k dukkha.ToolKey) ([]dukkha.Task, bool) {
	return W.WGetToolSpecificTasks(k)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) GitBranch() string { return W.WGitBranch() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) GitCommit() string { return W.WGitCommit() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) GitDefaultBranch() string {
	return W.WGitDefaultBranch()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) GitTag() string { return W.WGitTag() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) GitWorkTreeClean() bool {
	return W.WGitWorkTreeClean()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) HostArch() string   { return W.WHostArch() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) HostKernel() string { return W.WHostKernel() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) HostKernelVersion() string {
	return W.WHostKernelVersion()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) HostOS() string { return W.WHostOS() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) HostOSVersion() string {
	return W.WHostOSVersion()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) MatrixArch() string { return W.WMatrixArch() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) MatrixFilter() map[string][]string {
	return W.WMatrixFilter()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) MatrixKernel() string { return W.WMatrixKernel() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) MatrixLibc() string   { return W.WMatrixLibc() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) OutputColor() termenv.Color {
	return W.WOutputColor()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) OutputPrefix() string { return W.WOutputPrefix() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) OverrideDefaultGitBranch(branch string) {
	W.WOverrideDefaultGitBranch(branch)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) PrefixColor() termenv.Color {
	return W.WPrefixColor()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) RenderYaml(renderer string, rawData interface{}) (result []byte, err error) {
	return W.WRenderYaml(renderer, rawData)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) RetainANSIStyle() bool {
	return W.WRetainANSIStyle()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) SetCacheDir(dir string) { W.WSetCacheDir(dir) }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) SetMatrixFilter(mf map[string][]string) {
	W.WSetMatrixFilter(mf)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) SetOutputPrefix(s string) {
	W.WSetOutputPrefix(s)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) SetTask(k dukkha.ToolKey, tK dukkha.TaskKey) {
	W.WSetTask(k, tK)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) SetTaskColors(prefixColor termenv.Color, outputColor termenv.Color) {
	W.WSetTaskColors(prefixColor, outputColor)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) TranslateANSIStream() bool {
	return W.WTranslateANSIStream()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) Value(key interface{}) interface{} {
	return W.WValue(key)
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) Values() map[string]interface{} {
	return W.WValues()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecContext) WorkingDir() string { return W.WWorkingDir() }

// _arhat_dev_dukkha_pkg_dukkha_TaskExecOptions is an interface wrapper for TaskExecOptions type
type _arhat_dev_dukkha_pkg_dukkha_TaskExecOptions struct {
	IValue                 interface{}
	WNextMatrixExecOptions func(useShell bool, shellName string, toolCmd []string) dukkha.TaskMatrixExecOptions
}

func (W _arhat_dev_dukkha_pkg_dukkha_TaskExecOptions) NextMatrixExecOptions(useShell bool, shellName string, toolCmd []string) dukkha.TaskMatrixExecOptions {
	return W.WNextMatrixExecOptions(useShell, shellName, toolCmd)
}

// _arhat_dev_dukkha_pkg_dukkha_TaskManager is an interface wrapper for TaskManager type
type _arhat_dev_dukkha_pkg_dukkha_TaskManager struct {
	IValue                interface{}
	WAddToolSpecificTasks func(kind dukkha.ToolKind, name dukkha.ToolName, tasks []dukkha.Task)
}

func (W _arhat_dev_dukkha_pkg_dukkha_TaskManager) AddToolSpecificTasks(kind dukkha.ToolKind, name dukkha.ToolName, tasks []dukkha.Task) {
	W.WAddToolSpecificTasks(kind, name, tasks)
}

// _arhat_dev_dukkha_pkg_dukkha_TaskMatrixExecOptions is an interface wrapper for TaskMatrixExecOptions type
type _arhat_dev_dukkha_pkg_dukkha_TaskMatrixExecOptions struct {
	IValue     interface{}
	WID        func() int
	WIsLast    func() bool
	WSeq       func() int
	WShellName func() string
	WToolCmd   func() []string
	WTotal     func() int
	WUseShell  func() bool
}

func (W _arhat_dev_dukkha_pkg_dukkha_TaskMatrixExecOptions) ID() int           { return W.WID() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskMatrixExecOptions) IsLast() bool      { return W.WIsLast() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskMatrixExecOptions) Seq() int          { return W.WSeq() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskMatrixExecOptions) ShellName() string { return W.WShellName() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskMatrixExecOptions) ToolCmd() []string { return W.WToolCmd() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskMatrixExecOptions) Total() int        { return W.WTotal() }
func (W _arhat_dev_dukkha_pkg_dukkha_TaskMatrixExecOptions) UseShell() bool    { return W.WUseShell() }

// _arhat_dev_dukkha_pkg_dukkha_TaskUser is an interface wrapper for TaskUser type
type _arhat_dev_dukkha_pkg_dukkha_TaskUser struct {
	IValue                interface{}
	WAllToolSpecificTasks func() map[dukkha.ToolKey][]dukkha.Task
	WGetToolSpecificTasks func(k dukkha.ToolKey) ([]dukkha.Task, bool)
}

func (W _arhat_dev_dukkha_pkg_dukkha_TaskUser) AllToolSpecificTasks() map[dukkha.ToolKey][]dukkha.Task {
	return W.WAllToolSpecificTasks()
}
func (W _arhat_dev_dukkha_pkg_dukkha_TaskUser) GetToolSpecificTasks(k dukkha.ToolKey) ([]dukkha.Task, bool) {
	return W.WGetToolSpecificTasks(k)
}

// _arhat_dev_dukkha_pkg_dukkha_Tool is an interface wrapper for Tool type
type _arhat_dev_dukkha_pkg_dukkha_Tool struct {
	IValue                 interface{}
	WDoAfterFieldsResolved func(mCtx dukkha.TaskExecContext, depth int, do func() error, fieldNames ...string) error
	WGetCmd                func() []string
	WGetEnv                func() dukkha.Env
	WGetTask               func(a0 dukkha.TaskKey) (dukkha.Task, bool)
	WInit                  func(kind dukkha.ToolKind, cachdDir string) error
	WKey                   func() dukkha.ToolKey
	WKind                  func() dukkha.ToolKind
	WName                  func() dukkha.ToolName
	WResolveFields         func(rc rs.RenderingHandler, depth int, fieldNames ...string) error
	WResolveTasks          func(tasks []dukkha.Task) error
	WRun                   func(taskCtx dukkha.TaskExecContext) error
	WShellName             func() string
	WUnmarshalYAML         func(value *yaml.Node) error
	WUseShell              func() bool
}

func (W _arhat_dev_dukkha_pkg_dukkha_Tool) DoAfterFieldsResolved(mCtx dukkha.TaskExecContext, depth int, do func() error, fieldNames ...string) error {
	return W.WDoAfterFieldsResolved(mCtx, depth, do, fieldNames...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) GetCmd() []string   { return W.WGetCmd() }
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) GetEnv() dukkha.Env { return W.WGetEnv() }
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) GetTask(a0 dukkha.TaskKey) (dukkha.Task, bool) {
	return W.WGetTask(a0)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) Init(kind dukkha.ToolKind, cachdDir string) error {
	return W.WInit(kind, cachdDir)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) Key() dukkha.ToolKey   { return W.WKey() }
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) Kind() dukkha.ToolKind { return W.WKind() }
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) Name() dukkha.ToolName { return W.WName() }
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) ResolveFields(rc rs.RenderingHandler, depth int, fieldNames ...string) error {
	return W.WResolveFields(rc, depth, fieldNames...)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) ResolveTasks(tasks []dukkha.Task) error {
	return W.WResolveTasks(tasks)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) Run(taskCtx dukkha.TaskExecContext) error {
	return W.WRun(taskCtx)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) ShellName() string { return W.WShellName() }
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) UnmarshalYAML(value *yaml.Node) error {
	return W.WUnmarshalYAML(value)
}
func (W _arhat_dev_dukkha_pkg_dukkha_Tool) UseShell() bool { return W.WUseShell() }

// _arhat_dev_dukkha_pkg_dukkha_ToolManager is an interface wrapper for ToolManager type
type _arhat_dev_dukkha_pkg_dukkha_ToolManager struct {
	IValue   interface{}
	WAddTool func(k dukkha.ToolKey, t dukkha.Tool)
}

func (W _arhat_dev_dukkha_pkg_dukkha_ToolManager) AddTool(k dukkha.ToolKey, t dukkha.Tool) {
	W.WAddTool(k, t)
}

// _arhat_dev_dukkha_pkg_dukkha_ToolUser is an interface wrapper for ToolUser type
type _arhat_dev_dukkha_pkg_dukkha_ToolUser struct {
	IValue    interface{}
	WAllTools func() map[dukkha.ToolKey]dukkha.Tool
	WGetTool  func(k dukkha.ToolKey) (dukkha.Tool, bool)
}

func (W _arhat_dev_dukkha_pkg_dukkha_ToolUser) AllTools() map[dukkha.ToolKey]dukkha.Tool {
	return W.WAllTools()
}
func (W _arhat_dev_dukkha_pkg_dukkha_ToolUser) GetTool(k dukkha.ToolKey) (dukkha.Tool, bool) {
	return W.WGetTool(k)
}
