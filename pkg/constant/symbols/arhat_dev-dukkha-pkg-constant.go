// Code generated by 'yaegi extract arhat.dev/dukkha/pkg/constant'. DO NOT EDIT.

package constant_symbols

import (
	"arhat.dev/dukkha/pkg/constant"
	goconst "go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["arhat.dev/dukkha/pkg/constant/constant"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ARCH_AMD64":              reflect.ValueOf(goconst.MakeFromLiteral("\"amd64\"", token.STRING, 0)),
		"ARCH_ARM64":              reflect.ValueOf(goconst.MakeFromLiteral("\"arm64\"", token.STRING, 0)),
		"ARCH_ARM_V5":             reflect.ValueOf(goconst.MakeFromLiteral("\"armv5\"", token.STRING, 0)),
		"ARCH_ARM_V6":             reflect.ValueOf(goconst.MakeFromLiteral("\"armv6\"", token.STRING, 0)),
		"ARCH_ARM_V7":             reflect.ValueOf(goconst.MakeFromLiteral("\"armv7\"", token.STRING, 0)),
		"ARCH_IA64":               reflect.ValueOf(goconst.MakeFromLiteral("\"ia64\"", token.STRING, 0)),
		"ARCH_MIPS":               reflect.ValueOf(goconst.MakeFromLiteral("\"mips\"", token.STRING, 0)),
		"ARCH_MIPS64":             reflect.ValueOf(goconst.MakeFromLiteral("\"mips64\"", token.STRING, 0)),
		"ARCH_MIPS64_LE":          reflect.ValueOf(goconst.MakeFromLiteral("\"mips64le\"", token.STRING, 0)),
		"ARCH_MIPS64_LE_SF":       reflect.ValueOf(goconst.MakeFromLiteral("\"mips64lesf\"", token.STRING, 0)),
		"ARCH_MIPS64_SF":          reflect.ValueOf(goconst.MakeFromLiteral("\"mips64sf\"", token.STRING, 0)),
		"ARCH_MIPS_LE":            reflect.ValueOf(goconst.MakeFromLiteral("\"mipsle\"", token.STRING, 0)),
		"ARCH_MIPS_LE_SF":         reflect.ValueOf(goconst.MakeFromLiteral("\"mipslesf\"", token.STRING, 0)),
		"ARCH_MIPS_SF":            reflect.ValueOf(goconst.MakeFromLiteral("\"mipssf\"", token.STRING, 0)),
		"ARCH_PPC":                reflect.ValueOf(goconst.MakeFromLiteral("\"ppc\"", token.STRING, 0)),
		"ARCH_PPC64":              reflect.ValueOf(goconst.MakeFromLiteral("\"ppc64\"", token.STRING, 0)),
		"ARCH_PPC64_LE":           reflect.ValueOf(goconst.MakeFromLiteral("\"ppc64le\"", token.STRING, 0)),
		"ARCH_PPC_LE":             reflect.ValueOf(goconst.MakeFromLiteral("\"ppcle\"", token.STRING, 0)),
		"ARCH_PPC_LE_SF":          reflect.ValueOf(goconst.MakeFromLiteral("\"ppclesf\"", token.STRING, 0)),
		"ARCH_PPC_SF":             reflect.ValueOf(goconst.MakeFromLiteral("\"ppcsf\"", token.STRING, 0)),
		"ARCH_RISCV_64":           reflect.ValueOf(goconst.MakeFromLiteral("\"riscv64\"", token.STRING, 0)),
		"ARCH_S390X":              reflect.ValueOf(goconst.MakeFromLiteral("\"s390x\"", token.STRING, 0)),
		"ARCH_X86":                reflect.ValueOf(goconst.MakeFromLiteral("\"x86\"", token.STRING, 0)),
		"DefaultCacheDir":         reflect.ValueOf(goconst.MakeFromLiteral("\".dukkha/cache\"", token.STRING, 0)),
		"ENV_DUKKHA_CACHE_DIR":    reflect.ValueOf(goconst.MakeFromLiteral("\"DUKKHA_CACHE_DIR\"", token.STRING, 0)),
		"ENV_DUKKHA_WORKING_DIR":  reflect.ValueOf(goconst.MakeFromLiteral("\"DUKKHA_WORKING_DIR\"", token.STRING, 0)),
		"ENV_GIT_BRANCH":          reflect.ValueOf(goconst.MakeFromLiteral("\"GIT_BRANCH\"", token.STRING, 0)),
		"ENV_GIT_COMMIT":          reflect.ValueOf(goconst.MakeFromLiteral("\"GIT_COMMIT\"", token.STRING, 0)),
		"ENV_GIT_DEFAULT_BRANCH":  reflect.ValueOf(goconst.MakeFromLiteral("\"GIT_DEFAULT_BRANCH\"", token.STRING, 0)),
		"ENV_GIT_TAG":             reflect.ValueOf(goconst.MakeFromLiteral("\"GIT_TAG\"", token.STRING, 0)),
		"ENV_GIT_WORKTREE_CLEAN":  reflect.ValueOf(goconst.MakeFromLiteral("\"GIT_WORKTREE_CLEAN\"", token.STRING, 0)),
		"ENV_HOST_ARCH":           reflect.ValueOf(goconst.MakeFromLiteral("\"HOST_ARCH\"", token.STRING, 0)),
		"ENV_HOST_KERNEL":         reflect.ValueOf(goconst.MakeFromLiteral("\"HOST_KERNEL\"", token.STRING, 0)),
		"ENV_HOST_KERNEL_VERSION": reflect.ValueOf(goconst.MakeFromLiteral("\"HOST_KERNEL_VERSION\"", token.STRING, 0)),
		"ENV_HOST_OS":             reflect.ValueOf(goconst.MakeFromLiteral("\"HOST_OS\"", token.STRING, 0)),
		"ENV_HOST_OS_VERSION":     reflect.ValueOf(goconst.MakeFromLiteral("\"HOST_OS_VERSION\"", token.STRING, 0)),
		"ENV_MATRIX_ARCH":         reflect.ValueOf(goconst.MakeFromLiteral("\"MATRIX_ARCH\"", token.STRING, 0)),
		"ENV_MATRIX_KERNEL":       reflect.ValueOf(goconst.MakeFromLiteral("\"MATRIX_KERNEL\"", token.STRING, 0)),
		"ENV_MATRIX_LIBC":         reflect.ValueOf(goconst.MakeFromLiteral("\"MATRIX_LIBC\"", token.STRING, 0)),
		"ENV_TIME_DAY":            reflect.ValueOf(goconst.MakeFromLiteral("\"TIME_DAY\"", token.STRING, 0)),
		"ENV_TIME_HOUR":           reflect.ValueOf(goconst.MakeFromLiteral("\"TIME_HOUR\"", token.STRING, 0)),
		"ENV_TIME_MINUTE":         reflect.ValueOf(goconst.MakeFromLiteral("\"TIME_MINUTE\"", token.STRING, 0)),
		"ENV_TIME_MONTH":          reflect.ValueOf(goconst.MakeFromLiteral("\"TIME_MONTH\"", token.STRING, 0)),
		"ENV_TIME_SECOND":         reflect.ValueOf(goconst.MakeFromLiteral("\"TIME_SECOND\"", token.STRING, 0)),
		"ENV_TIME_YEAR":           reflect.ValueOf(goconst.MakeFromLiteral("\"TIME_YEAR\"", token.STRING, 0)),
		"GetAlpineArch":           reflect.ValueOf(constant.GetAlpineArch),
		"GetAlpineTripleName":     reflect.ValueOf(constant.GetAlpineTripleName),
		"GetAppleArch":            reflect.ValueOf(constant.GetAppleArch),
		"GetAppleTripleName":      reflect.ValueOf(constant.GetAppleTripleName),
		"GetArch":                 reflect.ValueOf(constant.GetArch),
		"GetDebianArch":           reflect.ValueOf(constant.GetDebianArch),
		"GetDebianTripleName":     reflect.ValueOf(constant.GetDebianTripleName),
		"GetDockerArch":           reflect.ValueOf(constant.GetDockerArch),
		"GetDockerArchVariant":    reflect.ValueOf(constant.GetDockerArchVariant),
		"GetDockerHubArch":        reflect.ValueOf(constant.GetDockerHubArch),
		"GetDockerOS":             reflect.ValueOf(constant.GetDockerOS),
		"GetGNUArch":              reflect.ValueOf(constant.GetGNUArch),
		"GetGNUTripleName":        reflect.ValueOf(constant.GetGNUTripleName),
		"GetGolangArch":           reflect.ValueOf(constant.GetGolangArch),
		"GetGolangOS":             reflect.ValueOf(constant.GetGolangOS),
		"GetLLVMArch":             reflect.ValueOf(constant.GetLLVMArch),
		"GetOciArch":              reflect.ValueOf(constant.GetOciArch),
		"GetOciArchVariant":       reflect.ValueOf(constant.GetOciArchVariant),
		"GetOciOS":                reflect.ValueOf(constant.GetOciOS),
		"GetQemuArch":             reflect.ValueOf(constant.GetQemuArch),
		"GetRustArch":             reflect.ValueOf(constant.GetRustArch),
		"GetZigArch":              reflect.ValueOf(constant.GetZigArch),
		"KERNEL_AIX":              reflect.ValueOf(goconst.MakeFromLiteral("\"aix\"", token.STRING, 0)),
		"KERNEL_ANDROID":          reflect.ValueOf(goconst.MakeFromLiteral("\"android\"", token.STRING, 0)),
		"KERNEL_DARWIN":           reflect.ValueOf(goconst.MakeFromLiteral("\"darwin\"", token.STRING, 0)),
		"KERNEL_FREEBSD":          reflect.ValueOf(goconst.MakeFromLiteral("\"freebsd\"", token.STRING, 0)),
		"KERNEL_ILLUMOS":          reflect.ValueOf(goconst.MakeFromLiteral("\"illumos\"", token.STRING, 0)),
		"KERNEL_IOS":              reflect.ValueOf(goconst.MakeFromLiteral("\"ios\"", token.STRING, 0)),
		"KERNEL_JAVASCRIPT":       reflect.ValueOf(goconst.MakeFromLiteral("\"js\"", token.STRING, 0)),
		"KERNEL_LINUX":            reflect.ValueOf(goconst.MakeFromLiteral("\"linux\"", token.STRING, 0)),
		"KERNEL_NETBSD":           reflect.ValueOf(goconst.MakeFromLiteral("\"netbsd\"", token.STRING, 0)),
		"KERNEL_OPENBSD":          reflect.ValueOf(goconst.MakeFromLiteral("\"openbsd\"", token.STRING, 0)),
		"KERNEL_PLAN9":            reflect.ValueOf(goconst.MakeFromLiteral("\"plan9\"", token.STRING, 0)),
		"KERNEL_SOLARIS":          reflect.ValueOf(goconst.MakeFromLiteral("\"solaris\"", token.STRING, 0)),
		"KERNEL_WINDOWS":          reflect.ValueOf(goconst.MakeFromLiteral("\"windows\"", token.STRING, 0)),
		"LIBC_GLIBC":              reflect.ValueOf(goconst.MakeFromLiteral("\"glibc\"", token.STRING, 0)),
		"LIBC_MSVC":               reflect.ValueOf(goconst.MakeFromLiteral("\"msvc\"", token.STRING, 0)),
		"LIBC_MUSL":               reflect.ValueOf(goconst.MakeFromLiteral("\"musl\"", token.STRING, 0)),
		"OS_ALPINE":               reflect.ValueOf(goconst.MakeFromLiteral("\"alpine\"", token.STRING, 0)),
		"OS_DEBIAN":               reflect.ValueOf(goconst.MakeFromLiteral("\"debian\"", token.STRING, 0)),
		"OS_MACOS":                reflect.ValueOf(goconst.MakeFromLiteral("\"macos\"", token.STRING, 0)),
		"OS_UBUNTU":               reflect.ValueOf(goconst.MakeFromLiteral("\"ubuntu\"", token.STRING, 0)),
		"OS_WINDOWS":              reflect.ValueOf(goconst.MakeFromLiteral("\"windows\"", token.STRING, 0)),
		"PM_APK":                  reflect.ValueOf(goconst.MakeFromLiteral("\"apk\"", token.STRING, 0)),
		"PM_APT":                  reflect.ValueOf(goconst.MakeFromLiteral("\"apt\"", token.STRING, 0)),
		"PM_BREW":                 reflect.ValueOf(goconst.MakeFromLiteral("\"brew\"", token.STRING, 0)),
		"PM_DNF":                  reflect.ValueOf(goconst.MakeFromLiteral("\"dnf\"", token.STRING, 0)),
		"PM_NIX":                  reflect.ValueOf(goconst.MakeFromLiteral("\"nix\"", token.STRING, 0)),
		"PM_YUM":                  reflect.ValueOf(goconst.MakeFromLiteral("\"yum\"", token.STRING, 0)),

		// type definitions
		"ArchMappingValues": reflect.ValueOf((*constant.ArchMappingValues)(nil)),
	}
}
