// Code generated by scriggo command. DO NOT EDIT.

package internal

import (
	bufio "bufio"
	bytes "bytes"
	context "context"
	crypto "crypto"
	aes "crypto/aes"
	cipher "crypto/cipher"
	des "crypto/des"
	dsa "crypto/dsa"
	ecdsa "crypto/ecdsa"
	elliptic "crypto/elliptic"
	hmac "crypto/hmac"
	md5 "crypto/md5"
	rand "crypto/rand"
	rc4 "crypto/rc4"
	rsa "crypto/rsa"
	sha1 "crypto/sha1"
	sha256 "crypto/sha256"
	sha512 "crypto/sha512"
	subtle "crypto/subtle"
	tls "crypto/tls"
	x509 "crypto/x509"
	pkix "crypto/x509/pkix"
	encoding "encoding"
	asn1 "encoding/asn1"
	base32 "encoding/base32"
	base64 "encoding/base64"
	binary "encoding/binary"
	csv "encoding/csv"
	hex "encoding/hex"
	json "encoding/json"
	pem "encoding/pem"
	xml "encoding/xml"
	errors "errors"
	fmt "fmt"
	hash "hash"
	crc32 "hash/crc32"
	crc64 "hash/crc64"
	maphash "hash/maphash"
	html "html"
	template "html/template"
	image "image"
	color "image/color"
	palette "image/color/palette"
	draw "image/draw"
	gif "image/gif"
	jpeg "image/jpeg"
	png "image/png"
	suffixarray "index/suffixarray"
	io "io"
	fs "io/fs"
	math "math"
	big "math/big"
	bits "math/bits"
	cmplx "math/cmplx"
	rand_2 "math/rand"
	mime "mime"
	multipart "mime/multipart"
	quotedprintable "mime/quotedprintable"
	net "net"
	http "net/http"
	mail "net/mail"
	netip "net/netip"
	rpc "net/rpc"
	jsonrpc "net/rpc/jsonrpc"
	smtp "net/smtp"
	textproto "net/textproto"
	url "net/url"
	os "os"
	exec "os/exec"
	signal "os/signal"
	user "os/user"
	path "path"
	filepath "path/filepath"
	reflect "reflect"
	regexp "regexp"
	syntax "regexp/syntax"
	sort "sort"
	strconv "strconv"
	strings "strings"
	sync "sync"
	atomic "sync/atomic"
	scanner "text/scanner"
	tabwriter "text/tabwriter"
	time "time"
	_ "time/tzdata"
	unicode "unicode"
	utf16 "unicode/utf16"
	utf8 "unicode/utf8"
	rs "arhat.dev/rs"
	yaml "gopkg.in/yaml.v3"
	fshelper "arhat.dev/pkg/fshelper"
	yamlhelper "arhat.dev/pkg/yamlhelper"
	sha256helper "arhat.dev/pkg/sha256helper"
	archconst "arhat.dev/pkg/archconst"
	dukkha "arhat.dev/dukkha/pkg/dukkha"
	renderer "arhat.dev/dukkha/pkg/renderer"
	cache "arhat.dev/dukkha/pkg/cache"
	tools "arhat.dev/dukkha/pkg/tools"
	constant "arhat.dev/dukkha/pkg/constant"
)

import "github.com/open2b/scriggo/native"

func init() {
	NativePackages = make(native.Packages, 98)
	var decs native.Declarations
	// "arhat.dev/dukkha/pkg/cache"
	decs = make(native.Declarations, 8)
	decs["Cache"] = reflect.TypeOf((*cache.Cache)(nil)).Elem()
	decs["IdentifiableObject"] = reflect.TypeOf((*cache.IdentifiableObject)(nil)).Elem()
	decs["IdentifiableString"] = reflect.TypeOf((*cache.IdentifiableString)(nil)).Elem()
	decs["LocalCacheRefreshFunc"] = reflect.TypeOf((*cache.LocalCacheRefreshFunc)(nil)).Elem()
	decs["NewCache"] = cache.NewCache
	decs["NewTwoTierCache"] = cache.NewTwoTierCache
	decs["RemoteCacheRefreshFunc"] = reflect.TypeOf((*cache.RemoteCacheRefreshFunc)(nil)).Elem()
	decs["TwoTierCache"] = reflect.TypeOf((*cache.TwoTierCache)(nil)).Elem()
	NativePackages["arhat.dev/dukkha/pkg/cache"] = native.Package{
		Name:         "cache",
		Declarations: decs,
	}
	// "arhat.dev/dukkha/pkg/constant"
	decs = make(native.Declarations, 132)
	decs["ArchiveFormat_Tar"] = native.UntypedStringConst("tar")
	decs["ArchiveFormat_Zip"] = native.UntypedStringConst("zip")
	decs["CompressionMethod_Bzip2"] = native.UntypedStringConst("bzip2")
	decs["CompressionMethod_DEFLATE"] = native.UntypedStringConst("deflate")
	decs["CompressionMethod_Gzip"] = native.UntypedStringConst("gzip")
	decs["CompressionMethod_LZMA"] = native.UntypedStringConst("lzma")
	decs["CompressionMethod_XZ"] = native.UntypedStringConst("xz")
	decs["CompressionMethod_ZSTD"] = native.UntypedStringConst("zstd")
	decs["CrossPlatform"] = constant.CrossPlatform
	decs["DUKKHA_TOOL_CMD"] = native.UntypedStringConst("DUKKHA_TOOL_CMD")
	decs["DefaultCacheDir"] = native.UntypedStringConst(".dukkha/cache")
	decs["EnvName_DUKKHA_CACHE_DIR"] = native.UntypedStringConst("DUKKHA_CACHE_DIR")
	decs["EnvName_DUKKHA_WORKDIR"] = native.UntypedStringConst("DUKKHA_WORKDIR")
	decs["EnvName_GIT_BRANCH"] = native.UntypedStringConst("GIT_BRANCH")
	decs["EnvName_GIT_COMMIT"] = native.UntypedStringConst("GIT_COMMIT")
	decs["EnvName_GIT_DEFAULT_BRANCH"] = native.UntypedStringConst("GIT_DEFAULT_BRANCH")
	decs["EnvName_GIT_TAG"] = native.UntypedStringConst("GIT_TAG")
	decs["EnvName_GIT_WORKTREE_CLEAN"] = native.UntypedStringConst("GIT_WORKTREE_CLEAN")
	decs["EnvName_HOST_ARCH"] = native.UntypedStringConst("HOST_ARCH")
	decs["EnvName_HOST_ARCH_SIMPLE"] = native.UntypedStringConst("HOST_ARCH_SIMPLE")
	decs["EnvName_HOST_KERNEL"] = native.UntypedStringConst("HOST_KERNEL")
	decs["EnvName_HOST_KERNEL_VERSION"] = native.UntypedStringConst("HOST_KERNEL_VERSION")
	decs["EnvName_HOST_OS"] = native.UntypedStringConst("HOST_OS")
	decs["EnvName_HOST_OS_VERSION"] = native.UntypedStringConst("HOST_OS_VERSION")
	decs["EnvName_MATRIX_ARCH"] = native.UntypedStringConst("MATRIX_ARCH")
	decs["EnvName_MATRIX_ARCH_SIMPLE"] = native.UntypedStringConst("MATRIX_ARCH_SIMPLE")
	decs["EnvName_MATRIX_KERNEL"] = native.UntypedStringConst("MATRIX_KERNEL")
	decs["EnvName_MATRIX_LIBC"] = native.UntypedStringConst("MATRIX_LIBC")
	decs["EnvName_TIME_DAY"] = native.UntypedStringConst("TIME_DAY")
	decs["EnvName_TIME_HOUR"] = native.UntypedStringConst("TIME_HOUR")
	decs["EnvName_TIME_MINUTE"] = native.UntypedStringConst("TIME_MINUTE")
	decs["EnvName_TIME_MONTH"] = native.UntypedStringConst("TIME_MONTH")
	decs["EnvName_TIME_SECOND"] = native.UntypedStringConst("TIME_SECOND")
	decs["EnvName_TIME_YEAR"] = native.UntypedStringConst("TIME_YEAR")
	decs["EnvName_TIME_ZONE"] = native.UntypedStringConst("TIME_ZONE")
	decs["EnvName_TIME_ZONE_OFFSET"] = native.UntypedStringConst("TIME_ZONE_OFFSET")
	decs["GetAlpineArch"] = constant.GetAlpineArch
	decs["GetAlpineTripleName"] = constant.GetAlpineTripleName
	decs["GetAppleArch"] = constant.GetAppleArch
	decs["GetAppleTripleName"] = constant.GetAppleTripleName
	decs["GetArch"] = constant.GetArch
	decs["GetDebianArch"] = constant.GetDebianArch
	decs["GetDebianTripleName"] = constant.GetDebianTripleName
	decs["GetDockerArch"] = constant.GetDockerArch
	decs["GetDockerArchVariant"] = constant.GetDockerArchVariant
	decs["GetDockerHubArch"] = constant.GetDockerHubArch
	decs["GetDockerOS"] = constant.GetDockerOS
	decs["GetGNUArch"] = constant.GetGNUArch
	decs["GetGNUTripleName"] = constant.GetGNUTripleName
	decs["GetGlobalEnvIDByName"] = constant.GetGlobalEnvIDByName
	decs["GetGolangArch"] = constant.GetGolangArch
	decs["GetGolangOS"] = constant.GetGolangOS
	decs["GetLLVMArch"] = constant.GetLLVMArch
	decs["GetLLVMTripleName"] = constant.GetLLVMTripleName
	decs["GetOciArch"] = constant.GetOciArch
	decs["GetOciArchVariant"] = constant.GetOciArchVariant
	decs["GetOciOS"] = constant.GetOciOS
	decs["GetQemuArch"] = constant.GetQemuArch
	decs["GetRustArch"] = constant.GetRustArch
	decs["GetZigArch"] = constant.GetZigArch
	decs["GlobalEnv"] = reflect.TypeOf((*constant.GlobalEnv)(nil)).Elem()
	decs["GlobalEnv_Count"] = constant.GlobalEnv_Count
	decs["GlobalEnv_DUKKHA_CACHE_DIR"] = constant.GlobalEnv_DUKKHA_CACHE_DIR
	decs["GlobalEnv_DUKKHA_WORKDIR"] = constant.GlobalEnv_DUKKHA_WORKDIR
	decs["GlobalEnv_GIT_BRANCH"] = constant.GlobalEnv_GIT_BRANCH
	decs["GlobalEnv_GIT_COMMIT"] = constant.GlobalEnv_GIT_COMMIT
	decs["GlobalEnv_GIT_DEFAULT_BRANCH"] = constant.GlobalEnv_GIT_DEFAULT_BRANCH
	decs["GlobalEnv_GIT_TAG"] = constant.GlobalEnv_GIT_TAG
	decs["GlobalEnv_GIT_WORKTREE_CLEAN"] = constant.GlobalEnv_GIT_WORKTREE_CLEAN
	decs["GlobalEnv_HOST_ARCH"] = constant.GlobalEnv_HOST_ARCH
	decs["GlobalEnv_HOST_ARCH_SIMPLE"] = constant.GlobalEnv_HOST_ARCH_SIMPLE
	decs["GlobalEnv_HOST_KERNEL"] = constant.GlobalEnv_HOST_KERNEL
	decs["GlobalEnv_HOST_KERNEL_VERSION"] = constant.GlobalEnv_HOST_KERNEL_VERSION
	decs["GlobalEnv_HOST_OS"] = constant.GlobalEnv_HOST_OS
	decs["GlobalEnv_HOST_OS_VERSION"] = constant.GlobalEnv_HOST_OS_VERSION
	decs["GlobalEnv_TIME_DAY"] = constant.GlobalEnv_TIME_DAY
	decs["GlobalEnv_TIME_HOUR"] = constant.GlobalEnv_TIME_HOUR
	decs["GlobalEnv_TIME_MINUTE"] = constant.GlobalEnv_TIME_MINUTE
	decs["GlobalEnv_TIME_MONTH"] = constant.GlobalEnv_TIME_MONTH
	decs["GlobalEnv_TIME_SECOND"] = constant.GlobalEnv_TIME_SECOND
	decs["GlobalEnv_TIME_YEAR"] = constant.GlobalEnv_TIME_YEAR
	decs["GlobalEnv_TIME_ZONE"] = constant.GlobalEnv_TIME_ZONE
	decs["GlobalEnv_TIME_ZONE_OFFSET"] = constant.GlobalEnv_TIME_ZONE_OFFSET
	decs["HardFloatArch"] = constant.HardFloatArch
	decs["KERNEL_Aix"] = native.UntypedStringConst("aix")
	decs["KERNEL_Android"] = native.UntypedStringConst("android")
	decs["KERNEL_Darwin"] = native.UntypedStringConst("darwin")
	decs["KERNEL_FreeBSD"] = native.UntypedStringConst("freebsd")
	decs["KERNEL_Illumos"] = native.UntypedStringConst("illumos")
	decs["KERNEL_JavaScript"] = native.UntypedStringConst("js")
	decs["KERNEL_Linux"] = native.UntypedStringConst("linux")
	decs["KERNEL_NetBSD"] = native.UntypedStringConst("netbsd")
	decs["KERNEL_OpenBSD"] = native.UntypedStringConst("openbsd")
	decs["KERNEL_Plan9"] = native.UntypedStringConst("plan9")
	decs["KERNEL_Solaris"] = native.UntypedStringConst("solaris")
	decs["KERNEL_Windows"] = native.UntypedStringConst("windows")
	decs["KERNEL_iOS"] = native.UntypedStringConst("ios")
	decs["LIBC_GNU"] = native.UntypedStringConst("gnu")
	decs["LIBC_MSVC"] = native.UntypedStringConst("msvc")
	decs["LIBC_MUSL"] = native.UntypedStringConst("musl")
	decs["PM_APK"] = native.UntypedStringConst("apk")
	decs["PM_APT"] = native.UntypedStringConst("apt")
	decs["PM_BREW"] = native.UntypedStringConst("brew")
	decs["PM_DNF"] = native.UntypedStringConst("dnf")
	decs["PM_NIX"] = native.UntypedStringConst("nix")
	decs["PM_YUM"] = native.UntypedStringConst("yum")
	decs["Platform_Alpine"] = native.UntypedStringConst("alpine")
	decs["Platform_Debian"] = native.UntypedStringConst("debian")
	decs["Platform_Docker"] = native.UntypedStringConst("docker")
	decs["Platform_DockerHub"] = native.UntypedStringConst("dockerhub")
	decs["Platform_GNU"] = native.UntypedStringConst("gnu")
	decs["Platform_Golang"] = native.UntypedStringConst("golang")
	decs["Platform_LLVM"] = native.UntypedStringConst("llvm")
	decs["Platform_MacOS"] = native.UntypedStringConst("macos")
	decs["Platform_OCI"] = native.UntypedStringConst("oci")
	decs["Platform_QEMU"] = native.UntypedStringConst("qemu")
	decs["Platform_Rust"] = native.UntypedStringConst("rust")
	decs["Platform_Ubuntu"] = native.UntypedStringConst("ubuntu")
	decs["Platform_WatchOS"] = native.UntypedStringConst("watchos")
	decs["Platform_WindowsMINGW"] = native.UntypedStringConst("windows_mingw")
	decs["Platform_WindowsNT"] = native.UntypedStringConst("windows_nt")
	decs["Platform_Zig"] = native.UntypedStringConst("zig")
	decs["Platform_iOS"] = native.UntypedStringConst("ios")
	decs["SimpleArch"] = constant.SimpleArch
	decs["SoftFloatArch"] = constant.SoftFloatArch
	decs["ZipCompressionMethod"] = reflect.TypeOf((*constant.ZipCompressionMethod)(nil)).Elem()
	decs["ZipCompressionMethod_BZIP2"] = constant.ZipCompressionMethod_BZIP2
	decs["ZipCompressionMethod_Deflate"] = constant.ZipCompressionMethod_Deflate
	decs["ZipCompressionMethod_LZMA"] = constant.ZipCompressionMethod_LZMA
	decs["ZipCompressionMethod_Store"] = constant.ZipCompressionMethod_Store
	decs["ZipCompressionMethod_XZ"] = constant.ZipCompressionMethod_XZ
	decs["ZipCompressionMethod_ZSTD"] = constant.ZipCompressionMethod_ZSTD
	NativePackages["arhat.dev/dukkha/pkg/constant"] = native.Package{
		Name:         "constant",
		Declarations: decs,
	}
	// "arhat.dev/dukkha/pkg/dukkha"
	decs = make(native.Declarations, 68)
	decs["ConfigResolvingContext"] = reflect.TypeOf((*dukkha.ConfigResolvingContext)(nil)).Elem()
	decs["Context"] = reflect.TypeOf((*dukkha.Context)(nil)).Elem()
	decs["CreateTaskExecOptions"] = dukkha.CreateTaskExecOptions
	decs["Env"] = reflect.TypeOf((*dukkha.Env)(nil)).Elem()
	decs["EnvEntry"] = reflect.TypeOf((*dukkha.EnvEntry)(nil)).Elem()
	decs["EnvValues"] = reflect.TypeOf((*dukkha.EnvValues)(nil)).Elem()
	decs["ExecSpecGetFunc"] = reflect.TypeOf((*dukkha.ExecSpecGetFunc)(nil)).Elem()
	decs["ExecValues"] = reflect.TypeOf((*dukkha.ExecValues)(nil)).Elem()
	decs["GlobalEnvSet"] = reflect.TypeOf((*dukkha.GlobalEnvSet)(nil)).Elem()
	decs["GlobalEnvValues"] = reflect.TypeOf((*dukkha.GlobalEnvValues)(nil)).Elem()
	decs["GlobalInterfaceTypeHandler"] = &dukkha.GlobalInterfaceTypeHandler
	decs["IfaceFactory"] = reflect.TypeOf((*dukkha.IfaceFactory)(nil)).Elem()
	decs["IfaceFactoryFunc"] = reflect.TypeOf((*dukkha.IfaceFactoryFunc)(nil)).Elem()
	decs["IfaceFactoryImpl"] = reflect.TypeOf((*dukkha.IfaceFactoryImpl)(nil)).Elem()
	decs["IfaceTypeKey"] = reflect.TypeOf((*dukkha.IfaceTypeKey)(nil)).Elem()
	decs["NewConfigResolvingContext"] = dukkha.NewConfigResolvingContext
	decs["RegisterRenderer"] = dukkha.RegisterRenderer
	decs["RegisterTask"] = dukkha.RegisterTask
	decs["RegisterTool"] = dukkha.RegisterTool
	decs["Renderer"] = reflect.TypeOf((*dukkha.Renderer)(nil)).Elem()
	decs["RendererAttribute"] = reflect.TypeOf((*dukkha.RendererAttribute)(nil)).Elem()
	decs["RendererCreateFunc"] = reflect.TypeOf((*dukkha.RendererCreateFunc)(nil)).Elem()
	decs["RendererManager"] = reflect.TypeOf((*dukkha.RendererManager)(nil)).Elem()
	decs["RenderingContext"] = reflect.TypeOf((*dukkha.RenderingContext)(nil)).Elem()
	decs["ReplaceEntries"] = reflect.TypeOf((*dukkha.ReplaceEntries)(nil)).Elem()
	decs["ReplaceEntry"] = reflect.TypeOf((*dukkha.ReplaceEntry)(nil)).Elem()
	decs["Resolvable"] = reflect.TypeOf((*dukkha.Resolvable)(nil)).Elem()
	decs["ResolveEnv"] = dukkha.ResolveEnv
	decs["RunTaskOrRunCmd"] = reflect.TypeOf((*dukkha.RunTaskOrRunCmd)(nil)).Elem()
	decs["RuntimeOptions"] = reflect.TypeOf((*dukkha.RuntimeOptions)(nil)).Elem()
	decs["Shell"] = reflect.TypeOf((*dukkha.Shell)(nil)).Elem()
	decs["ShellManager"] = reflect.TypeOf((*dukkha.ShellManager)(nil)).Elem()
	decs["ShellUser"] = reflect.TypeOf((*dukkha.ShellUser)(nil)).Elem()
	decs["StageAfter"] = dukkha.StageAfter
	decs["StageAfterFailure"] = dukkha.StageAfterFailure
	decs["StageAfterMatrix"] = dukkha.StageAfterMatrix
	decs["StageAfterMatrixFailure"] = dukkha.StageAfterMatrixFailure
	decs["StageAfterMatrixSuccess"] = dukkha.StageAfterMatrixSuccess
	decs["StageAfterSuccess"] = dukkha.StageAfterSuccess
	decs["StageBefore"] = dukkha.StageBefore
	decs["StageBeforeMatrix"] = dukkha.StageBeforeMatrix
	decs["Task"] = reflect.TypeOf((*dukkha.Task)(nil)).Elem()
	decs["TaskCreateFunc"] = reflect.TypeOf((*dukkha.TaskCreateFunc)(nil)).Elem()
	decs["TaskExecCanceled"] = dukkha.TaskExecCanceled
	decs["TaskExecContext"] = reflect.TypeOf((*dukkha.TaskExecContext)(nil)).Elem()
	decs["TaskExecFailed"] = dukkha.TaskExecFailed
	decs["TaskExecNotStarted"] = dukkha.TaskExecNotStarted
	decs["TaskExecOptions"] = reflect.TypeOf((*dukkha.TaskExecOptions)(nil)).Elem()
	decs["TaskExecPending"] = dukkha.TaskExecPending
	decs["TaskExecSpec"] = reflect.TypeOf((*dukkha.TaskExecSpec)(nil)).Elem()
	decs["TaskExecStage"] = reflect.TypeOf((*dukkha.TaskExecStage)(nil)).Elem()
	decs["TaskExecState"] = reflect.TypeOf((*dukkha.TaskExecState)(nil)).Elem()
	decs["TaskExecSucceeded"] = dukkha.TaskExecSucceeded
	decs["TaskExecWorking"] = dukkha.TaskExecWorking
	decs["TaskKey"] = reflect.TypeOf((*dukkha.TaskKey)(nil)).Elem()
	decs["TaskKind"] = reflect.TypeOf((*dukkha.TaskKind)(nil)).Elem()
	decs["TaskManager"] = reflect.TypeOf((*dukkha.TaskManager)(nil)).Elem()
	decs["TaskMatrixExecOptions"] = reflect.TypeOf((*dukkha.TaskMatrixExecOptions)(nil)).Elem()
	decs["TaskName"] = reflect.TypeOf((*dukkha.TaskName)(nil)).Elem()
	decs["TaskUser"] = reflect.TypeOf((*dukkha.TaskUser)(nil)).Elem()
	decs["Tool"] = reflect.TypeOf((*dukkha.Tool)(nil)).Elem()
	decs["ToolCreateFunc"] = reflect.TypeOf((*dukkha.ToolCreateFunc)(nil)).Elem()
	decs["ToolKey"] = reflect.TypeOf((*dukkha.ToolKey)(nil)).Elem()
	decs["ToolKind"] = reflect.TypeOf((*dukkha.ToolKind)(nil)).Elem()
	decs["ToolManager"] = reflect.TypeOf((*dukkha.ToolManager)(nil)).Elem()
	decs["ToolName"] = reflect.TypeOf((*dukkha.ToolName)(nil)).Elem()
	decs["ToolUser"] = reflect.TypeOf((*dukkha.ToolUser)(nil)).Elem()
	decs["TypeManager"] = reflect.TypeOf((*dukkha.TypeManager)(nil)).Elem()
	NativePackages["arhat.dev/dukkha/pkg/dukkha"] = native.Package{
		Name:         "dukkha",
		Declarations: decs,
	}
	// "arhat.dev/dukkha/pkg/renderer"
	decs = make(native.Declarations, 10)
	decs["AttrAllowExpired"] = native.UntypedStringConst("allow-expired")
	decs["AttrCacheData"] = native.UntypedStringConst("cache-data")
	decs["AttrCachedFile"] = native.UntypedStringConst("cached-file")
	decs["AttrUseSpec"] = native.UntypedStringConst("use-spec")
	decs["BaseInMemCachedRenderer"] = reflect.TypeOf((*renderer.BaseInMemCachedRenderer)(nil)).Elem()
	decs["BaseRenderer"] = reflect.TypeOf((*renderer.BaseRenderer)(nil)).Elem()
	decs["BaseTwoTierCachedRenderer"] = reflect.TypeOf((*renderer.BaseTwoTierCachedRenderer)(nil)).Elem()
	decs["CacheConfig"] = reflect.TypeOf((*renderer.CacheConfig)(nil)).Elem()
	decs["HandleRenderingRequestWithRemoteFetch"] = renderer.HandleRenderingRequestWithRemoteFetch
	decs["ResolveInputSpec"] = renderer.ResolveInputSpec
	NativePackages["arhat.dev/dukkha/pkg/renderer"] = native.Package{
		Name:         "renderer",
		Declarations: decs,
	}
	// "arhat.dev/dukkha/pkg/tools"
	decs = make(native.Declarations, 12)
	decs["Action"] = reflect.TypeOf((*tools.Action)(nil)).Elem()
	decs["Actions"] = reflect.TypeOf((*tools.Actions)(nil)).Elem()
	decs["BaseTask"] = reflect.TypeOf((*tools.BaseTask)(nil)).Elem()
	decs["BaseTool"] = reflect.TypeOf((*tools.BaseTool)(nil)).Elem()
	decs["CreateTaskMatrixContext"] = tools.CreateTaskMatrixContext
	decs["GetScriptCache"] = tools.GetScriptCache
	decs["ResolveActions"] = tools.ResolveActions
	decs["RunTask"] = tools.RunTask
	decs["ShellTool"] = reflect.TypeOf((*tools.ShellTool)(nil)).Elem()
	decs["TaskExecRequest"] = reflect.TypeOf((*tools.TaskExecRequest)(nil)).Elem()
	decs["TaskHooks"] = reflect.TypeOf((*tools.TaskHooks)(nil)).Elem()
	decs["TaskReference"] = reflect.TypeOf((*tools.TaskReference)(nil)).Elem()
	NativePackages["arhat.dev/dukkha/pkg/tools"] = native.Package{
		Name:         "tools",
		Declarations: decs,
	}
	// "arhat.dev/pkg/archconst"
	decs = make(native.Declarations, 39)
	decs["ARCH_AMD64"] = native.UntypedStringConst("amd64")
	decs["ARCH_AMD64_V1"] = native.UntypedStringConst("amd64v1")
	decs["ARCH_AMD64_V2"] = native.UntypedStringConst("amd64v2")
	decs["ARCH_AMD64_V3"] = native.UntypedStringConst("amd64v3")
	decs["ARCH_AMD64_V4"] = native.UntypedStringConst("amd64v4")
	decs["ARCH_ARM"] = native.UntypedStringConst("arm")
	decs["ARCH_ARM64"] = native.UntypedStringConst("arm64")
	decs["ARCH_ARM64_V8"] = native.UntypedStringConst("arm64v8")
	decs["ARCH_ARM64_V9"] = native.UntypedStringConst("arm64v9")
	decs["ARCH_ARM_V5"] = native.UntypedStringConst("armv5")
	decs["ARCH_ARM_V6"] = native.UntypedStringConst("armv6")
	decs["ARCH_ARM_V7"] = native.UntypedStringConst("armv7")
	decs["ARCH_IA64"] = native.UntypedStringConst("ia64")
	decs["ARCH_MIPS"] = native.UntypedStringConst("mips")
	decs["ARCH_MIPS64"] = native.UntypedStringConst("mips64")
	decs["ARCH_MIPS64_LE"] = native.UntypedStringConst("mips64le")
	decs["ARCH_MIPS64_LE_SF"] = native.UntypedStringConst("mips64lesf")
	decs["ARCH_MIPS64_SF"] = native.UntypedStringConst("mips64sf")
	decs["ARCH_MIPS_LE"] = native.UntypedStringConst("mipsle")
	decs["ARCH_MIPS_LE_SF"] = native.UntypedStringConst("mipslesf")
	decs["ARCH_MIPS_SF"] = native.UntypedStringConst("mipssf")
	decs["ARCH_PPC"] = native.UntypedStringConst("ppc")
	decs["ARCH_PPC64"] = native.UntypedStringConst("ppc64")
	decs["ARCH_PPC64_LE"] = native.UntypedStringConst("ppc64le")
	decs["ARCH_PPC64_LE_V8"] = native.UntypedStringConst("ppc64lev8")
	decs["ARCH_PPC64_LE_V9"] = native.UntypedStringConst("ppc64lev9")
	decs["ARCH_PPC64_V8"] = native.UntypedStringConst("ppc64v8")
	decs["ARCH_PPC64_V9"] = native.UntypedStringConst("ppc64v9")
	decs["ARCH_PPC_LE"] = native.UntypedStringConst("ppcle")
	decs["ARCH_PPC_LE_SF"] = native.UntypedStringConst("ppclesf")
	decs["ARCH_PPC_SF"] = native.UntypedStringConst("ppcsf")
	decs["ARCH_RISCV64"] = native.UntypedStringConst("riscv64")
	decs["ARCH_S390X"] = native.UntypedStringConst("s390x")
	decs["ARCH_X86"] = native.UntypedStringConst("x86")
	decs["ARCH_X86_SF"] = native.UntypedStringConst("x86sf")
	decs["ArchValue"] = reflect.TypeOf((*archconst.ArchValue)(nil)).Elem()
	decs["Format"] = archconst.Format[string, byte, string]
	decs["Parse"] = archconst.Parse[byte, string]
	decs["Spec"] = reflect.TypeOf((*archconst.Spec)(nil)).Elem()
	NativePackages["arhat.dev/pkg/archconst"] = native.Package{
		Name:         "archconst",
		Declarations: decs,
	}
	// "arhat.dev/pkg/fshelper"
	decs = make(native.Declarations, 48)
	decs["CwdGetFunc"] = reflect.TypeOf((*fshelper.CwdGetFunc)(nil)).Elem()
	decs["FindOp"] = reflect.TypeOf((*fshelper.FindOp)(nil)).Elem()
	decs["FindOp_CheckCreationTime"] = fshelper.FindOp_CheckCreationTime
	decs["FindOp_CheckDepth"] = fshelper.FindOp_CheckDepth
	decs["FindOp_CheckGroup"] = fshelper.FindOp_CheckGroup
	decs["FindOp_CheckLastAccessTime"] = fshelper.FindOp_CheckLastAccessTime
	decs["FindOp_CheckLastContentUpdatedTime"] = fshelper.FindOp_CheckLastContentUpdatedTime
	decs["FindOp_CheckLastMetadataChangeTime"] = fshelper.FindOp_CheckLastMetadataChangeTime
	decs["FindOp_CheckName"] = fshelper.FindOp_CheckName
	decs["FindOp_CheckNameFollowSymlink"] = fshelper.FindOp_CheckNameFollowSymlink
	decs["FindOp_CheckNameIgnoreCase"] = fshelper.FindOp_CheckNameIgnoreCase
	decs["FindOp_CheckNameIgnoreCaseFollowSymlink"] = fshelper.FindOp_CheckNameIgnoreCaseFollowSymlink
	decs["FindOp_CheckPath"] = fshelper.FindOp_CheckPath
	decs["FindOp_CheckPathIgnoreCase"] = fshelper.FindOp_CheckPathIgnoreCase
	decs["FindOp_CheckPerm"] = fshelper.FindOp_CheckPerm
	decs["FindOp_CheckRegex"] = fshelper.FindOp_CheckRegex
	decs["FindOp_CheckRegexIgnoreCase"] = fshelper.FindOp_CheckRegexIgnoreCase
	decs["FindOp_CheckSize"] = fshelper.FindOp_CheckSize
	decs["FindOp_CheckTypeIsFile"] = fshelper.FindOp_CheckTypeIsFile
	decs["FindOp_CheckTypeNotFile"] = fshelper.FindOp_CheckTypeNotFile
	decs["FindOp_CheckUser"] = fshelper.FindOp_CheckUser
	decs["FindOp_CheckUserInvalid"] = fshelper.FindOp_CheckUserInvalid
	decs["FindOptions"] = reflect.TypeOf((*fshelper.FindOptions)(nil)).Elem()
	decs["NewOSFS"] = fshelper.NewOSFS
	decs["OSFS"] = reflect.TypeOf((*fshelper.OSFS)(nil)).Elem()
	decs["Op"] = reflect.TypeOf((*fshelper.Op)(nil)).Elem()
	decs["Op_Abs"] = fshelper.Op_Abs
	decs["Op_Chmod"] = fshelper.Op_Chmod
	decs["Op_Chown"] = fshelper.Op_Chown
	decs["Op_Chtimes"] = fshelper.Op_Chtimes
	decs["Op_Create"] = fshelper.Op_Create
	decs["Op_Lstat"] = fshelper.Op_Lstat
	decs["Op_Mkdir"] = fshelper.Op_Mkdir
	decs["Op_MkdirAll"] = fshelper.Op_MkdirAll
	decs["Op_Open"] = fshelper.Op_Open
	decs["Op_OpenFile"] = fshelper.Op_OpenFile
	decs["Op_ReadDir"] = fshelper.Op_ReadDir
	decs["Op_ReadFile"] = fshelper.Op_ReadFile
	decs["Op_Readlink"] = fshelper.Op_Readlink
	decs["Op_Remove"] = fshelper.Op_Remove
	decs["Op_RemoveAll"] = fshelper.Op_RemoveAll
	decs["Op_Rename"] = fshelper.Op_Rename
	decs["Op_Stat"] = fshelper.Op_Stat
	decs["Op_Sub"] = fshelper.Op_Sub
	decs["Op_Symlink"] = fshelper.Op_Symlink
	decs["Op_Unknown"] = fshelper.Op_Unknown
	decs["Op_WriteFile"] = fshelper.Op_WriteFile
	decs["Symlinkat"] = fshelper.Symlinkat
	NativePackages["arhat.dev/pkg/fshelper"] = native.Package{
		Name:         "fshelper",
		Declarations: decs,
	}
	// "arhat.dev/pkg/sha256helper"
	decs = make(native.Declarations, 1)
	decs["Sum"] = sha256helper.Sum
	NativePackages["arhat.dev/pkg/sha256helper"] = native.Package{
		Name:         "sha256helper",
		Declarations: decs,
	}
	// "arhat.dev/pkg/yamlhelper"
	decs = make(native.Declarations, 1)
	decs["ToYamlBytes"] = yamlhelper.ToYamlBytes
	NativePackages["arhat.dev/pkg/yamlhelper"] = native.Package{
		Name:         "yamlhelper",
		Declarations: decs,
	}
	// "arhat.dev/rs"
	decs = make(native.Declarations, 29)
	decs["AnyObject"] = reflect.TypeOf((*rs.AnyObject)(nil)).Elem()
	decs["AnyObjectMap"] = reflect.TypeOf((*rs.AnyObjectMap)(nil)).Elem()
	decs["BaseField"] = reflect.TypeOf((*rs.BaseField)(nil)).Elem()
	decs["ErrInterfaceTypeNotHandled"] = &rs.ErrInterfaceTypeNotHandled
	decs["Field"] = reflect.TypeOf((*rs.Field)(nil)).Elem()
	decs["InitRecursively"] = rs.InitRecursively
	decs["InitReflectValue"] = rs.InitReflectValue
	decs["InterfaceTypeHandleFunc"] = reflect.TypeOf((*rs.InterfaceTypeHandleFunc)(nil)).Elem()
	decs["InterfaceTypeHandler"] = reflect.TypeOf((*rs.InterfaceTypeHandler)(nil)).Elem()
	decs["JSONPatchSpec"] = reflect.TypeOf((*rs.JSONPatchSpec)(nil)).Elem()
	decs["MergeMap"] = rs.MergeMap
	decs["MergeSource"] = reflect.TypeOf((*rs.MergeSource)(nil)).Elem()
	decs["NormalizeRawData"] = rs.NormalizeRawData
	decs["Options"] = reflect.TypeOf((*rs.Options)(nil)).Elem()
	decs["ParseTypeHint"] = rs.ParseTypeHint
	decs["PatchSpec"] = reflect.TypeOf((*rs.PatchSpec)(nil)).Elem()
	decs["RenderingHandleFunc"] = reflect.TypeOf((*rs.RenderingHandleFunc)(nil)).Elem()
	decs["RenderingHandler"] = reflect.TypeOf((*rs.RenderingHandler)(nil)).Elem()
	decs["TagName"] = native.UntypedStringConst("rs")
	decs["TagNameRS"] = native.UntypedStringConst("rs")
	decs["TypeHint"] = reflect.TypeOf((*rs.TypeHint)(nil)).Elem()
	decs["TypeHintBool"] = reflect.TypeOf((*rs.TypeHintBool)(nil)).Elem()
	decs["TypeHintFloat"] = reflect.TypeOf((*rs.TypeHintFloat)(nil)).Elem()
	decs["TypeHintInt"] = reflect.TypeOf((*rs.TypeHintInt)(nil)).Elem()
	decs["TypeHintNone"] = reflect.TypeOf((*rs.TypeHintNone)(nil)).Elem()
	decs["TypeHintObject"] = reflect.TypeOf((*rs.TypeHintObject)(nil)).Elem()
	decs["TypeHintObjects"] = reflect.TypeOf((*rs.TypeHintObjects)(nil)).Elem()
	decs["TypeHintStr"] = reflect.TypeOf((*rs.TypeHintStr)(nil)).Elem()
	decs["UniqueList"] = rs.UniqueList
	NativePackages["arhat.dev/rs"] = native.Package{
		Name:         "rs",
		Declarations: decs,
	}
	// "bufio"
	decs = make(native.Declarations, 25)
	decs["ErrAdvanceTooFar"] = &bufio.ErrAdvanceTooFar
	decs["ErrBadReadCount"] = &bufio.ErrBadReadCount
	decs["ErrBufferFull"] = &bufio.ErrBufferFull
	decs["ErrFinalToken"] = &bufio.ErrFinalToken
	decs["ErrInvalidUnreadByte"] = &bufio.ErrInvalidUnreadByte
	decs["ErrInvalidUnreadRune"] = &bufio.ErrInvalidUnreadRune
	decs["ErrNegativeAdvance"] = &bufio.ErrNegativeAdvance
	decs["ErrNegativeCount"] = &bufio.ErrNegativeCount
	decs["ErrTooLong"] = &bufio.ErrTooLong
	decs["MaxScanTokenSize"] = native.UntypedNumericConst("65536")
	decs["NewReadWriter"] = bufio.NewReadWriter
	decs["NewReader"] = bufio.NewReader
	decs["NewReaderSize"] = bufio.NewReaderSize
	decs["NewScanner"] = bufio.NewScanner
	decs["NewWriter"] = bufio.NewWriter
	decs["NewWriterSize"] = bufio.NewWriterSize
	decs["ReadWriter"] = reflect.TypeOf((*bufio.ReadWriter)(nil)).Elem()
	decs["Reader"] = reflect.TypeOf((*bufio.Reader)(nil)).Elem()
	decs["ScanBytes"] = bufio.ScanBytes
	decs["ScanLines"] = bufio.ScanLines
	decs["ScanRunes"] = bufio.ScanRunes
	decs["ScanWords"] = bufio.ScanWords
	decs["Scanner"] = reflect.TypeOf((*bufio.Scanner)(nil)).Elem()
	decs["SplitFunc"] = reflect.TypeOf((*bufio.SplitFunc)(nil)).Elem()
	decs["Writer"] = reflect.TypeOf((*bufio.Writer)(nil)).Elem()
	NativePackages["bufio"] = native.Package{
		Name:         "bufio",
		Declarations: decs,
	}
	// "bytes"
	decs = make(native.Declarations, 55)
	decs["Buffer"] = reflect.TypeOf((*bytes.Buffer)(nil)).Elem()
	decs["Compare"] = bytes.Compare
	decs["Contains"] = bytes.Contains
	decs["ContainsAny"] = bytes.ContainsAny
	decs["ContainsRune"] = bytes.ContainsRune
	decs["Count"] = bytes.Count
	decs["Cut"] = bytes.Cut
	decs["Equal"] = bytes.Equal
	decs["EqualFold"] = bytes.EqualFold
	decs["ErrTooLarge"] = &bytes.ErrTooLarge
	decs["Fields"] = bytes.Fields
	decs["FieldsFunc"] = bytes.FieldsFunc
	decs["HasPrefix"] = bytes.HasPrefix
	decs["HasSuffix"] = bytes.HasSuffix
	decs["Index"] = bytes.Index
	decs["IndexAny"] = bytes.IndexAny
	decs["IndexByte"] = bytes.IndexByte
	decs["IndexFunc"] = bytes.IndexFunc
	decs["IndexRune"] = bytes.IndexRune
	decs["Join"] = bytes.Join
	decs["LastIndex"] = bytes.LastIndex
	decs["LastIndexAny"] = bytes.LastIndexAny
	decs["LastIndexByte"] = bytes.LastIndexByte
	decs["LastIndexFunc"] = bytes.LastIndexFunc
	decs["Map"] = bytes.Map
	decs["MinRead"] = native.UntypedNumericConst("512")
	decs["NewBuffer"] = bytes.NewBuffer
	decs["NewBufferString"] = bytes.NewBufferString
	decs["NewReader"] = bytes.NewReader
	decs["Reader"] = reflect.TypeOf((*bytes.Reader)(nil)).Elem()
	decs["Repeat"] = bytes.Repeat
	decs["Replace"] = bytes.Replace
	decs["ReplaceAll"] = bytes.ReplaceAll
	decs["Runes"] = bytes.Runes
	decs["Split"] = bytes.Split
	decs["SplitAfter"] = bytes.SplitAfter
	decs["SplitAfterN"] = bytes.SplitAfterN
	decs["SplitN"] = bytes.SplitN
	decs["Title"] = bytes.Title
	decs["ToLower"] = bytes.ToLower
	decs["ToLowerSpecial"] = bytes.ToLowerSpecial
	decs["ToTitle"] = bytes.ToTitle
	decs["ToTitleSpecial"] = bytes.ToTitleSpecial
	decs["ToUpper"] = bytes.ToUpper
	decs["ToUpperSpecial"] = bytes.ToUpperSpecial
	decs["ToValidUTF8"] = bytes.ToValidUTF8
	decs["Trim"] = bytes.Trim
	decs["TrimFunc"] = bytes.TrimFunc
	decs["TrimLeft"] = bytes.TrimLeft
	decs["TrimLeftFunc"] = bytes.TrimLeftFunc
	decs["TrimPrefix"] = bytes.TrimPrefix
	decs["TrimRight"] = bytes.TrimRight
	decs["TrimRightFunc"] = bytes.TrimRightFunc
	decs["TrimSpace"] = bytes.TrimSpace
	decs["TrimSuffix"] = bytes.TrimSuffix
	NativePackages["bytes"] = native.Package{
		Name:         "bytes",
		Declarations: decs,
	}
	// "context"
	decs = make(native.Declarations, 10)
	decs["Background"] = context.Background
	decs["CancelFunc"] = reflect.TypeOf((*context.CancelFunc)(nil)).Elem()
	decs["Canceled"] = &context.Canceled
	decs["Context"] = reflect.TypeOf((*context.Context)(nil)).Elem()
	decs["DeadlineExceeded"] = &context.DeadlineExceeded
	decs["TODO"] = context.TODO
	decs["WithCancel"] = context.WithCancel
	decs["WithDeadline"] = context.WithDeadline
	decs["WithTimeout"] = context.WithTimeout
	decs["WithValue"] = context.WithValue
	NativePackages["context"] = native.Package{
		Name:         "context",
		Declarations: decs,
	}
	// "crypto"
	decs = make(native.Declarations, 27)
	decs["BLAKE2b_256"] = crypto.BLAKE2b_256
	decs["BLAKE2b_384"] = crypto.BLAKE2b_384
	decs["BLAKE2b_512"] = crypto.BLAKE2b_512
	decs["BLAKE2s_256"] = crypto.BLAKE2s_256
	decs["Decrypter"] = reflect.TypeOf((*crypto.Decrypter)(nil)).Elem()
	decs["DecrypterOpts"] = reflect.TypeOf((*crypto.DecrypterOpts)(nil)).Elem()
	decs["Hash"] = reflect.TypeOf((*crypto.Hash)(nil)).Elem()
	decs["MD4"] = crypto.MD4
	decs["MD5"] = crypto.MD5
	decs["MD5SHA1"] = crypto.MD5SHA1
	decs["PrivateKey"] = reflect.TypeOf((*crypto.PrivateKey)(nil)).Elem()
	decs["PublicKey"] = reflect.TypeOf((*crypto.PublicKey)(nil)).Elem()
	decs["RIPEMD160"] = crypto.RIPEMD160
	decs["RegisterHash"] = crypto.RegisterHash
	decs["SHA1"] = crypto.SHA1
	decs["SHA224"] = crypto.SHA224
	decs["SHA256"] = crypto.SHA256
	decs["SHA384"] = crypto.SHA384
	decs["SHA3_224"] = crypto.SHA3_224
	decs["SHA3_256"] = crypto.SHA3_256
	decs["SHA3_384"] = crypto.SHA3_384
	decs["SHA3_512"] = crypto.SHA3_512
	decs["SHA512"] = crypto.SHA512
	decs["SHA512_224"] = crypto.SHA512_224
	decs["SHA512_256"] = crypto.SHA512_256
	decs["Signer"] = reflect.TypeOf((*crypto.Signer)(nil)).Elem()
	decs["SignerOpts"] = reflect.TypeOf((*crypto.SignerOpts)(nil)).Elem()
	NativePackages["crypto"] = native.Package{
		Name:         "crypto",
		Declarations: decs,
	}
	// "crypto/aes"
	decs = make(native.Declarations, 3)
	decs["BlockSize"] = native.UntypedNumericConst("16")
	decs["KeySizeError"] = reflect.TypeOf((*aes.KeySizeError)(nil)).Elem()
	decs["NewCipher"] = aes.NewCipher
	NativePackages["crypto/aes"] = native.Package{
		Name:         "aes",
		Declarations: decs,
	}
	// "crypto/cipher"
	decs = make(native.Declarations, 15)
	decs["AEAD"] = reflect.TypeOf((*cipher.AEAD)(nil)).Elem()
	decs["Block"] = reflect.TypeOf((*cipher.Block)(nil)).Elem()
	decs["BlockMode"] = reflect.TypeOf((*cipher.BlockMode)(nil)).Elem()
	decs["NewCBCDecrypter"] = cipher.NewCBCDecrypter
	decs["NewCBCEncrypter"] = cipher.NewCBCEncrypter
	decs["NewCFBDecrypter"] = cipher.NewCFBDecrypter
	decs["NewCFBEncrypter"] = cipher.NewCFBEncrypter
	decs["NewCTR"] = cipher.NewCTR
	decs["NewGCM"] = cipher.NewGCM
	decs["NewGCMWithNonceSize"] = cipher.NewGCMWithNonceSize
	decs["NewGCMWithTagSize"] = cipher.NewGCMWithTagSize
	decs["NewOFB"] = cipher.NewOFB
	decs["Stream"] = reflect.TypeOf((*cipher.Stream)(nil)).Elem()
	decs["StreamReader"] = reflect.TypeOf((*cipher.StreamReader)(nil)).Elem()
	decs["StreamWriter"] = reflect.TypeOf((*cipher.StreamWriter)(nil)).Elem()
	NativePackages["crypto/cipher"] = native.Package{
		Name:         "cipher",
		Declarations: decs,
	}
	// "crypto/des"
	decs = make(native.Declarations, 4)
	decs["BlockSize"] = native.UntypedNumericConst("8")
	decs["KeySizeError"] = reflect.TypeOf((*des.KeySizeError)(nil)).Elem()
	decs["NewCipher"] = des.NewCipher
	decs["NewTripleDESCipher"] = des.NewTripleDESCipher
	NativePackages["crypto/des"] = native.Package{
		Name:         "des",
		Declarations: decs,
	}
	// "crypto/dsa"
	decs = make(native.Declarations, 13)
	decs["ErrInvalidPublicKey"] = &dsa.ErrInvalidPublicKey
	decs["GenerateKey"] = dsa.GenerateKey
	decs["GenerateParameters"] = dsa.GenerateParameters
	decs["L1024N160"] = dsa.L1024N160
	decs["L2048N224"] = dsa.L2048N224
	decs["L2048N256"] = dsa.L2048N256
	decs["L3072N256"] = dsa.L3072N256
	decs["ParameterSizes"] = reflect.TypeOf((*dsa.ParameterSizes)(nil)).Elem()
	decs["Parameters"] = reflect.TypeOf((*dsa.Parameters)(nil)).Elem()
	decs["PrivateKey"] = reflect.TypeOf((*dsa.PrivateKey)(nil)).Elem()
	decs["PublicKey"] = reflect.TypeOf((*dsa.PublicKey)(nil)).Elem()
	decs["Sign"] = dsa.Sign
	decs["Verify"] = dsa.Verify
	NativePackages["crypto/dsa"] = native.Package{
		Name:         "dsa",
		Declarations: decs,
	}
	// "crypto/ecdsa"
	decs = make(native.Declarations, 7)
	decs["GenerateKey"] = ecdsa.GenerateKey
	decs["PrivateKey"] = reflect.TypeOf((*ecdsa.PrivateKey)(nil)).Elem()
	decs["PublicKey"] = reflect.TypeOf((*ecdsa.PublicKey)(nil)).Elem()
	decs["Sign"] = ecdsa.Sign
	decs["SignASN1"] = ecdsa.SignASN1
	decs["Verify"] = ecdsa.Verify
	decs["VerifyASN1"] = ecdsa.VerifyASN1
	NativePackages["crypto/ecdsa"] = native.Package{
		Name:         "ecdsa",
		Declarations: decs,
	}
	// "crypto/elliptic"
	decs = make(native.Declarations, 11)
	decs["Curve"] = reflect.TypeOf((*elliptic.Curve)(nil)).Elem()
	decs["CurveParams"] = reflect.TypeOf((*elliptic.CurveParams)(nil)).Elem()
	decs["GenerateKey"] = elliptic.GenerateKey
	decs["Marshal"] = elliptic.Marshal
	decs["MarshalCompressed"] = elliptic.MarshalCompressed
	decs["P224"] = elliptic.P224
	decs["P256"] = elliptic.P256
	decs["P384"] = elliptic.P384
	decs["P521"] = elliptic.P521
	decs["Unmarshal"] = elliptic.Unmarshal
	decs["UnmarshalCompressed"] = elliptic.UnmarshalCompressed
	NativePackages["crypto/elliptic"] = native.Package{
		Name:         "elliptic",
		Declarations: decs,
	}
	// "crypto/hmac"
	decs = make(native.Declarations, 2)
	decs["Equal"] = hmac.Equal
	decs["New"] = hmac.New
	NativePackages["crypto/hmac"] = native.Package{
		Name:         "hmac",
		Declarations: decs,
	}
	// "crypto/md5"
	decs = make(native.Declarations, 4)
	decs["BlockSize"] = native.UntypedNumericConst("64")
	decs["New"] = md5.New
	decs["Size"] = native.UntypedNumericConst("16")
	decs["Sum"] = md5.Sum
	NativePackages["crypto/md5"] = native.Package{
		Name:         "md5",
		Declarations: decs,
	}
	// "crypto/rand"
	decs = make(native.Declarations, 4)
	decs["Int"] = rand.Int
	decs["Prime"] = rand.Prime
	decs["Read"] = rand.Read
	decs["Reader"] = &rand.Reader
	NativePackages["crypto/rand"] = native.Package{
		Name:         "rand",
		Declarations: decs,
	}
	// "crypto/rc4"
	decs = make(native.Declarations, 3)
	decs["Cipher"] = reflect.TypeOf((*rc4.Cipher)(nil)).Elem()
	decs["KeySizeError"] = reflect.TypeOf((*rc4.KeySizeError)(nil)).Elem()
	decs["NewCipher"] = rc4.NewCipher
	NativePackages["crypto/rc4"] = native.Package{
		Name:         "rc4",
		Declarations: decs,
	}
	// "crypto/rsa"
	decs = make(native.Declarations, 23)
	decs["CRTValue"] = reflect.TypeOf((*rsa.CRTValue)(nil)).Elem()
	decs["DecryptOAEP"] = rsa.DecryptOAEP
	decs["DecryptPKCS1v15"] = rsa.DecryptPKCS1v15
	decs["DecryptPKCS1v15SessionKey"] = rsa.DecryptPKCS1v15SessionKey
	decs["EncryptOAEP"] = rsa.EncryptOAEP
	decs["EncryptPKCS1v15"] = rsa.EncryptPKCS1v15
	decs["ErrDecryption"] = &rsa.ErrDecryption
	decs["ErrMessageTooLong"] = &rsa.ErrMessageTooLong
	decs["ErrVerification"] = &rsa.ErrVerification
	decs["GenerateKey"] = rsa.GenerateKey
	decs["GenerateMultiPrimeKey"] = rsa.GenerateMultiPrimeKey
	decs["OAEPOptions"] = reflect.TypeOf((*rsa.OAEPOptions)(nil)).Elem()
	decs["PKCS1v15DecryptOptions"] = reflect.TypeOf((*rsa.PKCS1v15DecryptOptions)(nil)).Elem()
	decs["PSSOptions"] = reflect.TypeOf((*rsa.PSSOptions)(nil)).Elem()
	decs["PSSSaltLengthAuto"] = native.UntypedNumericConst("0")
	decs["PSSSaltLengthEqualsHash"] = native.UntypedNumericConst("-1")
	decs["PrecomputedValues"] = reflect.TypeOf((*rsa.PrecomputedValues)(nil)).Elem()
	decs["PrivateKey"] = reflect.TypeOf((*rsa.PrivateKey)(nil)).Elem()
	decs["PublicKey"] = reflect.TypeOf((*rsa.PublicKey)(nil)).Elem()
	decs["SignPKCS1v15"] = rsa.SignPKCS1v15
	decs["SignPSS"] = rsa.SignPSS
	decs["VerifyPKCS1v15"] = rsa.VerifyPKCS1v15
	decs["VerifyPSS"] = rsa.VerifyPSS
	NativePackages["crypto/rsa"] = native.Package{
		Name:         "rsa",
		Declarations: decs,
	}
	// "crypto/sha1"
	decs = make(native.Declarations, 4)
	decs["BlockSize"] = native.UntypedNumericConst("64")
	decs["New"] = sha1.New
	decs["Size"] = native.UntypedNumericConst("20")
	decs["Sum"] = sha1.Sum
	NativePackages["crypto/sha1"] = native.Package{
		Name:         "sha1",
		Declarations: decs,
	}
	// "crypto/sha256"
	decs = make(native.Declarations, 7)
	decs["BlockSize"] = native.UntypedNumericConst("64")
	decs["New"] = sha256.New
	decs["New224"] = sha256.New224
	decs["Size"] = native.UntypedNumericConst("32")
	decs["Size224"] = native.UntypedNumericConst("28")
	decs["Sum224"] = sha256.Sum224
	decs["Sum256"] = sha256.Sum256
	NativePackages["crypto/sha256"] = native.Package{
		Name:         "sha256",
		Declarations: decs,
	}
	// "crypto/sha512"
	decs = make(native.Declarations, 13)
	decs["BlockSize"] = native.UntypedNumericConst("128")
	decs["New"] = sha512.New
	decs["New384"] = sha512.New384
	decs["New512_224"] = sha512.New512_224
	decs["New512_256"] = sha512.New512_256
	decs["Size"] = native.UntypedNumericConst("64")
	decs["Size224"] = native.UntypedNumericConst("28")
	decs["Size256"] = native.UntypedNumericConst("32")
	decs["Size384"] = native.UntypedNumericConst("48")
	decs["Sum384"] = sha512.Sum384
	decs["Sum512"] = sha512.Sum512
	decs["Sum512_224"] = sha512.Sum512_224
	decs["Sum512_256"] = sha512.Sum512_256
	NativePackages["crypto/sha512"] = native.Package{
		Name:         "sha512",
		Declarations: decs,
	}
	// "crypto/subtle"
	decs = make(native.Declarations, 6)
	decs["ConstantTimeByteEq"] = subtle.ConstantTimeByteEq
	decs["ConstantTimeCompare"] = subtle.ConstantTimeCompare
	decs["ConstantTimeCopy"] = subtle.ConstantTimeCopy
	decs["ConstantTimeEq"] = subtle.ConstantTimeEq
	decs["ConstantTimeLessOrEq"] = subtle.ConstantTimeLessOrEq
	decs["ConstantTimeSelect"] = subtle.ConstantTimeSelect
	NativePackages["crypto/subtle"] = native.Package{
		Name:         "subtle",
		Declarations: decs,
	}
	// "crypto/tls"
	decs = make(native.Declarations, 84)
	decs["Certificate"] = reflect.TypeOf((*tls.Certificate)(nil)).Elem()
	decs["CertificateRequestInfo"] = reflect.TypeOf((*tls.CertificateRequestInfo)(nil)).Elem()
	decs["CipherSuite"] = reflect.TypeOf((*tls.CipherSuite)(nil)).Elem()
	decs["CipherSuiteName"] = tls.CipherSuiteName
	decs["CipherSuites"] = tls.CipherSuites
	decs["Client"] = tls.Client
	decs["ClientAuthType"] = reflect.TypeOf((*tls.ClientAuthType)(nil)).Elem()
	decs["ClientHelloInfo"] = reflect.TypeOf((*tls.ClientHelloInfo)(nil)).Elem()
	decs["ClientSessionCache"] = reflect.TypeOf((*tls.ClientSessionCache)(nil)).Elem()
	decs["ClientSessionState"] = reflect.TypeOf((*tls.ClientSessionState)(nil)).Elem()
	decs["Config"] = reflect.TypeOf((*tls.Config)(nil)).Elem()
	decs["Conn"] = reflect.TypeOf((*tls.Conn)(nil)).Elem()
	decs["ConnectionState"] = reflect.TypeOf((*tls.ConnectionState)(nil)).Elem()
	decs["CurveID"] = reflect.TypeOf((*tls.CurveID)(nil)).Elem()
	decs["CurveP256"] = tls.CurveP256
	decs["CurveP384"] = tls.CurveP384
	decs["CurveP521"] = tls.CurveP521
	decs["Dial"] = tls.Dial
	decs["DialWithDialer"] = tls.DialWithDialer
	decs["Dialer"] = reflect.TypeOf((*tls.Dialer)(nil)).Elem()
	decs["ECDSAWithP256AndSHA256"] = tls.ECDSAWithP256AndSHA256
	decs["ECDSAWithP384AndSHA384"] = tls.ECDSAWithP384AndSHA384
	decs["ECDSAWithP521AndSHA512"] = tls.ECDSAWithP521AndSHA512
	decs["ECDSAWithSHA1"] = tls.ECDSAWithSHA1
	decs["Ed25519"] = tls.Ed25519
	decs["InsecureCipherSuites"] = tls.InsecureCipherSuites
	decs["Listen"] = tls.Listen
	decs["LoadX509KeyPair"] = tls.LoadX509KeyPair
	decs["NewLRUClientSessionCache"] = tls.NewLRUClientSessionCache
	decs["NewListener"] = tls.NewListener
	decs["NoClientCert"] = tls.NoClientCert
	decs["PKCS1WithSHA1"] = tls.PKCS1WithSHA1
	decs["PKCS1WithSHA256"] = tls.PKCS1WithSHA256
	decs["PKCS1WithSHA384"] = tls.PKCS1WithSHA384
	decs["PKCS1WithSHA512"] = tls.PKCS1WithSHA512
	decs["PSSWithSHA256"] = tls.PSSWithSHA256
	decs["PSSWithSHA384"] = tls.PSSWithSHA384
	decs["PSSWithSHA512"] = tls.PSSWithSHA512
	decs["RecordHeaderError"] = reflect.TypeOf((*tls.RecordHeaderError)(nil)).Elem()
	decs["RenegotiateFreelyAsClient"] = tls.RenegotiateFreelyAsClient
	decs["RenegotiateNever"] = tls.RenegotiateNever
	decs["RenegotiateOnceAsClient"] = tls.RenegotiateOnceAsClient
	decs["RenegotiationSupport"] = reflect.TypeOf((*tls.RenegotiationSupport)(nil)).Elem()
	decs["RequestClientCert"] = tls.RequestClientCert
	decs["RequireAndVerifyClientCert"] = tls.RequireAndVerifyClientCert
	decs["RequireAnyClientCert"] = tls.RequireAnyClientCert
	decs["Server"] = tls.Server
	decs["SignatureScheme"] = reflect.TypeOf((*tls.SignatureScheme)(nil)).Elem()
	decs["TLS_AES_128_GCM_SHA256"] = tls.TLS_AES_128_GCM_SHA256
	decs["TLS_AES_256_GCM_SHA384"] = tls.TLS_AES_256_GCM_SHA384
	decs["TLS_CHACHA20_POLY1305_SHA256"] = tls.TLS_CHACHA20_POLY1305_SHA256
	decs["TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"] = tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
	decs["TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"] = tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
	decs["TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"] = tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
	decs["TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"] = tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
	decs["TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"] = tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
	decs["TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305"] = tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
	decs["TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"] = tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
	decs["TLS_ECDHE_ECDSA_WITH_RC4_128_SHA"] = tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
	decs["TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"] = tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
	decs["TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"] = tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
	decs["TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"] = tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
	decs["TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"] = tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
	decs["TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"] = tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
	decs["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"] = tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	decs["TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"] = tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
	decs["TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"] = tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
	decs["TLS_ECDHE_RSA_WITH_RC4_128_SHA"] = tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA
	decs["TLS_FALLBACK_SCSV"] = tls.TLS_FALLBACK_SCSV
	decs["TLS_RSA_WITH_3DES_EDE_CBC_SHA"] = tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA
	decs["TLS_RSA_WITH_AES_128_CBC_SHA"] = tls.TLS_RSA_WITH_AES_128_CBC_SHA
	decs["TLS_RSA_WITH_AES_128_CBC_SHA256"] = tls.TLS_RSA_WITH_AES_128_CBC_SHA256
	decs["TLS_RSA_WITH_AES_128_GCM_SHA256"] = tls.TLS_RSA_WITH_AES_128_GCM_SHA256
	decs["TLS_RSA_WITH_AES_256_CBC_SHA"] = tls.TLS_RSA_WITH_AES_256_CBC_SHA
	decs["TLS_RSA_WITH_AES_256_GCM_SHA384"] = tls.TLS_RSA_WITH_AES_256_GCM_SHA384
	decs["TLS_RSA_WITH_RC4_128_SHA"] = tls.TLS_RSA_WITH_RC4_128_SHA
	decs["VerifyClientCertIfGiven"] = tls.VerifyClientCertIfGiven
	decs["VersionSSL30"] = native.UntypedNumericConst("768")
	decs["VersionTLS10"] = native.UntypedNumericConst("769")
	decs["VersionTLS11"] = native.UntypedNumericConst("770")
	decs["VersionTLS12"] = native.UntypedNumericConst("771")
	decs["VersionTLS13"] = native.UntypedNumericConst("772")
	decs["X25519"] = tls.X25519
	decs["X509KeyPair"] = tls.X509KeyPair
	NativePackages["crypto/tls"] = native.Package{
		Name:         "tls",
		Declarations: decs,
	}
	// "crypto/x509"
	decs = make(native.Declarations, 103)
	decs["CANotAuthorizedForExtKeyUsage"] = x509.CANotAuthorizedForExtKeyUsage
	decs["CANotAuthorizedForThisName"] = x509.CANotAuthorizedForThisName
	decs["CertPool"] = reflect.TypeOf((*x509.CertPool)(nil)).Elem()
	decs["Certificate"] = reflect.TypeOf((*x509.Certificate)(nil)).Elem()
	decs["CertificateInvalidError"] = reflect.TypeOf((*x509.CertificateInvalidError)(nil)).Elem()
	decs["CertificateRequest"] = reflect.TypeOf((*x509.CertificateRequest)(nil)).Elem()
	decs["ConstraintViolationError"] = reflect.TypeOf((*x509.ConstraintViolationError)(nil)).Elem()
	decs["CreateCertificate"] = x509.CreateCertificate
	decs["CreateCertificateRequest"] = x509.CreateCertificateRequest
	decs["CreateRevocationList"] = x509.CreateRevocationList
	decs["DSA"] = x509.DSA
	decs["DSAWithSHA1"] = x509.DSAWithSHA1
	decs["DSAWithSHA256"] = x509.DSAWithSHA256
	decs["DecryptPEMBlock"] = x509.DecryptPEMBlock
	decs["ECDSA"] = x509.ECDSA
	decs["ECDSAWithSHA1"] = x509.ECDSAWithSHA1
	decs["ECDSAWithSHA256"] = x509.ECDSAWithSHA256
	decs["ECDSAWithSHA384"] = x509.ECDSAWithSHA384
	decs["ECDSAWithSHA512"] = x509.ECDSAWithSHA512
	decs["Ed25519"] = x509.Ed25519
	decs["EncryptPEMBlock"] = x509.EncryptPEMBlock
	decs["ErrUnsupportedAlgorithm"] = &x509.ErrUnsupportedAlgorithm
	decs["Expired"] = x509.Expired
	decs["ExtKeyUsage"] = reflect.TypeOf((*x509.ExtKeyUsage)(nil)).Elem()
	decs["ExtKeyUsageAny"] = x509.ExtKeyUsageAny
	decs["ExtKeyUsageClientAuth"] = x509.ExtKeyUsageClientAuth
	decs["ExtKeyUsageCodeSigning"] = x509.ExtKeyUsageCodeSigning
	decs["ExtKeyUsageEmailProtection"] = x509.ExtKeyUsageEmailProtection
	decs["ExtKeyUsageIPSECEndSystem"] = x509.ExtKeyUsageIPSECEndSystem
	decs["ExtKeyUsageIPSECTunnel"] = x509.ExtKeyUsageIPSECTunnel
	decs["ExtKeyUsageIPSECUser"] = x509.ExtKeyUsageIPSECUser
	decs["ExtKeyUsageMicrosoftCommercialCodeSigning"] = x509.ExtKeyUsageMicrosoftCommercialCodeSigning
	decs["ExtKeyUsageMicrosoftKernelCodeSigning"] = x509.ExtKeyUsageMicrosoftKernelCodeSigning
	decs["ExtKeyUsageMicrosoftServerGatedCrypto"] = x509.ExtKeyUsageMicrosoftServerGatedCrypto
	decs["ExtKeyUsageNetscapeServerGatedCrypto"] = x509.ExtKeyUsageNetscapeServerGatedCrypto
	decs["ExtKeyUsageOCSPSigning"] = x509.ExtKeyUsageOCSPSigning
	decs["ExtKeyUsageServerAuth"] = x509.ExtKeyUsageServerAuth
	decs["ExtKeyUsageTimeStamping"] = x509.ExtKeyUsageTimeStamping
	decs["HostnameError"] = reflect.TypeOf((*x509.HostnameError)(nil)).Elem()
	decs["IncompatibleUsage"] = x509.IncompatibleUsage
	decs["IncorrectPasswordError"] = &x509.IncorrectPasswordError
	decs["InsecureAlgorithmError"] = reflect.TypeOf((*x509.InsecureAlgorithmError)(nil)).Elem()
	decs["InvalidReason"] = reflect.TypeOf((*x509.InvalidReason)(nil)).Elem()
	decs["IsEncryptedPEMBlock"] = x509.IsEncryptedPEMBlock
	decs["KeyUsage"] = reflect.TypeOf((*x509.KeyUsage)(nil)).Elem()
	decs["KeyUsageCRLSign"] = x509.KeyUsageCRLSign
	decs["KeyUsageCertSign"] = x509.KeyUsageCertSign
	decs["KeyUsageContentCommitment"] = x509.KeyUsageContentCommitment
	decs["KeyUsageDataEncipherment"] = x509.KeyUsageDataEncipherment
	decs["KeyUsageDecipherOnly"] = x509.KeyUsageDecipherOnly
	decs["KeyUsageDigitalSignature"] = x509.KeyUsageDigitalSignature
	decs["KeyUsageEncipherOnly"] = x509.KeyUsageEncipherOnly
	decs["KeyUsageKeyAgreement"] = x509.KeyUsageKeyAgreement
	decs["KeyUsageKeyEncipherment"] = x509.KeyUsageKeyEncipherment
	decs["MD2WithRSA"] = x509.MD2WithRSA
	decs["MD5WithRSA"] = x509.MD5WithRSA
	decs["MarshalECPrivateKey"] = x509.MarshalECPrivateKey
	decs["MarshalPKCS1PrivateKey"] = x509.MarshalPKCS1PrivateKey
	decs["MarshalPKCS1PublicKey"] = x509.MarshalPKCS1PublicKey
	decs["MarshalPKCS8PrivateKey"] = x509.MarshalPKCS8PrivateKey
	decs["MarshalPKIXPublicKey"] = x509.MarshalPKIXPublicKey
	decs["NameConstraintsWithoutSANs"] = x509.NameConstraintsWithoutSANs
	decs["NameMismatch"] = x509.NameMismatch
	decs["NewCertPool"] = x509.NewCertPool
	decs["NotAuthorizedToSign"] = x509.NotAuthorizedToSign
	decs["PEMCipher"] = reflect.TypeOf((*x509.PEMCipher)(nil)).Elem()
	decs["PEMCipher3DES"] = x509.PEMCipher3DES
	decs["PEMCipherAES128"] = x509.PEMCipherAES128
	decs["PEMCipherAES192"] = x509.PEMCipherAES192
	decs["PEMCipherAES256"] = x509.PEMCipherAES256
	decs["PEMCipherDES"] = x509.PEMCipherDES
	decs["ParseCRL"] = x509.ParseCRL
	decs["ParseCertificate"] = x509.ParseCertificate
	decs["ParseCertificateRequest"] = x509.ParseCertificateRequest
	decs["ParseCertificates"] = x509.ParseCertificates
	decs["ParseDERCRL"] = x509.ParseDERCRL
	decs["ParseECPrivateKey"] = x509.ParseECPrivateKey
	decs["ParsePKCS1PrivateKey"] = x509.ParsePKCS1PrivateKey
	decs["ParsePKCS1PublicKey"] = x509.ParsePKCS1PublicKey
	decs["ParsePKCS8PrivateKey"] = x509.ParsePKCS8PrivateKey
	decs["ParsePKIXPublicKey"] = x509.ParsePKIXPublicKey
	decs["PublicKeyAlgorithm"] = reflect.TypeOf((*x509.PublicKeyAlgorithm)(nil)).Elem()
	decs["PureEd25519"] = x509.PureEd25519
	decs["RSA"] = x509.RSA
	decs["RevocationList"] = reflect.TypeOf((*x509.RevocationList)(nil)).Elem()
	decs["SHA1WithRSA"] = x509.SHA1WithRSA
	decs["SHA256WithRSA"] = x509.SHA256WithRSA
	decs["SHA256WithRSAPSS"] = x509.SHA256WithRSAPSS
	decs["SHA384WithRSA"] = x509.SHA384WithRSA
	decs["SHA384WithRSAPSS"] = x509.SHA384WithRSAPSS
	decs["SHA512WithRSA"] = x509.SHA512WithRSA
	decs["SHA512WithRSAPSS"] = x509.SHA512WithRSAPSS
	decs["SignatureAlgorithm"] = reflect.TypeOf((*x509.SignatureAlgorithm)(nil)).Elem()
	decs["SystemCertPool"] = x509.SystemCertPool
	decs["SystemRootsError"] = reflect.TypeOf((*x509.SystemRootsError)(nil)).Elem()
	decs["TooManyConstraints"] = x509.TooManyConstraints
	decs["TooManyIntermediates"] = x509.TooManyIntermediates
	decs["UnconstrainedName"] = x509.UnconstrainedName
	decs["UnhandledCriticalExtension"] = reflect.TypeOf((*x509.UnhandledCriticalExtension)(nil)).Elem()
	decs["UnknownAuthorityError"] = reflect.TypeOf((*x509.UnknownAuthorityError)(nil)).Elem()
	decs["UnknownPublicKeyAlgorithm"] = x509.UnknownPublicKeyAlgorithm
	decs["UnknownSignatureAlgorithm"] = x509.UnknownSignatureAlgorithm
	decs["VerifyOptions"] = reflect.TypeOf((*x509.VerifyOptions)(nil)).Elem()
	NativePackages["crypto/x509"] = native.Package{
		Name:         "x509",
		Declarations: decs,
	}
	// "crypto/x509/pkix"
	decs = make(native.Declarations, 10)
	decs["AlgorithmIdentifier"] = reflect.TypeOf((*pkix.AlgorithmIdentifier)(nil)).Elem()
	decs["AttributeTypeAndValue"] = reflect.TypeOf((*pkix.AttributeTypeAndValue)(nil)).Elem()
	decs["AttributeTypeAndValueSET"] = reflect.TypeOf((*pkix.AttributeTypeAndValueSET)(nil)).Elem()
	decs["CertificateList"] = reflect.TypeOf((*pkix.CertificateList)(nil)).Elem()
	decs["Extension"] = reflect.TypeOf((*pkix.Extension)(nil)).Elem()
	decs["Name"] = reflect.TypeOf((*pkix.Name)(nil)).Elem()
	decs["RDNSequence"] = reflect.TypeOf((*pkix.RDNSequence)(nil)).Elem()
	decs["RelativeDistinguishedNameSET"] = reflect.TypeOf((*pkix.RelativeDistinguishedNameSET)(nil)).Elem()
	decs["RevokedCertificate"] = reflect.TypeOf((*pkix.RevokedCertificate)(nil)).Elem()
	decs["TBSCertificateList"] = reflect.TypeOf((*pkix.TBSCertificateList)(nil)).Elem()
	NativePackages["crypto/x509/pkix"] = native.Package{
		Name:         "pkix",
		Declarations: decs,
	}
	// "encoding"
	decs = make(native.Declarations, 4)
	decs["BinaryMarshaler"] = reflect.TypeOf((*encoding.BinaryMarshaler)(nil)).Elem()
	decs["BinaryUnmarshaler"] = reflect.TypeOf((*encoding.BinaryUnmarshaler)(nil)).Elem()
	decs["TextMarshaler"] = reflect.TypeOf((*encoding.TextMarshaler)(nil)).Elem()
	decs["TextUnmarshaler"] = reflect.TypeOf((*encoding.TextUnmarshaler)(nil)).Elem()
	NativePackages["encoding"] = native.Package{
		Name:         "encoding",
		Declarations: decs,
	}
	// "encoding/asn1"
	decs = make(native.Declarations, 36)
	decs["BitString"] = reflect.TypeOf((*asn1.BitString)(nil)).Elem()
	decs["ClassApplication"] = native.UntypedNumericConst("1")
	decs["ClassContextSpecific"] = native.UntypedNumericConst("2")
	decs["ClassPrivate"] = native.UntypedNumericConst("3")
	decs["ClassUniversal"] = native.UntypedNumericConst("0")
	decs["Enumerated"] = reflect.TypeOf((*asn1.Enumerated)(nil)).Elem()
	decs["Flag"] = reflect.TypeOf((*asn1.Flag)(nil)).Elem()
	decs["Marshal"] = asn1.Marshal
	decs["MarshalWithParams"] = asn1.MarshalWithParams
	decs["NullBytes"] = &asn1.NullBytes
	decs["NullRawValue"] = &asn1.NullRawValue
	decs["ObjectIdentifier"] = reflect.TypeOf((*asn1.ObjectIdentifier)(nil)).Elem()
	decs["RawContent"] = reflect.TypeOf((*asn1.RawContent)(nil)).Elem()
	decs["RawValue"] = reflect.TypeOf((*asn1.RawValue)(nil)).Elem()
	decs["StructuralError"] = reflect.TypeOf((*asn1.StructuralError)(nil)).Elem()
	decs["SyntaxError"] = reflect.TypeOf((*asn1.SyntaxError)(nil)).Elem()
	decs["TagBMPString"] = native.UntypedNumericConst("30")
	decs["TagBitString"] = native.UntypedNumericConst("3")
	decs["TagBoolean"] = native.UntypedNumericConst("1")
	decs["TagEnum"] = native.UntypedNumericConst("10")
	decs["TagGeneralString"] = native.UntypedNumericConst("27")
	decs["TagGeneralizedTime"] = native.UntypedNumericConst("24")
	decs["TagIA5String"] = native.UntypedNumericConst("22")
	decs["TagInteger"] = native.UntypedNumericConst("2")
	decs["TagNull"] = native.UntypedNumericConst("5")
	decs["TagNumericString"] = native.UntypedNumericConst("18")
	decs["TagOID"] = native.UntypedNumericConst("6")
	decs["TagOctetString"] = native.UntypedNumericConst("4")
	decs["TagPrintableString"] = native.UntypedNumericConst("19")
	decs["TagSequence"] = native.UntypedNumericConst("16")
	decs["TagSet"] = native.UntypedNumericConst("17")
	decs["TagT61String"] = native.UntypedNumericConst("20")
	decs["TagUTCTime"] = native.UntypedNumericConst("23")
	decs["TagUTF8String"] = native.UntypedNumericConst("12")
	decs["Unmarshal"] = asn1.Unmarshal
	decs["UnmarshalWithParams"] = asn1.UnmarshalWithParams
	NativePackages["encoding/asn1"] = native.Package{
		Name:         "asn1",
		Declarations: decs,
	}
	// "encoding/base32"
	decs = make(native.Declarations, 9)
	decs["CorruptInputError"] = reflect.TypeOf((*base32.CorruptInputError)(nil)).Elem()
	decs["Encoding"] = reflect.TypeOf((*base32.Encoding)(nil)).Elem()
	decs["HexEncoding"] = &base32.HexEncoding
	decs["NewDecoder"] = base32.NewDecoder
	decs["NewEncoder"] = base32.NewEncoder
	decs["NewEncoding"] = base32.NewEncoding
	decs["NoPadding"] = base32.NoPadding
	decs["StdEncoding"] = &base32.StdEncoding
	decs["StdPadding"] = base32.StdPadding
	NativePackages["encoding/base32"] = native.Package{
		Name:         "base32",
		Declarations: decs,
	}
	// "encoding/base64"
	decs = make(native.Declarations, 11)
	decs["CorruptInputError"] = reflect.TypeOf((*base64.CorruptInputError)(nil)).Elem()
	decs["Encoding"] = reflect.TypeOf((*base64.Encoding)(nil)).Elem()
	decs["NewDecoder"] = base64.NewDecoder
	decs["NewEncoder"] = base64.NewEncoder
	decs["NewEncoding"] = base64.NewEncoding
	decs["NoPadding"] = base64.NoPadding
	decs["RawStdEncoding"] = &base64.RawStdEncoding
	decs["RawURLEncoding"] = &base64.RawURLEncoding
	decs["StdEncoding"] = &base64.StdEncoding
	decs["StdPadding"] = base64.StdPadding
	decs["URLEncoding"] = &base64.URLEncoding
	NativePackages["encoding/base64"] = native.Package{
		Name:         "base64",
		Declarations: decs,
	}
	// "encoding/binary"
	decs = make(native.Declarations, 15)
	decs["BigEndian"] = &binary.BigEndian
	decs["ByteOrder"] = reflect.TypeOf((*binary.ByteOrder)(nil)).Elem()
	decs["LittleEndian"] = &binary.LittleEndian
	decs["MaxVarintLen16"] = native.UntypedNumericConst("3")
	decs["MaxVarintLen32"] = native.UntypedNumericConst("5")
	decs["MaxVarintLen64"] = native.UntypedNumericConst("10")
	decs["PutUvarint"] = binary.PutUvarint
	decs["PutVarint"] = binary.PutVarint
	decs["Read"] = binary.Read
	decs["ReadUvarint"] = binary.ReadUvarint
	decs["ReadVarint"] = binary.ReadVarint
	decs["Size"] = binary.Size
	decs["Uvarint"] = binary.Uvarint
	decs["Varint"] = binary.Varint
	decs["Write"] = binary.Write
	NativePackages["encoding/binary"] = native.Package{
		Name:         "binary",
		Declarations: decs,
	}
	// "encoding/csv"
	decs = make(native.Declarations, 9)
	decs["ErrBareQuote"] = &csv.ErrBareQuote
	decs["ErrFieldCount"] = &csv.ErrFieldCount
	decs["ErrQuote"] = &csv.ErrQuote
	decs["ErrTrailingComma"] = &csv.ErrTrailingComma
	decs["NewReader"] = csv.NewReader
	decs["NewWriter"] = csv.NewWriter
	decs["ParseError"] = reflect.TypeOf((*csv.ParseError)(nil)).Elem()
	decs["Reader"] = reflect.TypeOf((*csv.Reader)(nil)).Elem()
	decs["Writer"] = reflect.TypeOf((*csv.Writer)(nil)).Elem()
	NativePackages["encoding/csv"] = native.Package{
		Name:         "csv",
		Declarations: decs,
	}
	// "encoding/hex"
	decs = make(native.Declarations, 12)
	decs["Decode"] = hex.Decode
	decs["DecodeString"] = hex.DecodeString
	decs["DecodedLen"] = hex.DecodedLen
	decs["Dump"] = hex.Dump
	decs["Dumper"] = hex.Dumper
	decs["Encode"] = hex.Encode
	decs["EncodeToString"] = hex.EncodeToString
	decs["EncodedLen"] = hex.EncodedLen
	decs["ErrLength"] = &hex.ErrLength
	decs["InvalidByteError"] = reflect.TypeOf((*hex.InvalidByteError)(nil)).Elem()
	decs["NewDecoder"] = hex.NewDecoder
	decs["NewEncoder"] = hex.NewEncoder
	NativePackages["encoding/hex"] = native.Package{
		Name:         "hex",
		Declarations: decs,
	}
	// "encoding/json"
	decs = make(native.Declarations, 25)
	decs["Compact"] = json.Compact
	decs["Decoder"] = reflect.TypeOf((*json.Decoder)(nil)).Elem()
	decs["Delim"] = reflect.TypeOf((*json.Delim)(nil)).Elem()
	decs["Encoder"] = reflect.TypeOf((*json.Encoder)(nil)).Elem()
	decs["HTMLEscape"] = json.HTMLEscape
	decs["Indent"] = json.Indent
	decs["InvalidUTF8Error"] = reflect.TypeOf((*json.InvalidUTF8Error)(nil)).Elem()
	decs["InvalidUnmarshalError"] = reflect.TypeOf((*json.InvalidUnmarshalError)(nil)).Elem()
	decs["Marshal"] = json.Marshal
	decs["MarshalIndent"] = json.MarshalIndent
	decs["Marshaler"] = reflect.TypeOf((*json.Marshaler)(nil)).Elem()
	decs["MarshalerError"] = reflect.TypeOf((*json.MarshalerError)(nil)).Elem()
	decs["NewDecoder"] = json.NewDecoder
	decs["NewEncoder"] = json.NewEncoder
	decs["Number"] = reflect.TypeOf((*json.Number)(nil)).Elem()
	decs["RawMessage"] = reflect.TypeOf((*json.RawMessage)(nil)).Elem()
	decs["SyntaxError"] = reflect.TypeOf((*json.SyntaxError)(nil)).Elem()
	decs["Token"] = reflect.TypeOf((*json.Token)(nil)).Elem()
	decs["Unmarshal"] = json.Unmarshal
	decs["UnmarshalFieldError"] = reflect.TypeOf((*json.UnmarshalFieldError)(nil)).Elem()
	decs["UnmarshalTypeError"] = reflect.TypeOf((*json.UnmarshalTypeError)(nil)).Elem()
	decs["Unmarshaler"] = reflect.TypeOf((*json.Unmarshaler)(nil)).Elem()
	decs["UnsupportedTypeError"] = reflect.TypeOf((*json.UnsupportedTypeError)(nil)).Elem()
	decs["UnsupportedValueError"] = reflect.TypeOf((*json.UnsupportedValueError)(nil)).Elem()
	decs["Valid"] = json.Valid
	NativePackages["encoding/json"] = native.Package{
		Name:         "json",
		Declarations: decs,
	}
	// "encoding/pem"
	decs = make(native.Declarations, 4)
	decs["Block"] = reflect.TypeOf((*pem.Block)(nil)).Elem()
	decs["Decode"] = pem.Decode
	decs["Encode"] = pem.Encode
	decs["EncodeToMemory"] = pem.EncodeToMemory
	NativePackages["encoding/pem"] = native.Package{
		Name:         "pem",
		Declarations: decs,
	}
	// "encoding/xml"
	decs = make(native.Declarations, 32)
	decs["Attr"] = reflect.TypeOf((*xml.Attr)(nil)).Elem()
	decs["CharData"] = reflect.TypeOf((*xml.CharData)(nil)).Elem()
	decs["Comment"] = reflect.TypeOf((*xml.Comment)(nil)).Elem()
	decs["CopyToken"] = xml.CopyToken
	decs["Decoder"] = reflect.TypeOf((*xml.Decoder)(nil)).Elem()
	decs["Directive"] = reflect.TypeOf((*xml.Directive)(nil)).Elem()
	decs["Encoder"] = reflect.TypeOf((*xml.Encoder)(nil)).Elem()
	decs["EndElement"] = reflect.TypeOf((*xml.EndElement)(nil)).Elem()
	decs["Escape"] = xml.Escape
	decs["EscapeText"] = xml.EscapeText
	decs["HTMLAutoClose"] = &xml.HTMLAutoClose
	decs["HTMLEntity"] = &xml.HTMLEntity
	decs["Header"] = native.UntypedStringConst("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
	decs["Marshal"] = xml.Marshal
	decs["MarshalIndent"] = xml.MarshalIndent
	decs["Marshaler"] = reflect.TypeOf((*xml.Marshaler)(nil)).Elem()
	decs["MarshalerAttr"] = reflect.TypeOf((*xml.MarshalerAttr)(nil)).Elem()
	decs["Name"] = reflect.TypeOf((*xml.Name)(nil)).Elem()
	decs["NewDecoder"] = xml.NewDecoder
	decs["NewEncoder"] = xml.NewEncoder
	decs["NewTokenDecoder"] = xml.NewTokenDecoder
	decs["ProcInst"] = reflect.TypeOf((*xml.ProcInst)(nil)).Elem()
	decs["StartElement"] = reflect.TypeOf((*xml.StartElement)(nil)).Elem()
	decs["SyntaxError"] = reflect.TypeOf((*xml.SyntaxError)(nil)).Elem()
	decs["TagPathError"] = reflect.TypeOf((*xml.TagPathError)(nil)).Elem()
	decs["Token"] = reflect.TypeOf((*xml.Token)(nil)).Elem()
	decs["TokenReader"] = reflect.TypeOf((*xml.TokenReader)(nil)).Elem()
	decs["Unmarshal"] = xml.Unmarshal
	decs["UnmarshalError"] = reflect.TypeOf((*xml.UnmarshalError)(nil)).Elem()
	decs["Unmarshaler"] = reflect.TypeOf((*xml.Unmarshaler)(nil)).Elem()
	decs["UnmarshalerAttr"] = reflect.TypeOf((*xml.UnmarshalerAttr)(nil)).Elem()
	decs["UnsupportedTypeError"] = reflect.TypeOf((*xml.UnsupportedTypeError)(nil)).Elem()
	NativePackages["encoding/xml"] = native.Package{
		Name:         "xml",
		Declarations: decs,
	}
	// "errors"
	decs = make(native.Declarations, 4)
	decs["As"] = errors.As
	decs["Is"] = errors.Is
	decs["New"] = errors.New
	decs["Unwrap"] = errors.Unwrap
	NativePackages["errors"] = native.Package{
		Name:         "errors",
		Declarations: decs,
	}
	// "fmt"
	decs = make(native.Declarations, 25)
	decs["Errorf"] = fmt.Errorf
	decs["Formatter"] = reflect.TypeOf((*fmt.Formatter)(nil)).Elem()
	decs["Fprint"] = fmt.Fprint
	decs["Fprintf"] = fmt.Fprintf
	decs["Fprintln"] = fmt.Fprintln
	decs["Fscan"] = fmt.Fscan
	decs["Fscanf"] = fmt.Fscanf
	decs["Fscanln"] = fmt.Fscanln
	decs["GoStringer"] = reflect.TypeOf((*fmt.GoStringer)(nil)).Elem()
	decs["Print"] = fmt.Print
	decs["Printf"] = fmt.Printf
	decs["Println"] = fmt.Println
	decs["Scan"] = fmt.Scan
	decs["ScanState"] = reflect.TypeOf((*fmt.ScanState)(nil)).Elem()
	decs["Scanf"] = fmt.Scanf
	decs["Scanln"] = fmt.Scanln
	decs["Scanner"] = reflect.TypeOf((*fmt.Scanner)(nil)).Elem()
	decs["Sprint"] = fmt.Sprint
	decs["Sprintf"] = fmt.Sprintf
	decs["Sprintln"] = fmt.Sprintln
	decs["Sscan"] = fmt.Sscan
	decs["Sscanf"] = fmt.Sscanf
	decs["Sscanln"] = fmt.Sscanln
	decs["State"] = reflect.TypeOf((*fmt.State)(nil)).Elem()
	decs["Stringer"] = reflect.TypeOf((*fmt.Stringer)(nil)).Elem()
	NativePackages["fmt"] = native.Package{
		Name:         "fmt",
		Declarations: decs,
	}
	// "gopkg.in/yaml.v3"
	decs = make(native.Declarations, 24)
	decs["AliasNode"] = yaml.AliasNode
	decs["Decoder"] = reflect.TypeOf((*yaml.Decoder)(nil)).Elem()
	decs["DocumentNode"] = yaml.DocumentNode
	decs["DoubleQuotedStyle"] = yaml.DoubleQuotedStyle
	decs["Encoder"] = reflect.TypeOf((*yaml.Encoder)(nil)).Elem()
	decs["FlowStyle"] = yaml.FlowStyle
	decs["FoldedStyle"] = yaml.FoldedStyle
	decs["IsZeroer"] = reflect.TypeOf((*yaml.IsZeroer)(nil)).Elem()
	decs["Kind"] = reflect.TypeOf((*yaml.Kind)(nil)).Elem()
	decs["LiteralStyle"] = yaml.LiteralStyle
	decs["MappingNode"] = yaml.MappingNode
	decs["Marshal"] = yaml.Marshal
	decs["Marshaler"] = reflect.TypeOf((*yaml.Marshaler)(nil)).Elem()
	decs["NewDecoder"] = yaml.NewDecoder
	decs["NewEncoder"] = yaml.NewEncoder
	decs["Node"] = reflect.TypeOf((*yaml.Node)(nil)).Elem()
	decs["ScalarNode"] = yaml.ScalarNode
	decs["SequenceNode"] = yaml.SequenceNode
	decs["SingleQuotedStyle"] = yaml.SingleQuotedStyle
	decs["Style"] = reflect.TypeOf((*yaml.Style)(nil)).Elem()
	decs["TaggedStyle"] = yaml.TaggedStyle
	decs["TypeError"] = reflect.TypeOf((*yaml.TypeError)(nil)).Elem()
	decs["Unmarshal"] = yaml.Unmarshal
	decs["Unmarshaler"] = reflect.TypeOf((*yaml.Unmarshaler)(nil)).Elem()
	NativePackages["gopkg.in/yaml.v3"] = native.Package{
		Name:         "yaml",
		Declarations: decs,
	}
	// "hash"
	decs = make(native.Declarations, 3)
	decs["Hash"] = reflect.TypeOf((*hash.Hash)(nil)).Elem()
	decs["Hash32"] = reflect.TypeOf((*hash.Hash32)(nil)).Elem()
	decs["Hash64"] = reflect.TypeOf((*hash.Hash64)(nil)).Elem()
	NativePackages["hash"] = native.Package{
		Name:         "hash",
		Declarations: decs,
	}
	// "hash/crc32"
	decs = make(native.Declarations, 12)
	decs["Castagnoli"] = native.UntypedNumericConst("2197175160")
	decs["Checksum"] = crc32.Checksum
	decs["ChecksumIEEE"] = crc32.ChecksumIEEE
	decs["IEEE"] = native.UntypedNumericConst("3988292384")
	decs["IEEETable"] = &crc32.IEEETable
	decs["Koopman"] = native.UntypedNumericConst("3945912366")
	decs["MakeTable"] = crc32.MakeTable
	decs["New"] = crc32.New
	decs["NewIEEE"] = crc32.NewIEEE
	decs["Size"] = native.UntypedNumericConst("4")
	decs["Table"] = reflect.TypeOf((*crc32.Table)(nil)).Elem()
	decs["Update"] = crc32.Update
	NativePackages["hash/crc32"] = native.Package{
		Name:         "crc32",
		Declarations: decs,
	}
	// "hash/crc64"
	decs = make(native.Declarations, 8)
	decs["Checksum"] = crc64.Checksum
	decs["ECMA"] = native.UntypedNumericConst("14514072000185962306")
	decs["ISO"] = native.UntypedNumericConst("15564440312192434176")
	decs["MakeTable"] = crc64.MakeTable
	decs["New"] = crc64.New
	decs["Size"] = native.UntypedNumericConst("8")
	decs["Table"] = reflect.TypeOf((*crc64.Table)(nil)).Elem()
	decs["Update"] = crc64.Update
	NativePackages["hash/crc64"] = native.Package{
		Name:         "crc64",
		Declarations: decs,
	}
	// "hash/maphash"
	decs = make(native.Declarations, 3)
	decs["Hash"] = reflect.TypeOf((*maphash.Hash)(nil)).Elem()
	decs["MakeSeed"] = maphash.MakeSeed
	decs["Seed"] = reflect.TypeOf((*maphash.Seed)(nil)).Elem()
	NativePackages["hash/maphash"] = native.Package{
		Name:         "maphash",
		Declarations: decs,
	}
	// "html"
	decs = make(native.Declarations, 2)
	decs["EscapeString"] = html.EscapeString
	decs["UnescapeString"] = html.UnescapeString
	NativePackages["html"] = native.Package{
		Name:         "html",
		Declarations: decs,
	}
	// "html/template"
	decs = make(native.Declarations, 36)
	decs["CSS"] = reflect.TypeOf((*template.CSS)(nil)).Elem()
	decs["ErrAmbigContext"] = template.ErrAmbigContext
	decs["ErrBadHTML"] = template.ErrBadHTML
	decs["ErrBranchEnd"] = template.ErrBranchEnd
	decs["ErrEndContext"] = template.ErrEndContext
	decs["ErrNoSuchTemplate"] = template.ErrNoSuchTemplate
	decs["ErrOutputContext"] = template.ErrOutputContext
	decs["ErrPartialCharset"] = template.ErrPartialCharset
	decs["ErrPartialEscape"] = template.ErrPartialEscape
	decs["ErrPredefinedEscaper"] = template.ErrPredefinedEscaper
	decs["ErrRangeLoopReentry"] = template.ErrRangeLoopReentry
	decs["ErrSlashAmbig"] = template.ErrSlashAmbig
	decs["Error"] = reflect.TypeOf((*template.Error)(nil)).Elem()
	decs["ErrorCode"] = reflect.TypeOf((*template.ErrorCode)(nil)).Elem()
	decs["FuncMap"] = reflect.TypeOf((*template.FuncMap)(nil)).Elem()
	decs["HTML"] = reflect.TypeOf((*template.HTML)(nil)).Elem()
	decs["HTMLAttr"] = reflect.TypeOf((*template.HTMLAttr)(nil)).Elem()
	decs["HTMLEscape"] = template.HTMLEscape
	decs["HTMLEscapeString"] = template.HTMLEscapeString
	decs["HTMLEscaper"] = template.HTMLEscaper
	decs["IsTrue"] = template.IsTrue
	decs["JS"] = reflect.TypeOf((*template.JS)(nil)).Elem()
	decs["JSEscape"] = template.JSEscape
	decs["JSEscapeString"] = template.JSEscapeString
	decs["JSEscaper"] = template.JSEscaper
	decs["JSStr"] = reflect.TypeOf((*template.JSStr)(nil)).Elem()
	decs["Must"] = template.Must
	decs["New"] = template.New
	decs["OK"] = template.OK
	decs["ParseFS"] = template.ParseFS
	decs["ParseFiles"] = template.ParseFiles
	decs["ParseGlob"] = template.ParseGlob
	decs["Srcset"] = reflect.TypeOf((*template.Srcset)(nil)).Elem()
	decs["Template"] = reflect.TypeOf((*template.Template)(nil)).Elem()
	decs["URL"] = reflect.TypeOf((*template.URL)(nil)).Elem()
	decs["URLQueryEscaper"] = template.URLQueryEscaper
	NativePackages["html/template"] = native.Package{
		Name:         "template",
		Declarations: decs,
	}
	// "image"
	decs = make(native.Declarations, 51)
	decs["Alpha"] = reflect.TypeOf((*image.Alpha)(nil)).Elem()
	decs["Alpha16"] = reflect.TypeOf((*image.Alpha16)(nil)).Elem()
	decs["Black"] = &image.Black
	decs["CMYK"] = reflect.TypeOf((*image.CMYK)(nil)).Elem()
	decs["Config"] = reflect.TypeOf((*image.Config)(nil)).Elem()
	decs["Decode"] = image.Decode
	decs["DecodeConfig"] = image.DecodeConfig
	decs["ErrFormat"] = &image.ErrFormat
	decs["Gray"] = reflect.TypeOf((*image.Gray)(nil)).Elem()
	decs["Gray16"] = reflect.TypeOf((*image.Gray16)(nil)).Elem()
	decs["Image"] = reflect.TypeOf((*image.Image)(nil)).Elem()
	decs["NRGBA"] = reflect.TypeOf((*image.NRGBA)(nil)).Elem()
	decs["NRGBA64"] = reflect.TypeOf((*image.NRGBA64)(nil)).Elem()
	decs["NYCbCrA"] = reflect.TypeOf((*image.NYCbCrA)(nil)).Elem()
	decs["NewAlpha"] = image.NewAlpha
	decs["NewAlpha16"] = image.NewAlpha16
	decs["NewCMYK"] = image.NewCMYK
	decs["NewGray"] = image.NewGray
	decs["NewGray16"] = image.NewGray16
	decs["NewNRGBA"] = image.NewNRGBA
	decs["NewNRGBA64"] = image.NewNRGBA64
	decs["NewNYCbCrA"] = image.NewNYCbCrA
	decs["NewPaletted"] = image.NewPaletted
	decs["NewRGBA"] = image.NewRGBA
	decs["NewRGBA64"] = image.NewRGBA64
	decs["NewUniform"] = image.NewUniform
	decs["NewYCbCr"] = image.NewYCbCr
	decs["Opaque"] = &image.Opaque
	decs["Paletted"] = reflect.TypeOf((*image.Paletted)(nil)).Elem()
	decs["PalettedImage"] = reflect.TypeOf((*image.PalettedImage)(nil)).Elem()
	decs["Point"] = reflect.TypeOf((*image.Point)(nil)).Elem()
	decs["Pt"] = image.Pt
	decs["RGBA"] = reflect.TypeOf((*image.RGBA)(nil)).Elem()
	decs["RGBA64"] = reflect.TypeOf((*image.RGBA64)(nil)).Elem()
	decs["RGBA64Image"] = reflect.TypeOf((*image.RGBA64Image)(nil)).Elem()
	decs["Rect"] = image.Rect
	decs["Rectangle"] = reflect.TypeOf((*image.Rectangle)(nil)).Elem()
	decs["RegisterFormat"] = image.RegisterFormat
	decs["Transparent"] = &image.Transparent
	decs["Uniform"] = reflect.TypeOf((*image.Uniform)(nil)).Elem()
	decs["White"] = &image.White
	decs["YCbCr"] = reflect.TypeOf((*image.YCbCr)(nil)).Elem()
	decs["YCbCrSubsampleRatio"] = reflect.TypeOf((*image.YCbCrSubsampleRatio)(nil)).Elem()
	decs["YCbCrSubsampleRatio410"] = image.YCbCrSubsampleRatio410
	decs["YCbCrSubsampleRatio411"] = image.YCbCrSubsampleRatio411
	decs["YCbCrSubsampleRatio420"] = image.YCbCrSubsampleRatio420
	decs["YCbCrSubsampleRatio422"] = image.YCbCrSubsampleRatio422
	decs["YCbCrSubsampleRatio440"] = image.YCbCrSubsampleRatio440
	decs["YCbCrSubsampleRatio444"] = image.YCbCrSubsampleRatio444
	decs["ZP"] = &image.ZP
	decs["ZR"] = &image.ZR
	NativePackages["image"] = native.Package{
		Name:         "image",
		Declarations: decs,
	}
	// "image/color"
	decs = make(native.Declarations, 34)
	decs["Alpha"] = reflect.TypeOf((*color.Alpha)(nil)).Elem()
	decs["Alpha16"] = reflect.TypeOf((*color.Alpha16)(nil)).Elem()
	decs["Alpha16Model"] = &color.Alpha16Model
	decs["AlphaModel"] = &color.AlphaModel
	decs["Black"] = &color.Black
	decs["CMYK"] = reflect.TypeOf((*color.CMYK)(nil)).Elem()
	decs["CMYKModel"] = &color.CMYKModel
	decs["CMYKToRGB"] = color.CMYKToRGB
	decs["Color"] = reflect.TypeOf((*color.Color)(nil)).Elem()
	decs["Gray"] = reflect.TypeOf((*color.Gray)(nil)).Elem()
	decs["Gray16"] = reflect.TypeOf((*color.Gray16)(nil)).Elem()
	decs["Gray16Model"] = &color.Gray16Model
	decs["GrayModel"] = &color.GrayModel
	decs["Model"] = reflect.TypeOf((*color.Model)(nil)).Elem()
	decs["ModelFunc"] = color.ModelFunc
	decs["NRGBA"] = reflect.TypeOf((*color.NRGBA)(nil)).Elem()
	decs["NRGBA64"] = reflect.TypeOf((*color.NRGBA64)(nil)).Elem()
	decs["NRGBA64Model"] = &color.NRGBA64Model
	decs["NRGBAModel"] = &color.NRGBAModel
	decs["NYCbCrA"] = reflect.TypeOf((*color.NYCbCrA)(nil)).Elem()
	decs["NYCbCrAModel"] = &color.NYCbCrAModel
	decs["Opaque"] = &color.Opaque
	decs["Palette"] = reflect.TypeOf((*color.Palette)(nil)).Elem()
	decs["RGBA"] = reflect.TypeOf((*color.RGBA)(nil)).Elem()
	decs["RGBA64"] = reflect.TypeOf((*color.RGBA64)(nil)).Elem()
	decs["RGBA64Model"] = &color.RGBA64Model
	decs["RGBAModel"] = &color.RGBAModel
	decs["RGBToCMYK"] = color.RGBToCMYK
	decs["RGBToYCbCr"] = color.RGBToYCbCr
	decs["Transparent"] = &color.Transparent
	decs["White"] = &color.White
	decs["YCbCr"] = reflect.TypeOf((*color.YCbCr)(nil)).Elem()
	decs["YCbCrModel"] = &color.YCbCrModel
	decs["YCbCrToRGB"] = color.YCbCrToRGB
	NativePackages["image/color"] = native.Package{
		Name:         "color",
		Declarations: decs,
	}
	// "image/color/palette"
	decs = make(native.Declarations, 2)
	decs["Plan9"] = &palette.Plan9
	decs["WebSafe"] = &palette.WebSafe
	NativePackages["image/color/palette"] = native.Package{
		Name:         "palette",
		Declarations: decs,
	}
	// "image/draw"
	decs = make(native.Declarations, 10)
	decs["Draw"] = draw.Draw
	decs["DrawMask"] = draw.DrawMask
	decs["Drawer"] = reflect.TypeOf((*draw.Drawer)(nil)).Elem()
	decs["FloydSteinberg"] = &draw.FloydSteinberg
	decs["Image"] = reflect.TypeOf((*draw.Image)(nil)).Elem()
	decs["Op"] = reflect.TypeOf((*draw.Op)(nil)).Elem()
	decs["Over"] = draw.Over
	decs["Quantizer"] = reflect.TypeOf((*draw.Quantizer)(nil)).Elem()
	decs["RGBA64Image"] = reflect.TypeOf((*draw.RGBA64Image)(nil)).Elem()
	decs["Src"] = draw.Src
	NativePackages["image/draw"] = native.Package{
		Name:         "draw",
		Declarations: decs,
	}
	// "image/gif"
	decs = make(native.Declarations, 10)
	decs["Decode"] = gif.Decode
	decs["DecodeAll"] = gif.DecodeAll
	decs["DecodeConfig"] = gif.DecodeConfig
	decs["DisposalBackground"] = native.UntypedNumericConst("2")
	decs["DisposalNone"] = native.UntypedNumericConst("1")
	decs["DisposalPrevious"] = native.UntypedNumericConst("3")
	decs["Encode"] = gif.Encode
	decs["EncodeAll"] = gif.EncodeAll
	decs["GIF"] = reflect.TypeOf((*gif.GIF)(nil)).Elem()
	decs["Options"] = reflect.TypeOf((*gif.Options)(nil)).Elem()
	NativePackages["image/gif"] = native.Package{
		Name:         "gif",
		Declarations: decs,
	}
	// "image/jpeg"
	decs = make(native.Declarations, 8)
	decs["Decode"] = jpeg.Decode
	decs["DecodeConfig"] = jpeg.DecodeConfig
	decs["DefaultQuality"] = native.UntypedNumericConst("75")
	decs["Encode"] = jpeg.Encode
	decs["FormatError"] = reflect.TypeOf((*jpeg.FormatError)(nil)).Elem()
	decs["Options"] = reflect.TypeOf((*jpeg.Options)(nil)).Elem()
	decs["Reader"] = reflect.TypeOf((*jpeg.Reader)(nil)).Elem()
	decs["UnsupportedError"] = reflect.TypeOf((*jpeg.UnsupportedError)(nil)).Elem()
	NativePackages["image/jpeg"] = native.Package{
		Name:         "jpeg",
		Declarations: decs,
	}
	// "image/png"
	decs = make(native.Declarations, 13)
	decs["BestCompression"] = png.BestCompression
	decs["BestSpeed"] = png.BestSpeed
	decs["CompressionLevel"] = reflect.TypeOf((*png.CompressionLevel)(nil)).Elem()
	decs["Decode"] = png.Decode
	decs["DecodeConfig"] = png.DecodeConfig
	decs["DefaultCompression"] = png.DefaultCompression
	decs["Encode"] = png.Encode
	decs["Encoder"] = reflect.TypeOf((*png.Encoder)(nil)).Elem()
	decs["EncoderBuffer"] = reflect.TypeOf((*png.EncoderBuffer)(nil)).Elem()
	decs["EncoderBufferPool"] = reflect.TypeOf((*png.EncoderBufferPool)(nil)).Elem()
	decs["FormatError"] = reflect.TypeOf((*png.FormatError)(nil)).Elem()
	decs["NoCompression"] = png.NoCompression
	decs["UnsupportedError"] = reflect.TypeOf((*png.UnsupportedError)(nil)).Elem()
	NativePackages["image/png"] = native.Package{
		Name:         "png",
		Declarations: decs,
	}
	// "index/suffixarray"
	decs = make(native.Declarations, 2)
	decs["Index"] = reflect.TypeOf((*suffixarray.Index)(nil)).Elem()
	decs["New"] = suffixarray.New
	NativePackages["index/suffixarray"] = native.Package{
		Name:         "suffixarray",
		Declarations: decs,
	}
	// "io"
	decs = make(native.Declarations, 50)
	decs["ByteReader"] = reflect.TypeOf((*io.ByteReader)(nil)).Elem()
	decs["ByteScanner"] = reflect.TypeOf((*io.ByteScanner)(nil)).Elem()
	decs["ByteWriter"] = reflect.TypeOf((*io.ByteWriter)(nil)).Elem()
	decs["Closer"] = reflect.TypeOf((*io.Closer)(nil)).Elem()
	decs["Copy"] = io.Copy
	decs["CopyBuffer"] = io.CopyBuffer
	decs["CopyN"] = io.CopyN
	decs["Discard"] = &io.Discard
	decs["EOF"] = &io.EOF
	decs["ErrClosedPipe"] = &io.ErrClosedPipe
	decs["ErrNoProgress"] = &io.ErrNoProgress
	decs["ErrShortBuffer"] = &io.ErrShortBuffer
	decs["ErrShortWrite"] = &io.ErrShortWrite
	decs["ErrUnexpectedEOF"] = &io.ErrUnexpectedEOF
	decs["LimitReader"] = io.LimitReader
	decs["LimitedReader"] = reflect.TypeOf((*io.LimitedReader)(nil)).Elem()
	decs["MultiReader"] = io.MultiReader
	decs["MultiWriter"] = io.MultiWriter
	decs["NewSectionReader"] = io.NewSectionReader
	decs["NopCloser"] = io.NopCloser
	decs["Pipe"] = io.Pipe
	decs["PipeReader"] = reflect.TypeOf((*io.PipeReader)(nil)).Elem()
	decs["PipeWriter"] = reflect.TypeOf((*io.PipeWriter)(nil)).Elem()
	decs["ReadAll"] = io.ReadAll
	decs["ReadAtLeast"] = io.ReadAtLeast
	decs["ReadCloser"] = reflect.TypeOf((*io.ReadCloser)(nil)).Elem()
	decs["ReadFull"] = io.ReadFull
	decs["ReadSeekCloser"] = reflect.TypeOf((*io.ReadSeekCloser)(nil)).Elem()
	decs["ReadSeeker"] = reflect.TypeOf((*io.ReadSeeker)(nil)).Elem()
	decs["ReadWriteCloser"] = reflect.TypeOf((*io.ReadWriteCloser)(nil)).Elem()
	decs["ReadWriteSeeker"] = reflect.TypeOf((*io.ReadWriteSeeker)(nil)).Elem()
	decs["ReadWriter"] = reflect.TypeOf((*io.ReadWriter)(nil)).Elem()
	decs["Reader"] = reflect.TypeOf((*io.Reader)(nil)).Elem()
	decs["ReaderAt"] = reflect.TypeOf((*io.ReaderAt)(nil)).Elem()
	decs["ReaderFrom"] = reflect.TypeOf((*io.ReaderFrom)(nil)).Elem()
	decs["RuneReader"] = reflect.TypeOf((*io.RuneReader)(nil)).Elem()
	decs["RuneScanner"] = reflect.TypeOf((*io.RuneScanner)(nil)).Elem()
	decs["SectionReader"] = reflect.TypeOf((*io.SectionReader)(nil)).Elem()
	decs["SeekCurrent"] = native.UntypedNumericConst("1")
	decs["SeekEnd"] = native.UntypedNumericConst("2")
	decs["SeekStart"] = native.UntypedNumericConst("0")
	decs["Seeker"] = reflect.TypeOf((*io.Seeker)(nil)).Elem()
	decs["StringWriter"] = reflect.TypeOf((*io.StringWriter)(nil)).Elem()
	decs["TeeReader"] = io.TeeReader
	decs["WriteCloser"] = reflect.TypeOf((*io.WriteCloser)(nil)).Elem()
	decs["WriteSeeker"] = reflect.TypeOf((*io.WriteSeeker)(nil)).Elem()
	decs["WriteString"] = io.WriteString
	decs["Writer"] = reflect.TypeOf((*io.Writer)(nil)).Elem()
	decs["WriterAt"] = reflect.TypeOf((*io.WriterAt)(nil)).Elem()
	decs["WriterTo"] = reflect.TypeOf((*io.WriterTo)(nil)).Elem()
	NativePackages["io"] = native.Package{
		Name:         "io",
		Declarations: decs,
	}
	// "io/fs"
	decs = make(native.Declarations, 42)
	decs["DirEntry"] = reflect.TypeOf((*fs.DirEntry)(nil)).Elem()
	decs["ErrClosed"] = &fs.ErrClosed
	decs["ErrExist"] = &fs.ErrExist
	decs["ErrInvalid"] = &fs.ErrInvalid
	decs["ErrNotExist"] = &fs.ErrNotExist
	decs["ErrPermission"] = &fs.ErrPermission
	decs["FS"] = reflect.TypeOf((*fs.FS)(nil)).Elem()
	decs["File"] = reflect.TypeOf((*fs.File)(nil)).Elem()
	decs["FileInfo"] = reflect.TypeOf((*fs.FileInfo)(nil)).Elem()
	decs["FileInfoToDirEntry"] = fs.FileInfoToDirEntry
	decs["FileMode"] = reflect.TypeOf((*fs.FileMode)(nil)).Elem()
	decs["Glob"] = fs.Glob
	decs["GlobFS"] = reflect.TypeOf((*fs.GlobFS)(nil)).Elem()
	decs["ModeAppend"] = fs.ModeAppend
	decs["ModeCharDevice"] = fs.ModeCharDevice
	decs["ModeDevice"] = fs.ModeDevice
	decs["ModeDir"] = fs.ModeDir
	decs["ModeExclusive"] = fs.ModeExclusive
	decs["ModeIrregular"] = fs.ModeIrregular
	decs["ModeNamedPipe"] = fs.ModeNamedPipe
	decs["ModePerm"] = fs.ModePerm
	decs["ModeSetgid"] = fs.ModeSetgid
	decs["ModeSetuid"] = fs.ModeSetuid
	decs["ModeSocket"] = fs.ModeSocket
	decs["ModeSticky"] = fs.ModeSticky
	decs["ModeSymlink"] = fs.ModeSymlink
	decs["ModeTemporary"] = fs.ModeTemporary
	decs["ModeType"] = fs.ModeType
	decs["PathError"] = reflect.TypeOf((*fs.PathError)(nil)).Elem()
	decs["ReadDir"] = fs.ReadDir
	decs["ReadDirFS"] = reflect.TypeOf((*fs.ReadDirFS)(nil)).Elem()
	decs["ReadDirFile"] = reflect.TypeOf((*fs.ReadDirFile)(nil)).Elem()
	decs["ReadFile"] = fs.ReadFile
	decs["ReadFileFS"] = reflect.TypeOf((*fs.ReadFileFS)(nil)).Elem()
	decs["SkipDir"] = &fs.SkipDir
	decs["Stat"] = fs.Stat
	decs["StatFS"] = reflect.TypeOf((*fs.StatFS)(nil)).Elem()
	decs["Sub"] = fs.Sub
	decs["SubFS"] = reflect.TypeOf((*fs.SubFS)(nil)).Elem()
	decs["ValidPath"] = fs.ValidPath
	decs["WalkDir"] = fs.WalkDir
	decs["WalkDirFunc"] = reflect.TypeOf((*fs.WalkDirFunc)(nil)).Elem()
	NativePackages["io/fs"] = native.Package{
		Name:         "fs",
		Declarations: decs,
	}
	// "math"
	decs = make(native.Declarations, 97)
	decs["Abs"] = math.Abs
	decs["Acos"] = math.Acos
	decs["Acosh"] = math.Acosh
	decs["Asin"] = math.Asin
	decs["Asinh"] = math.Asinh
	decs["Atan"] = math.Atan
	decs["Atan2"] = math.Atan2
	decs["Atanh"] = math.Atanh
	decs["Cbrt"] = math.Cbrt
	decs["Ceil"] = math.Ceil
	decs["Copysign"] = math.Copysign
	decs["Cos"] = math.Cos
	decs["Cosh"] = math.Cosh
	decs["Dim"] = math.Dim
	decs["E"] = native.UntypedNumericConst("2.71828182845904523536028747135266249775724709369995957496696763")
	decs["Erf"] = math.Erf
	decs["Erfc"] = math.Erfc
	decs["Erfcinv"] = math.Erfcinv
	decs["Erfinv"] = math.Erfinv
	decs["Exp"] = math.Exp
	decs["Exp2"] = math.Exp2
	decs["Expm1"] = math.Expm1
	decs["FMA"] = math.FMA
	decs["Float32bits"] = math.Float32bits
	decs["Float32frombits"] = math.Float32frombits
	decs["Float64bits"] = math.Float64bits
	decs["Float64frombits"] = math.Float64frombits
	decs["Floor"] = math.Floor
	decs["Frexp"] = math.Frexp
	decs["Gamma"] = math.Gamma
	decs["Hypot"] = math.Hypot
	decs["Ilogb"] = math.Ilogb
	decs["Inf"] = math.Inf
	decs["IsInf"] = math.IsInf
	decs["IsNaN"] = math.IsNaN
	decs["J0"] = math.J0
	decs["J1"] = math.J1
	decs["Jn"] = math.Jn
	decs["Ldexp"] = math.Ldexp
	decs["Lgamma"] = math.Lgamma
	decs["Ln10"] = native.UntypedNumericConst("2.3025850929940456840179914546843642076011014886287729760333279")
	decs["Ln2"] = native.UntypedNumericConst("0.693147180559945309417232121458176568075500134360255254120680009")
	decs["Log"] = math.Log
	decs["Log10"] = math.Log10
	decs["Log10E"] = native.UntypedNumericConst("10000000000000000000000000000000000000000000000000000000000000/23025850929940456840179914546843642076011014886287729760333279")
	decs["Log1p"] = math.Log1p
	decs["Log2"] = math.Log2
	decs["Log2E"] = native.UntypedNumericConst("1000000000000000000000000000000000000000000000000000000000000000/693147180559945309417232121458176568075500134360255254120680009")
	decs["Logb"] = math.Logb
	decs["Max"] = math.Max
	decs["MaxFloat32"] = native.UntypedNumericConst("340282346638528859811704183484516925440.0")
	decs["MaxFloat64"] = native.UntypedNumericConst("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0")
	decs["MaxInt"] = native.UntypedNumericConst("9223372036854775807")
	decs["MaxInt16"] = native.UntypedNumericConst("32767")
	decs["MaxInt32"] = native.UntypedNumericConst("2147483647")
	decs["MaxInt64"] = native.UntypedNumericConst("9223372036854775807")
	decs["MaxInt8"] = native.UntypedNumericConst("127")
	decs["MaxUint"] = native.UntypedNumericConst("18446744073709551615")
	decs["MaxUint16"] = native.UntypedNumericConst("65535")
	decs["MaxUint32"] = native.UntypedNumericConst("4294967295")
	decs["MaxUint64"] = native.UntypedNumericConst("18446744073709551615")
	decs["MaxUint8"] = native.UntypedNumericConst("255")
	decs["Min"] = math.Min
	decs["MinInt"] = native.UntypedNumericConst("-9223372036854775808")
	decs["MinInt16"] = native.UntypedNumericConst("-32768")
	decs["MinInt32"] = native.UntypedNumericConst("-2147483648")
	decs["MinInt64"] = native.UntypedNumericConst("-9223372036854775808")
	decs["MinInt8"] = native.UntypedNumericConst("-128")
	decs["Mod"] = math.Mod
	decs["Modf"] = math.Modf
	decs["NaN"] = math.NaN
	decs["Nextafter"] = math.Nextafter
	decs["Nextafter32"] = math.Nextafter32
	decs["Phi"] = native.UntypedNumericConst("1.61803398874989484820458683436563811772030917980576286213544862")
	decs["Pi"] = native.UntypedNumericConst("3.14159265358979323846264338327950288419716939937510582097494459")
	decs["Pow"] = math.Pow
	decs["Pow10"] = math.Pow10
	decs["Remainder"] = math.Remainder
	decs["Round"] = math.Round
	decs["RoundToEven"] = math.RoundToEven
	decs["Signbit"] = math.Signbit
	decs["Sin"] = math.Sin
	decs["Sincos"] = math.Sincos
	decs["Sinh"] = math.Sinh
	decs["SmallestNonzeroFloat32"] = native.UntypedNumericConst("1.40129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125e-45")
	decs["SmallestNonzeroFloat64"] = native.UntypedNumericConst("1/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784")
	decs["Sqrt"] = math.Sqrt
	decs["Sqrt2"] = native.UntypedNumericConst("1.41421356237309504880168872420969807856967187537694807317667974")
	decs["SqrtE"] = native.UntypedNumericConst("1.64872127070012814684865078781416357165377610071014801157507931")
	decs["SqrtPhi"] = native.UntypedNumericConst("1.27201964951406896425242246173749149171560804184009624861664038")
	decs["SqrtPi"] = native.UntypedNumericConst("1.77245385090551602729816748334114518279754945612238712821380779")
	decs["Tan"] = math.Tan
	decs["Tanh"] = math.Tanh
	decs["Trunc"] = math.Trunc
	decs["Y0"] = math.Y0
	decs["Y1"] = math.Y1
	decs["Yn"] = math.Yn
	NativePackages["math"] = native.Package{
		Name:         "math",
		Declarations: decs,
	}
	// "math/big"
	decs = make(native.Declarations, 25)
	decs["Above"] = big.Above
	decs["Accuracy"] = reflect.TypeOf((*big.Accuracy)(nil)).Elem()
	decs["AwayFromZero"] = big.AwayFromZero
	decs["Below"] = big.Below
	decs["ErrNaN"] = reflect.TypeOf((*big.ErrNaN)(nil)).Elem()
	decs["Exact"] = big.Exact
	decs["Float"] = reflect.TypeOf((*big.Float)(nil)).Elem()
	decs["Int"] = reflect.TypeOf((*big.Int)(nil)).Elem()
	decs["Jacobi"] = big.Jacobi
	decs["MaxBase"] = native.UntypedNumericConst("62")
	decs["MaxExp"] = native.UntypedNumericConst("2147483647")
	decs["MaxPrec"] = native.UntypedNumericConst("4294967295")
	decs["MinExp"] = native.UntypedNumericConst("-2147483648")
	decs["NewFloat"] = big.NewFloat
	decs["NewInt"] = big.NewInt
	decs["NewRat"] = big.NewRat
	decs["ParseFloat"] = big.ParseFloat
	decs["Rat"] = reflect.TypeOf((*big.Rat)(nil)).Elem()
	decs["RoundingMode"] = reflect.TypeOf((*big.RoundingMode)(nil)).Elem()
	decs["ToNearestAway"] = big.ToNearestAway
	decs["ToNearestEven"] = big.ToNearestEven
	decs["ToNegativeInf"] = big.ToNegativeInf
	decs["ToPositiveInf"] = big.ToPositiveInf
	decs["ToZero"] = big.ToZero
	decs["Word"] = reflect.TypeOf((*big.Word)(nil)).Elem()
	NativePackages["math/big"] = native.Package{
		Name:         "big",
		Declarations: decs,
	}
	// "math/bits"
	decs = make(native.Declarations, 50)
	decs["Add"] = bits.Add
	decs["Add32"] = bits.Add32
	decs["Add64"] = bits.Add64
	decs["Div"] = bits.Div
	decs["Div32"] = bits.Div32
	decs["Div64"] = bits.Div64
	decs["LeadingZeros"] = bits.LeadingZeros
	decs["LeadingZeros16"] = bits.LeadingZeros16
	decs["LeadingZeros32"] = bits.LeadingZeros32
	decs["LeadingZeros64"] = bits.LeadingZeros64
	decs["LeadingZeros8"] = bits.LeadingZeros8
	decs["Len"] = bits.Len
	decs["Len16"] = bits.Len16
	decs["Len32"] = bits.Len32
	decs["Len64"] = bits.Len64
	decs["Len8"] = bits.Len8
	decs["Mul"] = bits.Mul
	decs["Mul32"] = bits.Mul32
	decs["Mul64"] = bits.Mul64
	decs["OnesCount"] = bits.OnesCount
	decs["OnesCount16"] = bits.OnesCount16
	decs["OnesCount32"] = bits.OnesCount32
	decs["OnesCount64"] = bits.OnesCount64
	decs["OnesCount8"] = bits.OnesCount8
	decs["Rem"] = bits.Rem
	decs["Rem32"] = bits.Rem32
	decs["Rem64"] = bits.Rem64
	decs["Reverse"] = bits.Reverse
	decs["Reverse16"] = bits.Reverse16
	decs["Reverse32"] = bits.Reverse32
	decs["Reverse64"] = bits.Reverse64
	decs["Reverse8"] = bits.Reverse8
	decs["ReverseBytes"] = bits.ReverseBytes
	decs["ReverseBytes16"] = bits.ReverseBytes16
	decs["ReverseBytes32"] = bits.ReverseBytes32
	decs["ReverseBytes64"] = bits.ReverseBytes64
	decs["RotateLeft"] = bits.RotateLeft
	decs["RotateLeft16"] = bits.RotateLeft16
	decs["RotateLeft32"] = bits.RotateLeft32
	decs["RotateLeft64"] = bits.RotateLeft64
	decs["RotateLeft8"] = bits.RotateLeft8
	decs["Sub"] = bits.Sub
	decs["Sub32"] = bits.Sub32
	decs["Sub64"] = bits.Sub64
	decs["TrailingZeros"] = bits.TrailingZeros
	decs["TrailingZeros16"] = bits.TrailingZeros16
	decs["TrailingZeros32"] = bits.TrailingZeros32
	decs["TrailingZeros64"] = bits.TrailingZeros64
	decs["TrailingZeros8"] = bits.TrailingZeros8
	decs["UintSize"] = native.UntypedNumericConst("64")
	NativePackages["math/bits"] = native.Package{
		Name:         "bits",
		Declarations: decs,
	}
	// "math/cmplx"
	decs = make(native.Declarations, 27)
	decs["Abs"] = cmplx.Abs
	decs["Acos"] = cmplx.Acos
	decs["Acosh"] = cmplx.Acosh
	decs["Asin"] = cmplx.Asin
	decs["Asinh"] = cmplx.Asinh
	decs["Atan"] = cmplx.Atan
	decs["Atanh"] = cmplx.Atanh
	decs["Conj"] = cmplx.Conj
	decs["Cos"] = cmplx.Cos
	decs["Cosh"] = cmplx.Cosh
	decs["Cot"] = cmplx.Cot
	decs["Exp"] = cmplx.Exp
	decs["Inf"] = cmplx.Inf
	decs["IsInf"] = cmplx.IsInf
	decs["IsNaN"] = cmplx.IsNaN
	decs["Log"] = cmplx.Log
	decs["Log10"] = cmplx.Log10
	decs["NaN"] = cmplx.NaN
	decs["Phase"] = cmplx.Phase
	decs["Polar"] = cmplx.Polar
	decs["Pow"] = cmplx.Pow
	decs["Rect"] = cmplx.Rect
	decs["Sin"] = cmplx.Sin
	decs["Sinh"] = cmplx.Sinh
	decs["Sqrt"] = cmplx.Sqrt
	decs["Tan"] = cmplx.Tan
	decs["Tanh"] = cmplx.Tanh
	NativePackages["math/cmplx"] = native.Package{
		Name:         "cmplx",
		Declarations: decs,
	}
	// "math/rand"
	decs = make(native.Declarations, 23)
	decs["ExpFloat64"] = rand_2.ExpFloat64
	decs["Float32"] = rand_2.Float32
	decs["Float64"] = rand_2.Float64
	decs["Int"] = rand_2.Int
	decs["Int31"] = rand_2.Int31
	decs["Int31n"] = rand_2.Int31n
	decs["Int63"] = rand_2.Int63
	decs["Int63n"] = rand_2.Int63n
	decs["Intn"] = rand_2.Intn
	decs["New"] = rand_2.New
	decs["NewSource"] = rand_2.NewSource
	decs["NewZipf"] = rand_2.NewZipf
	decs["NormFloat64"] = rand_2.NormFloat64
	decs["Perm"] = rand_2.Perm
	decs["Rand"] = reflect.TypeOf((*rand_2.Rand)(nil)).Elem()
	decs["Read"] = rand_2.Read
	decs["Seed"] = rand_2.Seed
	decs["Shuffle"] = rand_2.Shuffle
	decs["Source"] = reflect.TypeOf((*rand_2.Source)(nil)).Elem()
	decs["Source64"] = reflect.TypeOf((*rand_2.Source64)(nil)).Elem()
	decs["Uint32"] = rand_2.Uint32
	decs["Uint64"] = rand_2.Uint64
	decs["Zipf"] = reflect.TypeOf((*rand_2.Zipf)(nil)).Elem()
	NativePackages["math/rand"] = native.Package{
		Name:         "rand",
		Declarations: decs,
	}
	// "mime"
	decs = make(native.Declarations, 10)
	decs["AddExtensionType"] = mime.AddExtensionType
	decs["BEncoding"] = mime.BEncoding
	decs["ErrInvalidMediaParameter"] = &mime.ErrInvalidMediaParameter
	decs["ExtensionsByType"] = mime.ExtensionsByType
	decs["FormatMediaType"] = mime.FormatMediaType
	decs["ParseMediaType"] = mime.ParseMediaType
	decs["QEncoding"] = mime.QEncoding
	decs["TypeByExtension"] = mime.TypeByExtension
	decs["WordDecoder"] = reflect.TypeOf((*mime.WordDecoder)(nil)).Elem()
	decs["WordEncoder"] = reflect.TypeOf((*mime.WordEncoder)(nil)).Elem()
	NativePackages["mime"] = native.Package{
		Name:         "mime",
		Declarations: decs,
	}
	// "mime/multipart"
	decs = make(native.Declarations, 9)
	decs["ErrMessageTooLarge"] = &multipart.ErrMessageTooLarge
	decs["File"] = reflect.TypeOf((*multipart.File)(nil)).Elem()
	decs["FileHeader"] = reflect.TypeOf((*multipart.FileHeader)(nil)).Elem()
	decs["Form"] = reflect.TypeOf((*multipart.Form)(nil)).Elem()
	decs["NewReader"] = multipart.NewReader
	decs["NewWriter"] = multipart.NewWriter
	decs["Part"] = reflect.TypeOf((*multipart.Part)(nil)).Elem()
	decs["Reader"] = reflect.TypeOf((*multipart.Reader)(nil)).Elem()
	decs["Writer"] = reflect.TypeOf((*multipart.Writer)(nil)).Elem()
	NativePackages["mime/multipart"] = native.Package{
		Name:         "multipart",
		Declarations: decs,
	}
	// "mime/quotedprintable"
	decs = make(native.Declarations, 4)
	decs["NewReader"] = quotedprintable.NewReader
	decs["NewWriter"] = quotedprintable.NewWriter
	decs["Reader"] = reflect.TypeOf((*quotedprintable.Reader)(nil)).Elem()
	decs["Writer"] = reflect.TypeOf((*quotedprintable.Writer)(nil)).Elem()
	NativePackages["mime/quotedprintable"] = native.Package{
		Name:         "quotedprintable",
		Declarations: decs,
	}
	// "net"
	decs = make(native.Declarations, 100)
	decs["Addr"] = reflect.TypeOf((*net.Addr)(nil)).Elem()
	decs["AddrError"] = reflect.TypeOf((*net.AddrError)(nil)).Elem()
	decs["Buffers"] = reflect.TypeOf((*net.Buffers)(nil)).Elem()
	decs["CIDRMask"] = net.CIDRMask
	decs["Conn"] = reflect.TypeOf((*net.Conn)(nil)).Elem()
	decs["DNSConfigError"] = reflect.TypeOf((*net.DNSConfigError)(nil)).Elem()
	decs["DNSError"] = reflect.TypeOf((*net.DNSError)(nil)).Elem()
	decs["DefaultResolver"] = &net.DefaultResolver
	decs["Dial"] = net.Dial
	decs["DialIP"] = net.DialIP
	decs["DialTCP"] = net.DialTCP
	decs["DialTimeout"] = net.DialTimeout
	decs["DialUDP"] = net.DialUDP
	decs["DialUnix"] = net.DialUnix
	decs["Dialer"] = reflect.TypeOf((*net.Dialer)(nil)).Elem()
	decs["ErrClosed"] = &net.ErrClosed
	decs["ErrWriteToConnected"] = &net.ErrWriteToConnected
	decs["Error"] = reflect.TypeOf((*net.Error)(nil)).Elem()
	decs["FileConn"] = net.FileConn
	decs["FileListener"] = net.FileListener
	decs["FilePacketConn"] = net.FilePacketConn
	decs["FlagBroadcast"] = net.FlagBroadcast
	decs["FlagLoopback"] = net.FlagLoopback
	decs["FlagMulticast"] = net.FlagMulticast
	decs["FlagPointToPoint"] = net.FlagPointToPoint
	decs["FlagUp"] = net.FlagUp
	decs["Flags"] = reflect.TypeOf((*net.Flags)(nil)).Elem()
	decs["HardwareAddr"] = reflect.TypeOf((*net.HardwareAddr)(nil)).Elem()
	decs["IP"] = reflect.TypeOf((*net.IP)(nil)).Elem()
	decs["IPAddr"] = reflect.TypeOf((*net.IPAddr)(nil)).Elem()
	decs["IPConn"] = reflect.TypeOf((*net.IPConn)(nil)).Elem()
	decs["IPMask"] = reflect.TypeOf((*net.IPMask)(nil)).Elem()
	decs["IPNet"] = reflect.TypeOf((*net.IPNet)(nil)).Elem()
	decs["IPv4"] = net.IPv4
	decs["IPv4Mask"] = net.IPv4Mask
	decs["IPv4allrouter"] = &net.IPv4allrouter
	decs["IPv4allsys"] = &net.IPv4allsys
	decs["IPv4bcast"] = &net.IPv4bcast
	decs["IPv4len"] = native.UntypedNumericConst("4")
	decs["IPv4zero"] = &net.IPv4zero
	decs["IPv6interfacelocalallnodes"] = &net.IPv6interfacelocalallnodes
	decs["IPv6len"] = native.UntypedNumericConst("16")
	decs["IPv6linklocalallnodes"] = &net.IPv6linklocalallnodes
	decs["IPv6linklocalallrouters"] = &net.IPv6linklocalallrouters
	decs["IPv6loopback"] = &net.IPv6loopback
	decs["IPv6unspecified"] = &net.IPv6unspecified
	decs["IPv6zero"] = &net.IPv6zero
	decs["Interface"] = reflect.TypeOf((*net.Interface)(nil)).Elem()
	decs["InterfaceAddrs"] = net.InterfaceAddrs
	decs["InterfaceByIndex"] = net.InterfaceByIndex
	decs["InterfaceByName"] = net.InterfaceByName
	decs["Interfaces"] = net.Interfaces
	decs["InvalidAddrError"] = reflect.TypeOf((*net.InvalidAddrError)(nil)).Elem()
	decs["JoinHostPort"] = net.JoinHostPort
	decs["Listen"] = net.Listen
	decs["ListenConfig"] = reflect.TypeOf((*net.ListenConfig)(nil)).Elem()
	decs["ListenIP"] = net.ListenIP
	decs["ListenMulticastUDP"] = net.ListenMulticastUDP
	decs["ListenPacket"] = net.ListenPacket
	decs["ListenTCP"] = net.ListenTCP
	decs["ListenUDP"] = net.ListenUDP
	decs["ListenUnix"] = net.ListenUnix
	decs["ListenUnixgram"] = net.ListenUnixgram
	decs["Listener"] = reflect.TypeOf((*net.Listener)(nil)).Elem()
	decs["LookupAddr"] = net.LookupAddr
	decs["LookupCNAME"] = net.LookupCNAME
	decs["LookupHost"] = net.LookupHost
	decs["LookupIP"] = net.LookupIP
	decs["LookupMX"] = net.LookupMX
	decs["LookupNS"] = net.LookupNS
	decs["LookupPort"] = net.LookupPort
	decs["LookupSRV"] = net.LookupSRV
	decs["LookupTXT"] = net.LookupTXT
	decs["MX"] = reflect.TypeOf((*net.MX)(nil)).Elem()
	decs["NS"] = reflect.TypeOf((*net.NS)(nil)).Elem()
	decs["OpError"] = reflect.TypeOf((*net.OpError)(nil)).Elem()
	decs["PacketConn"] = reflect.TypeOf((*net.PacketConn)(nil)).Elem()
	decs["ParseCIDR"] = net.ParseCIDR
	decs["ParseError"] = reflect.TypeOf((*net.ParseError)(nil)).Elem()
	decs["ParseIP"] = net.ParseIP
	decs["ParseMAC"] = net.ParseMAC
	decs["Pipe"] = net.Pipe
	decs["ResolveIPAddr"] = net.ResolveIPAddr
	decs["ResolveTCPAddr"] = net.ResolveTCPAddr
	decs["ResolveUDPAddr"] = net.ResolveUDPAddr
	decs["ResolveUnixAddr"] = net.ResolveUnixAddr
	decs["Resolver"] = reflect.TypeOf((*net.Resolver)(nil)).Elem()
	decs["SRV"] = reflect.TypeOf((*net.SRV)(nil)).Elem()
	decs["SplitHostPort"] = net.SplitHostPort
	decs["TCPAddr"] = reflect.TypeOf((*net.TCPAddr)(nil)).Elem()
	decs["TCPAddrFromAddrPort"] = net.TCPAddrFromAddrPort
	decs["TCPConn"] = reflect.TypeOf((*net.TCPConn)(nil)).Elem()
	decs["TCPListener"] = reflect.TypeOf((*net.TCPListener)(nil)).Elem()
	decs["UDPAddr"] = reflect.TypeOf((*net.UDPAddr)(nil)).Elem()
	decs["UDPAddrFromAddrPort"] = net.UDPAddrFromAddrPort
	decs["UDPConn"] = reflect.TypeOf((*net.UDPConn)(nil)).Elem()
	decs["UnixAddr"] = reflect.TypeOf((*net.UnixAddr)(nil)).Elem()
	decs["UnixConn"] = reflect.TypeOf((*net.UnixConn)(nil)).Elem()
	decs["UnixListener"] = reflect.TypeOf((*net.UnixListener)(nil)).Elem()
	decs["UnknownNetworkError"] = reflect.TypeOf((*net.UnknownNetworkError)(nil)).Elem()
	NativePackages["net"] = native.Package{
		Name:         "net",
		Declarations: decs,
	}
	// "net/http"
	decs = make(native.Declarations, 173)
	decs["AllowQuerySemicolons"] = http.AllowQuerySemicolons
	decs["CanonicalHeaderKey"] = http.CanonicalHeaderKey
	decs["Client"] = reflect.TypeOf((*http.Client)(nil)).Elem()
	decs["CloseNotifier"] = reflect.TypeOf((*http.CloseNotifier)(nil)).Elem()
	decs["ConnState"] = reflect.TypeOf((*http.ConnState)(nil)).Elem()
	decs["Cookie"] = reflect.TypeOf((*http.Cookie)(nil)).Elem()
	decs["CookieJar"] = reflect.TypeOf((*http.CookieJar)(nil)).Elem()
	decs["DefaultClient"] = &http.DefaultClient
	decs["DefaultMaxHeaderBytes"] = native.UntypedNumericConst("1048576")
	decs["DefaultMaxIdleConnsPerHost"] = native.UntypedNumericConst("2")
	decs["DefaultServeMux"] = &http.DefaultServeMux
	decs["DefaultTransport"] = &http.DefaultTransport
	decs["DetectContentType"] = http.DetectContentType
	decs["Dir"] = reflect.TypeOf((*http.Dir)(nil)).Elem()
	decs["ErrAbortHandler"] = &http.ErrAbortHandler
	decs["ErrBodyNotAllowed"] = &http.ErrBodyNotAllowed
	decs["ErrBodyReadAfterClose"] = &http.ErrBodyReadAfterClose
	decs["ErrContentLength"] = &http.ErrContentLength
	decs["ErrHandlerTimeout"] = &http.ErrHandlerTimeout
	decs["ErrHeaderTooLong"] = &http.ErrHeaderTooLong
	decs["ErrHijacked"] = &http.ErrHijacked
	decs["ErrLineTooLong"] = &http.ErrLineTooLong
	decs["ErrMissingBoundary"] = &http.ErrMissingBoundary
	decs["ErrMissingContentLength"] = &http.ErrMissingContentLength
	decs["ErrMissingFile"] = &http.ErrMissingFile
	decs["ErrNoCookie"] = &http.ErrNoCookie
	decs["ErrNoLocation"] = &http.ErrNoLocation
	decs["ErrNotMultipart"] = &http.ErrNotMultipart
	decs["ErrNotSupported"] = &http.ErrNotSupported
	decs["ErrServerClosed"] = &http.ErrServerClosed
	decs["ErrShortBody"] = &http.ErrShortBody
	decs["ErrSkipAltProtocol"] = &http.ErrSkipAltProtocol
	decs["ErrUnexpectedTrailer"] = &http.ErrUnexpectedTrailer
	decs["ErrUseLastResponse"] = &http.ErrUseLastResponse
	decs["ErrWriteAfterFlush"] = &http.ErrWriteAfterFlush
	decs["Error"] = http.Error
	decs["FS"] = http.FS
	decs["File"] = reflect.TypeOf((*http.File)(nil)).Elem()
	decs["FileServer"] = http.FileServer
	decs["FileSystem"] = reflect.TypeOf((*http.FileSystem)(nil)).Elem()
	decs["Flusher"] = reflect.TypeOf((*http.Flusher)(nil)).Elem()
	decs["Get"] = http.Get
	decs["Handle"] = http.Handle
	decs["HandleFunc"] = http.HandleFunc
	decs["Handler"] = reflect.TypeOf((*http.Handler)(nil)).Elem()
	decs["HandlerFunc"] = reflect.TypeOf((*http.HandlerFunc)(nil)).Elem()
	decs["Head"] = http.Head
	decs["Header"] = reflect.TypeOf((*http.Header)(nil)).Elem()
	decs["Hijacker"] = reflect.TypeOf((*http.Hijacker)(nil)).Elem()
	decs["ListenAndServe"] = http.ListenAndServe
	decs["ListenAndServeTLS"] = http.ListenAndServeTLS
	decs["LocalAddrContextKey"] = &http.LocalAddrContextKey
	decs["MaxBytesHandler"] = http.MaxBytesHandler
	decs["MaxBytesReader"] = http.MaxBytesReader
	decs["MethodConnect"] = native.UntypedStringConst("CONNECT")
	decs["MethodDelete"] = native.UntypedStringConst("DELETE")
	decs["MethodGet"] = native.UntypedStringConst("GET")
	decs["MethodHead"] = native.UntypedStringConst("HEAD")
	decs["MethodOptions"] = native.UntypedStringConst("OPTIONS")
	decs["MethodPatch"] = native.UntypedStringConst("PATCH")
	decs["MethodPost"] = native.UntypedStringConst("POST")
	decs["MethodPut"] = native.UntypedStringConst("PUT")
	decs["MethodTrace"] = native.UntypedStringConst("TRACE")
	decs["NewFileTransport"] = http.NewFileTransport
	decs["NewRequest"] = http.NewRequest
	decs["NewRequestWithContext"] = http.NewRequestWithContext
	decs["NewServeMux"] = http.NewServeMux
	decs["NoBody"] = &http.NoBody
	decs["NotFound"] = http.NotFound
	decs["NotFoundHandler"] = http.NotFoundHandler
	decs["ParseHTTPVersion"] = http.ParseHTTPVersion
	decs["ParseTime"] = http.ParseTime
	decs["Post"] = http.Post
	decs["PostForm"] = http.PostForm
	decs["ProtocolError"] = reflect.TypeOf((*http.ProtocolError)(nil)).Elem()
	decs["ProxyFromEnvironment"] = http.ProxyFromEnvironment
	decs["ProxyURL"] = http.ProxyURL
	decs["PushOptions"] = reflect.TypeOf((*http.PushOptions)(nil)).Elem()
	decs["Pusher"] = reflect.TypeOf((*http.Pusher)(nil)).Elem()
	decs["ReadRequest"] = http.ReadRequest
	decs["ReadResponse"] = http.ReadResponse
	decs["Redirect"] = http.Redirect
	decs["RedirectHandler"] = http.RedirectHandler
	decs["Request"] = reflect.TypeOf((*http.Request)(nil)).Elem()
	decs["Response"] = reflect.TypeOf((*http.Response)(nil)).Elem()
	decs["ResponseWriter"] = reflect.TypeOf((*http.ResponseWriter)(nil)).Elem()
	decs["RoundTripper"] = reflect.TypeOf((*http.RoundTripper)(nil)).Elem()
	decs["SameSite"] = reflect.TypeOf((*http.SameSite)(nil)).Elem()
	decs["SameSiteDefaultMode"] = http.SameSiteDefaultMode
	decs["SameSiteLaxMode"] = http.SameSiteLaxMode
	decs["SameSiteNoneMode"] = http.SameSiteNoneMode
	decs["SameSiteStrictMode"] = http.SameSiteStrictMode
	decs["Serve"] = http.Serve
	decs["ServeContent"] = http.ServeContent
	decs["ServeFile"] = http.ServeFile
	decs["ServeMux"] = reflect.TypeOf((*http.ServeMux)(nil)).Elem()
	decs["ServeTLS"] = http.ServeTLS
	decs["Server"] = reflect.TypeOf((*http.Server)(nil)).Elem()
	decs["ServerContextKey"] = &http.ServerContextKey
	decs["SetCookie"] = http.SetCookie
	decs["StateActive"] = http.StateActive
	decs["StateClosed"] = http.StateClosed
	decs["StateHijacked"] = http.StateHijacked
	decs["StateIdle"] = http.StateIdle
	decs["StateNew"] = http.StateNew
	decs["StatusAccepted"] = native.UntypedNumericConst("202")
	decs["StatusAlreadyReported"] = native.UntypedNumericConst("208")
	decs["StatusBadGateway"] = native.UntypedNumericConst("502")
	decs["StatusBadRequest"] = native.UntypedNumericConst("400")
	decs["StatusConflict"] = native.UntypedNumericConst("409")
	decs["StatusContinue"] = native.UntypedNumericConst("100")
	decs["StatusCreated"] = native.UntypedNumericConst("201")
	decs["StatusEarlyHints"] = native.UntypedNumericConst("103")
	decs["StatusExpectationFailed"] = native.UntypedNumericConst("417")
	decs["StatusFailedDependency"] = native.UntypedNumericConst("424")
	decs["StatusForbidden"] = native.UntypedNumericConst("403")
	decs["StatusFound"] = native.UntypedNumericConst("302")
	decs["StatusGatewayTimeout"] = native.UntypedNumericConst("504")
	decs["StatusGone"] = native.UntypedNumericConst("410")
	decs["StatusHTTPVersionNotSupported"] = native.UntypedNumericConst("505")
	decs["StatusIMUsed"] = native.UntypedNumericConst("226")
	decs["StatusInsufficientStorage"] = native.UntypedNumericConst("507")
	decs["StatusInternalServerError"] = native.UntypedNumericConst("500")
	decs["StatusLengthRequired"] = native.UntypedNumericConst("411")
	decs["StatusLocked"] = native.UntypedNumericConst("423")
	decs["StatusLoopDetected"] = native.UntypedNumericConst("508")
	decs["StatusMethodNotAllowed"] = native.UntypedNumericConst("405")
	decs["StatusMisdirectedRequest"] = native.UntypedNumericConst("421")
	decs["StatusMovedPermanently"] = native.UntypedNumericConst("301")
	decs["StatusMultiStatus"] = native.UntypedNumericConst("207")
	decs["StatusMultipleChoices"] = native.UntypedNumericConst("300")
	decs["StatusNetworkAuthenticationRequired"] = native.UntypedNumericConst("511")
	decs["StatusNoContent"] = native.UntypedNumericConst("204")
	decs["StatusNonAuthoritativeInfo"] = native.UntypedNumericConst("203")
	decs["StatusNotAcceptable"] = native.UntypedNumericConst("406")
	decs["StatusNotExtended"] = native.UntypedNumericConst("510")
	decs["StatusNotFound"] = native.UntypedNumericConst("404")
	decs["StatusNotImplemented"] = native.UntypedNumericConst("501")
	decs["StatusNotModified"] = native.UntypedNumericConst("304")
	decs["StatusOK"] = native.UntypedNumericConst("200")
	decs["StatusPartialContent"] = native.UntypedNumericConst("206")
	decs["StatusPaymentRequired"] = native.UntypedNumericConst("402")
	decs["StatusPermanentRedirect"] = native.UntypedNumericConst("308")
	decs["StatusPreconditionFailed"] = native.UntypedNumericConst("412")
	decs["StatusPreconditionRequired"] = native.UntypedNumericConst("428")
	decs["StatusProcessing"] = native.UntypedNumericConst("102")
	decs["StatusProxyAuthRequired"] = native.UntypedNumericConst("407")
	decs["StatusRequestEntityTooLarge"] = native.UntypedNumericConst("413")
	decs["StatusRequestHeaderFieldsTooLarge"] = native.UntypedNumericConst("431")
	decs["StatusRequestTimeout"] = native.UntypedNumericConst("408")
	decs["StatusRequestURITooLong"] = native.UntypedNumericConst("414")
	decs["StatusRequestedRangeNotSatisfiable"] = native.UntypedNumericConst("416")
	decs["StatusResetContent"] = native.UntypedNumericConst("205")
	decs["StatusSeeOther"] = native.UntypedNumericConst("303")
	decs["StatusServiceUnavailable"] = native.UntypedNumericConst("503")
	decs["StatusSwitchingProtocols"] = native.UntypedNumericConst("101")
	decs["StatusTeapot"] = native.UntypedNumericConst("418")
	decs["StatusTemporaryRedirect"] = native.UntypedNumericConst("307")
	decs["StatusText"] = http.StatusText
	decs["StatusTooEarly"] = native.UntypedNumericConst("425")
	decs["StatusTooManyRequests"] = native.UntypedNumericConst("429")
	decs["StatusUnauthorized"] = native.UntypedNumericConst("401")
	decs["StatusUnavailableForLegalReasons"] = native.UntypedNumericConst("451")
	decs["StatusUnprocessableEntity"] = native.UntypedNumericConst("422")
	decs["StatusUnsupportedMediaType"] = native.UntypedNumericConst("415")
	decs["StatusUpgradeRequired"] = native.UntypedNumericConst("426")
	decs["StatusUseProxy"] = native.UntypedNumericConst("305")
	decs["StatusVariantAlsoNegotiates"] = native.UntypedNumericConst("506")
	decs["StripPrefix"] = http.StripPrefix
	decs["TimeFormat"] = native.UntypedStringConst("Mon, 02 Jan 2006 15:04:05 GMT")
	decs["TimeoutHandler"] = http.TimeoutHandler
	decs["TrailerPrefix"] = native.UntypedStringConst("Trailer:")
	decs["Transport"] = reflect.TypeOf((*http.Transport)(nil)).Elem()
	NativePackages["net/http"] = native.Package{
		Name:         "http",
		Declarations: decs,
	}
	// "net/mail"
	decs = make(native.Declarations, 9)
	decs["Address"] = reflect.TypeOf((*mail.Address)(nil)).Elem()
	decs["AddressParser"] = reflect.TypeOf((*mail.AddressParser)(nil)).Elem()
	decs["ErrHeaderNotPresent"] = &mail.ErrHeaderNotPresent
	decs["Header"] = reflect.TypeOf((*mail.Header)(nil)).Elem()
	decs["Message"] = reflect.TypeOf((*mail.Message)(nil)).Elem()
	decs["ParseAddress"] = mail.ParseAddress
	decs["ParseAddressList"] = mail.ParseAddressList
	decs["ParseDate"] = mail.ParseDate
	decs["ReadMessage"] = mail.ReadMessage
	NativePackages["net/mail"] = native.Package{
		Name:         "mail",
		Declarations: decs,
	}
	// "net/netip"
	decs = make(native.Declarations, 17)
	decs["Addr"] = reflect.TypeOf((*netip.Addr)(nil)).Elem()
	decs["AddrFrom16"] = netip.AddrFrom16
	decs["AddrFrom4"] = netip.AddrFrom4
	decs["AddrFromSlice"] = netip.AddrFromSlice
	decs["AddrPort"] = reflect.TypeOf((*netip.AddrPort)(nil)).Elem()
	decs["AddrPortFrom"] = netip.AddrPortFrom
	decs["IPv4Unspecified"] = netip.IPv4Unspecified
	decs["IPv6LinkLocalAllNodes"] = netip.IPv6LinkLocalAllNodes
	decs["IPv6Unspecified"] = netip.IPv6Unspecified
	decs["MustParseAddr"] = netip.MustParseAddr
	decs["MustParseAddrPort"] = netip.MustParseAddrPort
	decs["MustParsePrefix"] = netip.MustParsePrefix
	decs["ParseAddr"] = netip.ParseAddr
	decs["ParseAddrPort"] = netip.ParseAddrPort
	decs["ParsePrefix"] = netip.ParsePrefix
	decs["Prefix"] = reflect.TypeOf((*netip.Prefix)(nil)).Elem()
	decs["PrefixFrom"] = netip.PrefixFrom
	NativePackages["net/netip"] = native.Package{
		Name:         "netip",
		Declarations: decs,
	}
	// "net/rpc"
	decs = make(native.Declarations, 25)
	decs["Accept"] = rpc.Accept
	decs["Call"] = reflect.TypeOf((*rpc.Call)(nil)).Elem()
	decs["Client"] = reflect.TypeOf((*rpc.Client)(nil)).Elem()
	decs["ClientCodec"] = reflect.TypeOf((*rpc.ClientCodec)(nil)).Elem()
	decs["DefaultDebugPath"] = native.UntypedStringConst("/debug/rpc")
	decs["DefaultRPCPath"] = native.UntypedStringConst("/_goRPC_")
	decs["DefaultServer"] = &rpc.DefaultServer
	decs["Dial"] = rpc.Dial
	decs["DialHTTP"] = rpc.DialHTTP
	decs["DialHTTPPath"] = rpc.DialHTTPPath
	decs["ErrShutdown"] = &rpc.ErrShutdown
	decs["HandleHTTP"] = rpc.HandleHTTP
	decs["NewClient"] = rpc.NewClient
	decs["NewClientWithCodec"] = rpc.NewClientWithCodec
	decs["NewServer"] = rpc.NewServer
	decs["Register"] = rpc.Register
	decs["RegisterName"] = rpc.RegisterName
	decs["Request"] = reflect.TypeOf((*rpc.Request)(nil)).Elem()
	decs["Response"] = reflect.TypeOf((*rpc.Response)(nil)).Elem()
	decs["ServeCodec"] = rpc.ServeCodec
	decs["ServeConn"] = rpc.ServeConn
	decs["ServeRequest"] = rpc.ServeRequest
	decs["Server"] = reflect.TypeOf((*rpc.Server)(nil)).Elem()
	decs["ServerCodec"] = reflect.TypeOf((*rpc.ServerCodec)(nil)).Elem()
	decs["ServerError"] = reflect.TypeOf((*rpc.ServerError)(nil)).Elem()
	NativePackages["net/rpc"] = native.Package{
		Name:         "rpc",
		Declarations: decs,
	}
	// "net/rpc/jsonrpc"
	decs = make(native.Declarations, 5)
	decs["Dial"] = jsonrpc.Dial
	decs["NewClient"] = jsonrpc.NewClient
	decs["NewClientCodec"] = jsonrpc.NewClientCodec
	decs["NewServerCodec"] = jsonrpc.NewServerCodec
	decs["ServeConn"] = jsonrpc.ServeConn
	NativePackages["net/rpc/jsonrpc"] = native.Package{
		Name:         "jsonrpc",
		Declarations: decs,
	}
	// "net/smtp"
	decs = make(native.Declarations, 8)
	decs["Auth"] = reflect.TypeOf((*smtp.Auth)(nil)).Elem()
	decs["CRAMMD5Auth"] = smtp.CRAMMD5Auth
	decs["Client"] = reflect.TypeOf((*smtp.Client)(nil)).Elem()
	decs["Dial"] = smtp.Dial
	decs["NewClient"] = smtp.NewClient
	decs["PlainAuth"] = smtp.PlainAuth
	decs["SendMail"] = smtp.SendMail
	decs["ServerInfo"] = reflect.TypeOf((*smtp.ServerInfo)(nil)).Elem()
	NativePackages["net/smtp"] = native.Package{
		Name:         "smtp",
		Declarations: decs,
	}
	// "net/textproto"
	decs = make(native.Declarations, 14)
	decs["CanonicalMIMEHeaderKey"] = textproto.CanonicalMIMEHeaderKey
	decs["Conn"] = reflect.TypeOf((*textproto.Conn)(nil)).Elem()
	decs["Dial"] = textproto.Dial
	decs["Error"] = reflect.TypeOf((*textproto.Error)(nil)).Elem()
	decs["MIMEHeader"] = reflect.TypeOf((*textproto.MIMEHeader)(nil)).Elem()
	decs["NewConn"] = textproto.NewConn
	decs["NewReader"] = textproto.NewReader
	decs["NewWriter"] = textproto.NewWriter
	decs["Pipeline"] = reflect.TypeOf((*textproto.Pipeline)(nil)).Elem()
	decs["ProtocolError"] = reflect.TypeOf((*textproto.ProtocolError)(nil)).Elem()
	decs["Reader"] = reflect.TypeOf((*textproto.Reader)(nil)).Elem()
	decs["TrimBytes"] = textproto.TrimBytes
	decs["TrimString"] = textproto.TrimString
	decs["Writer"] = reflect.TypeOf((*textproto.Writer)(nil)).Elem()
	NativePackages["net/textproto"] = native.Package{
		Name:         "textproto",
		Declarations: decs,
	}
	// "net/url"
	decs = make(native.Declarations, 15)
	decs["Error"] = reflect.TypeOf((*url.Error)(nil)).Elem()
	decs["EscapeError"] = reflect.TypeOf((*url.EscapeError)(nil)).Elem()
	decs["InvalidHostError"] = reflect.TypeOf((*url.InvalidHostError)(nil)).Elem()
	decs["Parse"] = url.Parse
	decs["ParseQuery"] = url.ParseQuery
	decs["ParseRequestURI"] = url.ParseRequestURI
	decs["PathEscape"] = url.PathEscape
	decs["PathUnescape"] = url.PathUnescape
	decs["QueryEscape"] = url.QueryEscape
	decs["QueryUnescape"] = url.QueryUnescape
	decs["URL"] = reflect.TypeOf((*url.URL)(nil)).Elem()
	decs["User"] = url.User
	decs["UserPassword"] = url.UserPassword
	decs["Userinfo"] = reflect.TypeOf((*url.Userinfo)(nil)).Elem()
	decs["Values"] = reflect.TypeOf((*url.Values)(nil)).Elem()
	NativePackages["net/url"] = native.Package{
		Name:         "url",
		Declarations: decs,
	}
	// "os"
	decs = make(native.Declarations, 114)
	decs["Args"] = &os.Args
	decs["Chdir"] = os.Chdir
	decs["Chmod"] = os.Chmod
	decs["Chown"] = os.Chown
	decs["Chtimes"] = os.Chtimes
	decs["Clearenv"] = os.Clearenv
	decs["Create"] = os.Create
	decs["CreateTemp"] = os.CreateTemp
	decs["DevNull"] = native.UntypedStringConst("/dev/null")
	decs["DirEntry"] = reflect.TypeOf((*os.DirEntry)(nil)).Elem()
	decs["DirFS"] = os.DirFS
	decs["Environ"] = os.Environ
	decs["ErrClosed"] = &os.ErrClosed
	decs["ErrDeadlineExceeded"] = &os.ErrDeadlineExceeded
	decs["ErrExist"] = &os.ErrExist
	decs["ErrInvalid"] = &os.ErrInvalid
	decs["ErrNoDeadline"] = &os.ErrNoDeadline
	decs["ErrNotExist"] = &os.ErrNotExist
	decs["ErrPermission"] = &os.ErrPermission
	decs["ErrProcessDone"] = &os.ErrProcessDone
	decs["Executable"] = os.Executable
	decs["Exit"] = os.Exit
	decs["Expand"] = os.Expand
	decs["ExpandEnv"] = os.ExpandEnv
	decs["File"] = reflect.TypeOf((*os.File)(nil)).Elem()
	decs["FileInfo"] = reflect.TypeOf((*os.FileInfo)(nil)).Elem()
	decs["FileMode"] = reflect.TypeOf((*os.FileMode)(nil)).Elem()
	decs["FindProcess"] = os.FindProcess
	decs["Getegid"] = os.Getegid
	decs["Getenv"] = os.Getenv
	decs["Geteuid"] = os.Geteuid
	decs["Getgid"] = os.Getgid
	decs["Getgroups"] = os.Getgroups
	decs["Getpagesize"] = os.Getpagesize
	decs["Getpid"] = os.Getpid
	decs["Getppid"] = os.Getppid
	decs["Getuid"] = os.Getuid
	decs["Getwd"] = os.Getwd
	decs["Hostname"] = os.Hostname
	decs["Interrupt"] = &os.Interrupt
	decs["IsExist"] = os.IsExist
	decs["IsNotExist"] = os.IsNotExist
	decs["IsPathSeparator"] = os.IsPathSeparator
	decs["IsPermission"] = os.IsPermission
	decs["IsTimeout"] = os.IsTimeout
	decs["Kill"] = &os.Kill
	decs["Lchown"] = os.Lchown
	decs["Link"] = os.Link
	decs["LinkError"] = reflect.TypeOf((*os.LinkError)(nil)).Elem()
	decs["LookupEnv"] = os.LookupEnv
	decs["Lstat"] = os.Lstat
	decs["Mkdir"] = os.Mkdir
	decs["MkdirAll"] = os.MkdirAll
	decs["MkdirTemp"] = os.MkdirTemp
	decs["ModeAppend"] = os.ModeAppend
	decs["ModeCharDevice"] = os.ModeCharDevice
	decs["ModeDevice"] = os.ModeDevice
	decs["ModeDir"] = os.ModeDir
	decs["ModeExclusive"] = os.ModeExclusive
	decs["ModeIrregular"] = os.ModeIrregular
	decs["ModeNamedPipe"] = os.ModeNamedPipe
	decs["ModePerm"] = os.ModePerm
	decs["ModeSetgid"] = os.ModeSetgid
	decs["ModeSetuid"] = os.ModeSetuid
	decs["ModeSocket"] = os.ModeSocket
	decs["ModeSticky"] = os.ModeSticky
	decs["ModeSymlink"] = os.ModeSymlink
	decs["ModeTemporary"] = os.ModeTemporary
	decs["ModeType"] = os.ModeType
	decs["NewFile"] = os.NewFile
	decs["NewSyscallError"] = os.NewSyscallError
	decs["O_APPEND"] = os.O_APPEND
	decs["O_CREATE"] = os.O_CREATE
	decs["O_EXCL"] = os.O_EXCL
	decs["O_RDONLY"] = os.O_RDONLY
	decs["O_RDWR"] = os.O_RDWR
	decs["O_SYNC"] = os.O_SYNC
	decs["O_TRUNC"] = os.O_TRUNC
	decs["O_WRONLY"] = os.O_WRONLY
	decs["Open"] = os.Open
	decs["OpenFile"] = os.OpenFile
	decs["PathError"] = reflect.TypeOf((*os.PathError)(nil)).Elem()
	decs["PathListSeparator"] = native.UntypedNumericConst("58")
	decs["PathSeparator"] = native.UntypedNumericConst("47")
	decs["Pipe"] = os.Pipe
	decs["ProcAttr"] = reflect.TypeOf((*os.ProcAttr)(nil)).Elem()
	decs["Process"] = reflect.TypeOf((*os.Process)(nil)).Elem()
	decs["ProcessState"] = reflect.TypeOf((*os.ProcessState)(nil)).Elem()
	decs["ReadDir"] = os.ReadDir
	decs["ReadFile"] = os.ReadFile
	decs["Readlink"] = os.Readlink
	decs["Remove"] = os.Remove
	decs["RemoveAll"] = os.RemoveAll
	decs["Rename"] = os.Rename
	decs["SEEK_CUR"] = os.SEEK_CUR
	decs["SEEK_END"] = os.SEEK_END
	decs["SEEK_SET"] = os.SEEK_SET
	decs["SameFile"] = os.SameFile
	decs["Setenv"] = os.Setenv
	decs["Signal"] = reflect.TypeOf((*os.Signal)(nil)).Elem()
	decs["StartProcess"] = os.StartProcess
	decs["Stat"] = os.Stat
	decs["Stderr"] = &os.Stderr
	decs["Stdin"] = &os.Stdin
	decs["Stdout"] = &os.Stdout
	decs["Symlink"] = os.Symlink
	decs["SyscallError"] = reflect.TypeOf((*os.SyscallError)(nil)).Elem()
	decs["TempDir"] = os.TempDir
	decs["Truncate"] = os.Truncate
	decs["Unsetenv"] = os.Unsetenv
	decs["UserCacheDir"] = os.UserCacheDir
	decs["UserConfigDir"] = os.UserConfigDir
	decs["UserHomeDir"] = os.UserHomeDir
	decs["WriteFile"] = os.WriteFile
	NativePackages["os"] = native.Package{
		Name:         "os",
		Declarations: decs,
	}
	// "os/exec"
	decs = make(native.Declarations, 7)
	decs["Cmd"] = reflect.TypeOf((*exec.Cmd)(nil)).Elem()
	decs["Command"] = exec.Command
	decs["CommandContext"] = exec.CommandContext
	decs["ErrNotFound"] = &exec.ErrNotFound
	decs["Error"] = reflect.TypeOf((*exec.Error)(nil)).Elem()
	decs["ExitError"] = reflect.TypeOf((*exec.ExitError)(nil)).Elem()
	decs["LookPath"] = exec.LookPath
	NativePackages["os/exec"] = native.Package{
		Name:         "exec",
		Declarations: decs,
	}
	// "os/signal"
	decs = make(native.Declarations, 6)
	decs["Ignore"] = signal.Ignore
	decs["Ignored"] = signal.Ignored
	decs["Notify"] = signal.Notify
	decs["NotifyContext"] = signal.NotifyContext
	decs["Reset"] = signal.Reset
	decs["Stop"] = signal.Stop
	NativePackages["os/signal"] = native.Package{
		Name:         "signal",
		Declarations: decs,
	}
	// "os/user"
	decs = make(native.Declarations, 11)
	decs["Current"] = user.Current
	decs["Group"] = reflect.TypeOf((*user.Group)(nil)).Elem()
	decs["Lookup"] = user.Lookup
	decs["LookupGroup"] = user.LookupGroup
	decs["LookupGroupId"] = user.LookupGroupId
	decs["LookupId"] = user.LookupId
	decs["UnknownGroupError"] = reflect.TypeOf((*user.UnknownGroupError)(nil)).Elem()
	decs["UnknownGroupIdError"] = reflect.TypeOf((*user.UnknownGroupIdError)(nil)).Elem()
	decs["UnknownUserError"] = reflect.TypeOf((*user.UnknownUserError)(nil)).Elem()
	decs["UnknownUserIdError"] = reflect.TypeOf((*user.UnknownUserIdError)(nil)).Elem()
	decs["User"] = reflect.TypeOf((*user.User)(nil)).Elem()
	NativePackages["os/user"] = native.Package{
		Name:         "user",
		Declarations: decs,
	}
	// "path"
	decs = make(native.Declarations, 9)
	decs["Base"] = path.Base
	decs["Clean"] = path.Clean
	decs["Dir"] = path.Dir
	decs["ErrBadPattern"] = &path.ErrBadPattern
	decs["Ext"] = path.Ext
	decs["IsAbs"] = path.IsAbs
	decs["Join"] = path.Join
	decs["Match"] = path.Match
	decs["Split"] = path.Split
	NativePackages["path"] = native.Package{
		Name:         "path",
		Declarations: decs,
	}
	// "path/filepath"
	decs = make(native.Declarations, 24)
	decs["Abs"] = filepath.Abs
	decs["Base"] = filepath.Base
	decs["Clean"] = filepath.Clean
	decs["Dir"] = filepath.Dir
	decs["ErrBadPattern"] = &filepath.ErrBadPattern
	decs["EvalSymlinks"] = filepath.EvalSymlinks
	decs["Ext"] = filepath.Ext
	decs["FromSlash"] = filepath.FromSlash
	decs["Glob"] = filepath.Glob
	decs["HasPrefix"] = filepath.HasPrefix
	decs["IsAbs"] = filepath.IsAbs
	decs["Join"] = filepath.Join
	decs["ListSeparator"] = native.UntypedNumericConst("58")
	decs["Match"] = filepath.Match
	decs["Rel"] = filepath.Rel
	decs["Separator"] = native.UntypedNumericConst("47")
	decs["SkipDir"] = &filepath.SkipDir
	decs["Split"] = filepath.Split
	decs["SplitList"] = filepath.SplitList
	decs["ToSlash"] = filepath.ToSlash
	decs["VolumeName"] = filepath.VolumeName
	decs["Walk"] = filepath.Walk
	decs["WalkDir"] = filepath.WalkDir
	decs["WalkFunc"] = reflect.TypeOf((*filepath.WalkFunc)(nil)).Elem()
	NativePackages["path/filepath"] = native.Package{
		Name:         "filepath",
		Declarations: decs,
	}
	// "reflect"
	decs = make(native.Declarations, 73)
	decs["Append"] = reflect.Append
	decs["AppendSlice"] = reflect.AppendSlice
	decs["Array"] = reflect.Array
	decs["ArrayOf"] = reflect.ArrayOf
	decs["Bool"] = reflect.Bool
	decs["BothDir"] = reflect.BothDir
	decs["Chan"] = reflect.Chan
	decs["ChanDir"] = reflect.TypeOf((*reflect.ChanDir)(nil)).Elem()
	decs["ChanOf"] = reflect.ChanOf
	decs["Complex128"] = reflect.Complex128
	decs["Complex64"] = reflect.Complex64
	decs["Copy"] = reflect.Copy
	decs["DeepEqual"] = reflect.DeepEqual
	decs["Float32"] = reflect.Float32
	decs["Float64"] = reflect.Float64
	decs["Func"] = reflect.Func
	decs["FuncOf"] = reflect.FuncOf
	decs["Indirect"] = reflect.Indirect
	decs["Int"] = reflect.Int
	decs["Int16"] = reflect.Int16
	decs["Int32"] = reflect.Int32
	decs["Int64"] = reflect.Int64
	decs["Int8"] = reflect.Int8
	decs["Interface"] = reflect.Interface
	decs["Invalid"] = reflect.Invalid
	decs["Kind"] = reflect.TypeOf((*reflect.Kind)(nil)).Elem()
	decs["MakeChan"] = reflect.MakeChan
	decs["MakeFunc"] = reflect.MakeFunc
	decs["MakeMap"] = reflect.MakeMap
	decs["MakeMapWithSize"] = reflect.MakeMapWithSize
	decs["MakeSlice"] = reflect.MakeSlice
	decs["Map"] = reflect.Map
	decs["MapIter"] = reflect.TypeOf((*reflect.MapIter)(nil)).Elem()
	decs["MapOf"] = reflect.MapOf
	decs["Method"] = reflect.TypeOf((*reflect.Method)(nil)).Elem()
	decs["New"] = reflect.New
	decs["NewAt"] = reflect.NewAt
	decs["Pointer"] = reflect.Pointer
	decs["PointerTo"] = reflect.PointerTo
	decs["Ptr"] = reflect.Ptr
	decs["PtrTo"] = reflect.PtrTo
	decs["RecvDir"] = reflect.RecvDir
	decs["Select"] = reflect.Select
	decs["SelectCase"] = reflect.TypeOf((*reflect.SelectCase)(nil)).Elem()
	decs["SelectDefault"] = reflect.SelectDefault
	decs["SelectDir"] = reflect.TypeOf((*reflect.SelectDir)(nil)).Elem()
	decs["SelectRecv"] = reflect.SelectRecv
	decs["SelectSend"] = reflect.SelectSend
	decs["SendDir"] = reflect.SendDir
	decs["Slice"] = reflect.Slice
	decs["SliceHeader"] = reflect.TypeOf((*reflect.SliceHeader)(nil)).Elem()
	decs["SliceOf"] = reflect.SliceOf
	decs["String"] = reflect.String
	decs["StringHeader"] = reflect.TypeOf((*reflect.StringHeader)(nil)).Elem()
	decs["Struct"] = reflect.Struct
	decs["StructField"] = reflect.TypeOf((*reflect.StructField)(nil)).Elem()
	decs["StructOf"] = reflect.StructOf
	decs["StructTag"] = reflect.TypeOf((*reflect.StructTag)(nil)).Elem()
	decs["Swapper"] = reflect.Swapper
	decs["Type"] = reflect.TypeOf((*reflect.Type)(nil)).Elem()
	decs["TypeOf"] = reflect.TypeOf
	decs["Uint"] = reflect.Uint
	decs["Uint16"] = reflect.Uint16
	decs["Uint32"] = reflect.Uint32
	decs["Uint64"] = reflect.Uint64
	decs["Uint8"] = reflect.Uint8
	decs["Uintptr"] = reflect.Uintptr
	decs["UnsafePointer"] = reflect.UnsafePointer
	decs["Value"] = reflect.TypeOf((*reflect.Value)(nil)).Elem()
	decs["ValueError"] = reflect.TypeOf((*reflect.ValueError)(nil)).Elem()
	decs["ValueOf"] = reflect.ValueOf
	decs["VisibleFields"] = reflect.VisibleFields
	decs["Zero"] = reflect.Zero
	NativePackages["reflect"] = native.Package{
		Name:         "reflect",
		Declarations: decs,
	}
	// "regexp"
	decs = make(native.Declarations, 9)
	decs["Compile"] = regexp.Compile
	decs["CompilePOSIX"] = regexp.CompilePOSIX
	decs["Match"] = regexp.Match
	decs["MatchReader"] = regexp.MatchReader
	decs["MatchString"] = regexp.MatchString
	decs["MustCompile"] = regexp.MustCompile
	decs["MustCompilePOSIX"] = regexp.MustCompilePOSIX
	decs["QuoteMeta"] = regexp.QuoteMeta
	decs["Regexp"] = reflect.TypeOf((*regexp.Regexp)(nil)).Elem()
	NativePackages["regexp"] = native.Package{
		Name:         "regexp",
		Declarations: decs,
	}
	// "regexp/syntax"
	decs = make(native.Declarations, 76)
	decs["ClassNL"] = syntax.ClassNL
	decs["Compile"] = syntax.Compile
	decs["DotNL"] = syntax.DotNL
	decs["EmptyBeginLine"] = syntax.EmptyBeginLine
	decs["EmptyBeginText"] = syntax.EmptyBeginText
	decs["EmptyEndLine"] = syntax.EmptyEndLine
	decs["EmptyEndText"] = syntax.EmptyEndText
	decs["EmptyNoWordBoundary"] = syntax.EmptyNoWordBoundary
	decs["EmptyOp"] = reflect.TypeOf((*syntax.EmptyOp)(nil)).Elem()
	decs["EmptyOpContext"] = syntax.EmptyOpContext
	decs["EmptyWordBoundary"] = syntax.EmptyWordBoundary
	decs["ErrInternalError"] = syntax.ErrInternalError
	decs["ErrInvalidCharClass"] = syntax.ErrInvalidCharClass
	decs["ErrInvalidCharRange"] = syntax.ErrInvalidCharRange
	decs["ErrInvalidEscape"] = syntax.ErrInvalidEscape
	decs["ErrInvalidNamedCapture"] = syntax.ErrInvalidNamedCapture
	decs["ErrInvalidPerlOp"] = syntax.ErrInvalidPerlOp
	decs["ErrInvalidRepeatOp"] = syntax.ErrInvalidRepeatOp
	decs["ErrInvalidRepeatSize"] = syntax.ErrInvalidRepeatSize
	decs["ErrInvalidUTF8"] = syntax.ErrInvalidUTF8
	decs["ErrMissingBracket"] = syntax.ErrMissingBracket
	decs["ErrMissingParen"] = syntax.ErrMissingParen
	decs["ErrMissingRepeatArgument"] = syntax.ErrMissingRepeatArgument
	decs["ErrTrailingBackslash"] = syntax.ErrTrailingBackslash
	decs["ErrUnexpectedParen"] = syntax.ErrUnexpectedParen
	decs["Error"] = reflect.TypeOf((*syntax.Error)(nil)).Elem()
	decs["ErrorCode"] = reflect.TypeOf((*syntax.ErrorCode)(nil)).Elem()
	decs["Flags"] = reflect.TypeOf((*syntax.Flags)(nil)).Elem()
	decs["FoldCase"] = syntax.FoldCase
	decs["Inst"] = reflect.TypeOf((*syntax.Inst)(nil)).Elem()
	decs["InstAlt"] = syntax.InstAlt
	decs["InstAltMatch"] = syntax.InstAltMatch
	decs["InstCapture"] = syntax.InstCapture
	decs["InstEmptyWidth"] = syntax.InstEmptyWidth
	decs["InstFail"] = syntax.InstFail
	decs["InstMatch"] = syntax.InstMatch
	decs["InstNop"] = syntax.InstNop
	decs["InstOp"] = reflect.TypeOf((*syntax.InstOp)(nil)).Elem()
	decs["InstRune"] = syntax.InstRune
	decs["InstRune1"] = syntax.InstRune1
	decs["InstRuneAny"] = syntax.InstRuneAny
	decs["InstRuneAnyNotNL"] = syntax.InstRuneAnyNotNL
	decs["IsWordChar"] = syntax.IsWordChar
	decs["Literal"] = syntax.Literal
	decs["MatchNL"] = syntax.MatchNL
	decs["NonGreedy"] = syntax.NonGreedy
	decs["OneLine"] = syntax.OneLine
	decs["Op"] = reflect.TypeOf((*syntax.Op)(nil)).Elem()
	decs["OpAlternate"] = syntax.OpAlternate
	decs["OpAnyChar"] = syntax.OpAnyChar
	decs["OpAnyCharNotNL"] = syntax.OpAnyCharNotNL
	decs["OpBeginLine"] = syntax.OpBeginLine
	decs["OpBeginText"] = syntax.OpBeginText
	decs["OpCapture"] = syntax.OpCapture
	decs["OpCharClass"] = syntax.OpCharClass
	decs["OpConcat"] = syntax.OpConcat
	decs["OpEmptyMatch"] = syntax.OpEmptyMatch
	decs["OpEndLine"] = syntax.OpEndLine
	decs["OpEndText"] = syntax.OpEndText
	decs["OpLiteral"] = syntax.OpLiteral
	decs["OpNoMatch"] = syntax.OpNoMatch
	decs["OpNoWordBoundary"] = syntax.OpNoWordBoundary
	decs["OpPlus"] = syntax.OpPlus
	decs["OpQuest"] = syntax.OpQuest
	decs["OpRepeat"] = syntax.OpRepeat
	decs["OpStar"] = syntax.OpStar
	decs["OpWordBoundary"] = syntax.OpWordBoundary
	decs["POSIX"] = syntax.POSIX
	decs["Parse"] = syntax.Parse
	decs["Perl"] = syntax.Perl
	decs["PerlX"] = syntax.PerlX
	decs["Prog"] = reflect.TypeOf((*syntax.Prog)(nil)).Elem()
	decs["Regexp"] = reflect.TypeOf((*syntax.Regexp)(nil)).Elem()
	decs["Simple"] = syntax.Simple
	decs["UnicodeGroups"] = syntax.UnicodeGroups
	decs["WasDollar"] = syntax.WasDollar
	NativePackages["regexp/syntax"] = native.Package{
		Name:         "syntax",
		Declarations: decs,
	}
	// "sort"
	decs = make(native.Declarations, 21)
	decs["Float64Slice"] = reflect.TypeOf((*sort.Float64Slice)(nil)).Elem()
	decs["Float64s"] = sort.Float64s
	decs["Float64sAreSorted"] = sort.Float64sAreSorted
	decs["IntSlice"] = reflect.TypeOf((*sort.IntSlice)(nil)).Elem()
	decs["Interface"] = reflect.TypeOf((*sort.Interface)(nil)).Elem()
	decs["Ints"] = sort.Ints
	decs["IntsAreSorted"] = sort.IntsAreSorted
	decs["IsSorted"] = sort.IsSorted
	decs["Reverse"] = sort.Reverse
	decs["Search"] = sort.Search
	decs["SearchFloat64s"] = sort.SearchFloat64s
	decs["SearchInts"] = sort.SearchInts
	decs["SearchStrings"] = sort.SearchStrings
	decs["Slice"] = sort.Slice
	decs["SliceIsSorted"] = sort.SliceIsSorted
	decs["SliceStable"] = sort.SliceStable
	decs["Sort"] = sort.Sort
	decs["Stable"] = sort.Stable
	decs["StringSlice"] = reflect.TypeOf((*sort.StringSlice)(nil)).Elem()
	decs["Strings"] = sort.Strings
	decs["StringsAreSorted"] = sort.StringsAreSorted
	NativePackages["sort"] = native.Package{
		Name:         "sort",
		Declarations: decs,
	}
	// "strconv"
	decs = make(native.Declarations, 38)
	decs["AppendBool"] = strconv.AppendBool
	decs["AppendFloat"] = strconv.AppendFloat
	decs["AppendInt"] = strconv.AppendInt
	decs["AppendQuote"] = strconv.AppendQuote
	decs["AppendQuoteRune"] = strconv.AppendQuoteRune
	decs["AppendQuoteRuneToASCII"] = strconv.AppendQuoteRuneToASCII
	decs["AppendQuoteRuneToGraphic"] = strconv.AppendQuoteRuneToGraphic
	decs["AppendQuoteToASCII"] = strconv.AppendQuoteToASCII
	decs["AppendQuoteToGraphic"] = strconv.AppendQuoteToGraphic
	decs["AppendUint"] = strconv.AppendUint
	decs["Atoi"] = strconv.Atoi
	decs["CanBackquote"] = strconv.CanBackquote
	decs["ErrRange"] = &strconv.ErrRange
	decs["ErrSyntax"] = &strconv.ErrSyntax
	decs["FormatBool"] = strconv.FormatBool
	decs["FormatComplex"] = strconv.FormatComplex
	decs["FormatFloat"] = strconv.FormatFloat
	decs["FormatInt"] = strconv.FormatInt
	decs["FormatUint"] = strconv.FormatUint
	decs["IntSize"] = native.UntypedNumericConst("64")
	decs["IsGraphic"] = strconv.IsGraphic
	decs["IsPrint"] = strconv.IsPrint
	decs["Itoa"] = strconv.Itoa
	decs["NumError"] = reflect.TypeOf((*strconv.NumError)(nil)).Elem()
	decs["ParseBool"] = strconv.ParseBool
	decs["ParseComplex"] = strconv.ParseComplex
	decs["ParseFloat"] = strconv.ParseFloat
	decs["ParseInt"] = strconv.ParseInt
	decs["ParseUint"] = strconv.ParseUint
	decs["Quote"] = strconv.Quote
	decs["QuoteRune"] = strconv.QuoteRune
	decs["QuoteRuneToASCII"] = strconv.QuoteRuneToASCII
	decs["QuoteRuneToGraphic"] = strconv.QuoteRuneToGraphic
	decs["QuoteToASCII"] = strconv.QuoteToASCII
	decs["QuoteToGraphic"] = strconv.QuoteToGraphic
	decs["QuotedPrefix"] = strconv.QuotedPrefix
	decs["Unquote"] = strconv.Unquote
	decs["UnquoteChar"] = strconv.UnquoteChar
	NativePackages["strconv"] = native.Package{
		Name:         "strconv",
		Declarations: decs,
	}
	// "strings"
	decs = make(native.Declarations, 52)
	decs["Builder"] = reflect.TypeOf((*strings.Builder)(nil)).Elem()
	decs["Clone"] = strings.Clone
	decs["Compare"] = strings.Compare
	decs["Contains"] = strings.Contains
	decs["ContainsAny"] = strings.ContainsAny
	decs["ContainsRune"] = strings.ContainsRune
	decs["Count"] = strings.Count
	decs["Cut"] = strings.Cut
	decs["EqualFold"] = strings.EqualFold
	decs["Fields"] = strings.Fields
	decs["FieldsFunc"] = strings.FieldsFunc
	decs["HasPrefix"] = strings.HasPrefix
	decs["HasSuffix"] = strings.HasSuffix
	decs["Index"] = strings.Index
	decs["IndexAny"] = strings.IndexAny
	decs["IndexByte"] = strings.IndexByte
	decs["IndexFunc"] = strings.IndexFunc
	decs["IndexRune"] = strings.IndexRune
	decs["Join"] = strings.Join
	decs["LastIndex"] = strings.LastIndex
	decs["LastIndexAny"] = strings.LastIndexAny
	decs["LastIndexByte"] = strings.LastIndexByte
	decs["LastIndexFunc"] = strings.LastIndexFunc
	decs["Map"] = strings.Map
	decs["NewReader"] = strings.NewReader
	decs["NewReplacer"] = strings.NewReplacer
	decs["Reader"] = reflect.TypeOf((*strings.Reader)(nil)).Elem()
	decs["Repeat"] = strings.Repeat
	decs["Replace"] = strings.Replace
	decs["ReplaceAll"] = strings.ReplaceAll
	decs["Replacer"] = reflect.TypeOf((*strings.Replacer)(nil)).Elem()
	decs["Split"] = strings.Split
	decs["SplitAfter"] = strings.SplitAfter
	decs["SplitAfterN"] = strings.SplitAfterN
	decs["SplitN"] = strings.SplitN
	decs["Title"] = strings.Title
	decs["ToLower"] = strings.ToLower
	decs["ToLowerSpecial"] = strings.ToLowerSpecial
	decs["ToTitle"] = strings.ToTitle
	decs["ToTitleSpecial"] = strings.ToTitleSpecial
	decs["ToUpper"] = strings.ToUpper
	decs["ToUpperSpecial"] = strings.ToUpperSpecial
	decs["ToValidUTF8"] = strings.ToValidUTF8
	decs["Trim"] = strings.Trim
	decs["TrimFunc"] = strings.TrimFunc
	decs["TrimLeft"] = strings.TrimLeft
	decs["TrimLeftFunc"] = strings.TrimLeftFunc
	decs["TrimPrefix"] = strings.TrimPrefix
	decs["TrimRight"] = strings.TrimRight
	decs["TrimRightFunc"] = strings.TrimRightFunc
	decs["TrimSpace"] = strings.TrimSpace
	decs["TrimSuffix"] = strings.TrimSuffix
	NativePackages["strings"] = native.Package{
		Name:         "strings",
		Declarations: decs,
	}
	// "sync"
	decs = make(native.Declarations, 9)
	decs["Cond"] = reflect.TypeOf((*sync.Cond)(nil)).Elem()
	decs["Locker"] = reflect.TypeOf((*sync.Locker)(nil)).Elem()
	decs["Map"] = reflect.TypeOf((*sync.Map)(nil)).Elem()
	decs["Mutex"] = reflect.TypeOf((*sync.Mutex)(nil)).Elem()
	decs["NewCond"] = sync.NewCond
	decs["Once"] = reflect.TypeOf((*sync.Once)(nil)).Elem()
	decs["Pool"] = reflect.TypeOf((*sync.Pool)(nil)).Elem()
	decs["RWMutex"] = reflect.TypeOf((*sync.RWMutex)(nil)).Elem()
	decs["WaitGroup"] = reflect.TypeOf((*sync.WaitGroup)(nil)).Elem()
	NativePackages["sync"] = native.Package{
		Name:         "sync",
		Declarations: decs,
	}
	// "sync/atomic"
	decs = make(native.Declarations, 30)
	decs["AddInt32"] = atomic.AddInt32
	decs["AddInt64"] = atomic.AddInt64
	decs["AddUint32"] = atomic.AddUint32
	decs["AddUint64"] = atomic.AddUint64
	decs["AddUintptr"] = atomic.AddUintptr
	decs["CompareAndSwapInt32"] = atomic.CompareAndSwapInt32
	decs["CompareAndSwapInt64"] = atomic.CompareAndSwapInt64
	decs["CompareAndSwapPointer"] = atomic.CompareAndSwapPointer
	decs["CompareAndSwapUint32"] = atomic.CompareAndSwapUint32
	decs["CompareAndSwapUint64"] = atomic.CompareAndSwapUint64
	decs["CompareAndSwapUintptr"] = atomic.CompareAndSwapUintptr
	decs["LoadInt32"] = atomic.LoadInt32
	decs["LoadInt64"] = atomic.LoadInt64
	decs["LoadPointer"] = atomic.LoadPointer
	decs["LoadUint32"] = atomic.LoadUint32
	decs["LoadUint64"] = atomic.LoadUint64
	decs["LoadUintptr"] = atomic.LoadUintptr
	decs["StoreInt32"] = atomic.StoreInt32
	decs["StoreInt64"] = atomic.StoreInt64
	decs["StorePointer"] = atomic.StorePointer
	decs["StoreUint32"] = atomic.StoreUint32
	decs["StoreUint64"] = atomic.StoreUint64
	decs["StoreUintptr"] = atomic.StoreUintptr
	decs["SwapInt32"] = atomic.SwapInt32
	decs["SwapInt64"] = atomic.SwapInt64
	decs["SwapPointer"] = atomic.SwapPointer
	decs["SwapUint32"] = atomic.SwapUint32
	decs["SwapUint64"] = atomic.SwapUint64
	decs["SwapUintptr"] = atomic.SwapUintptr
	decs["Value"] = reflect.TypeOf((*atomic.Value)(nil)).Elem()
	NativePackages["sync/atomic"] = native.Package{
		Name:         "atomic",
		Declarations: decs,
	}
	// "text/scanner"
	decs = make(native.Declarations, 21)
	decs["Char"] = native.UntypedNumericConst("-5")
	decs["Comment"] = native.UntypedNumericConst("-8")
	decs["EOF"] = native.UntypedNumericConst("-1")
	decs["Float"] = native.UntypedNumericConst("-4")
	decs["GoTokens"] = native.UntypedNumericConst("1012")
	decs["GoWhitespace"] = native.UntypedNumericConst("4294977024")
	decs["Ident"] = native.UntypedNumericConst("-2")
	decs["Int"] = native.UntypedNumericConst("-3")
	decs["Position"] = reflect.TypeOf((*scanner.Position)(nil)).Elem()
	decs["RawString"] = native.UntypedNumericConst("-7")
	decs["ScanChars"] = native.UntypedNumericConst("32")
	decs["ScanComments"] = native.UntypedNumericConst("256")
	decs["ScanFloats"] = native.UntypedNumericConst("16")
	decs["ScanIdents"] = native.UntypedNumericConst("4")
	decs["ScanInts"] = native.UntypedNumericConst("8")
	decs["ScanRawStrings"] = native.UntypedNumericConst("128")
	decs["ScanStrings"] = native.UntypedNumericConst("64")
	decs["Scanner"] = reflect.TypeOf((*scanner.Scanner)(nil)).Elem()
	decs["SkipComments"] = native.UntypedNumericConst("512")
	decs["String"] = native.UntypedNumericConst("-6")
	decs["TokenString"] = scanner.TokenString
	NativePackages["text/scanner"] = native.Package{
		Name:         "scanner",
		Declarations: decs,
	}
	// "text/tabwriter"
	decs = make(native.Declarations, 9)
	decs["AlignRight"] = tabwriter.AlignRight
	decs["Debug"] = tabwriter.Debug
	decs["DiscardEmptyColumns"] = tabwriter.DiscardEmptyColumns
	decs["Escape"] = native.UntypedNumericConst("255")
	decs["FilterHTML"] = tabwriter.FilterHTML
	decs["NewWriter"] = tabwriter.NewWriter
	decs["StripEscape"] = tabwriter.StripEscape
	decs["TabIndent"] = tabwriter.TabIndent
	decs["Writer"] = reflect.TypeOf((*tabwriter.Writer)(nil)).Elem()
	NativePackages["text/tabwriter"] = native.Package{
		Name:         "tabwriter",
		Declarations: decs,
	}
	// "time"
	decs = make(native.Declarations, 70)
	decs["ANSIC"] = native.UntypedStringConst("Mon Jan _2 15:04:05 2006")
	decs["After"] = time.After
	decs["AfterFunc"] = time.AfterFunc
	decs["April"] = time.April
	decs["August"] = time.August
	decs["Date"] = time.Date
	decs["December"] = time.December
	decs["Duration"] = reflect.TypeOf((*time.Duration)(nil)).Elem()
	decs["February"] = time.February
	decs["FixedZone"] = time.FixedZone
	decs["Friday"] = time.Friday
	decs["Hour"] = time.Hour
	decs["January"] = time.January
	decs["July"] = time.July
	decs["June"] = time.June
	decs["Kitchen"] = native.UntypedStringConst("3:04PM")
	decs["Layout"] = native.UntypedStringConst("01/02 03:04:05PM '06 -0700")
	decs["LoadLocation"] = time.LoadLocation
	decs["LoadLocationFromTZData"] = time.LoadLocationFromTZData
	decs["Local"] = &time.Local
	decs["Location"] = reflect.TypeOf((*time.Location)(nil)).Elem()
	decs["March"] = time.March
	decs["May"] = time.May
	decs["Microsecond"] = time.Microsecond
	decs["Millisecond"] = time.Millisecond
	decs["Minute"] = time.Minute
	decs["Monday"] = time.Monday
	decs["Month"] = reflect.TypeOf((*time.Month)(nil)).Elem()
	decs["Nanosecond"] = time.Nanosecond
	decs["NewTicker"] = time.NewTicker
	decs["NewTimer"] = time.NewTimer
	decs["November"] = time.November
	decs["Now"] = time.Now
	decs["October"] = time.October
	decs["Parse"] = time.Parse
	decs["ParseDuration"] = time.ParseDuration
	decs["ParseError"] = reflect.TypeOf((*time.ParseError)(nil)).Elem()
	decs["ParseInLocation"] = time.ParseInLocation
	decs["RFC1123"] = native.UntypedStringConst("Mon, 02 Jan 2006 15:04:05 MST")
	decs["RFC1123Z"] = native.UntypedStringConst("Mon, 02 Jan 2006 15:04:05 -0700")
	decs["RFC3339"] = native.UntypedStringConst("2006-01-02T15:04:05Z07:00")
	decs["RFC3339Nano"] = native.UntypedStringConst("2006-01-02T15:04:05.999999999Z07:00")
	decs["RFC822"] = native.UntypedStringConst("02 Jan 06 15:04 MST")
	decs["RFC822Z"] = native.UntypedStringConst("02 Jan 06 15:04 -0700")
	decs["RFC850"] = native.UntypedStringConst("Monday, 02-Jan-06 15:04:05 MST")
	decs["RubyDate"] = native.UntypedStringConst("Mon Jan 02 15:04:05 -0700 2006")
	decs["Saturday"] = time.Saturday
	decs["Second"] = time.Second
	decs["September"] = time.September
	decs["Since"] = time.Since
	decs["Sleep"] = time.Sleep
	decs["Stamp"] = native.UntypedStringConst("Jan _2 15:04:05")
	decs["StampMicro"] = native.UntypedStringConst("Jan _2 15:04:05.000000")
	decs["StampMilli"] = native.UntypedStringConst("Jan _2 15:04:05.000")
	decs["StampNano"] = native.UntypedStringConst("Jan _2 15:04:05.000000000")
	decs["Sunday"] = time.Sunday
	decs["Thursday"] = time.Thursday
	decs["Tick"] = time.Tick
	decs["Ticker"] = reflect.TypeOf((*time.Ticker)(nil)).Elem()
	decs["Time"] = reflect.TypeOf((*time.Time)(nil)).Elem()
	decs["Timer"] = reflect.TypeOf((*time.Timer)(nil)).Elem()
	decs["Tuesday"] = time.Tuesday
	decs["UTC"] = &time.UTC
	decs["Unix"] = time.Unix
	decs["UnixDate"] = native.UntypedStringConst("Mon Jan _2 15:04:05 MST 2006")
	decs["UnixMicro"] = time.UnixMicro
	decs["UnixMilli"] = time.UnixMilli
	decs["Until"] = time.Until
	decs["Wednesday"] = time.Wednesday
	decs["Weekday"] = reflect.TypeOf((*time.Weekday)(nil)).Elem()
	NativePackages["time"] = native.Package{
		Name:         "time",
		Declarations: decs,
	}
	// "unicode"
	decs = make(native.Declarations, 284)
	decs["ASCII_Hex_Digit"] = &unicode.ASCII_Hex_Digit
	decs["Adlam"] = &unicode.Adlam
	decs["Ahom"] = &unicode.Ahom
	decs["Anatolian_Hieroglyphs"] = &unicode.Anatolian_Hieroglyphs
	decs["Arabic"] = &unicode.Arabic
	decs["Armenian"] = &unicode.Armenian
	decs["Avestan"] = &unicode.Avestan
	decs["AzeriCase"] = &unicode.AzeriCase
	decs["Balinese"] = &unicode.Balinese
	decs["Bamum"] = &unicode.Bamum
	decs["Bassa_Vah"] = &unicode.Bassa_Vah
	decs["Batak"] = &unicode.Batak
	decs["Bengali"] = &unicode.Bengali
	decs["Bhaiksuki"] = &unicode.Bhaiksuki
	decs["Bidi_Control"] = &unicode.Bidi_Control
	decs["Bopomofo"] = &unicode.Bopomofo
	decs["Brahmi"] = &unicode.Brahmi
	decs["Braille"] = &unicode.Braille
	decs["Buginese"] = &unicode.Buginese
	decs["Buhid"] = &unicode.Buhid
	decs["C"] = &unicode.C
	decs["Canadian_Aboriginal"] = &unicode.Canadian_Aboriginal
	decs["Carian"] = &unicode.Carian
	decs["CaseRange"] = reflect.TypeOf((*unicode.CaseRange)(nil)).Elem()
	decs["CaseRanges"] = &unicode.CaseRanges
	decs["Categories"] = &unicode.Categories
	decs["Caucasian_Albanian"] = &unicode.Caucasian_Albanian
	decs["Cc"] = &unicode.Cc
	decs["Cf"] = &unicode.Cf
	decs["Chakma"] = &unicode.Chakma
	decs["Cham"] = &unicode.Cham
	decs["Cherokee"] = &unicode.Cherokee
	decs["Chorasmian"] = &unicode.Chorasmian
	decs["Co"] = &unicode.Co
	decs["Common"] = &unicode.Common
	decs["Coptic"] = &unicode.Coptic
	decs["Cs"] = &unicode.Cs
	decs["Cuneiform"] = &unicode.Cuneiform
	decs["Cypriot"] = &unicode.Cypriot
	decs["Cyrillic"] = &unicode.Cyrillic
	decs["Dash"] = &unicode.Dash
	decs["Deprecated"] = &unicode.Deprecated
	decs["Deseret"] = &unicode.Deseret
	decs["Devanagari"] = &unicode.Devanagari
	decs["Diacritic"] = &unicode.Diacritic
	decs["Digit"] = &unicode.Digit
	decs["Dives_Akuru"] = &unicode.Dives_Akuru
	decs["Dogra"] = &unicode.Dogra
	decs["Duployan"] = &unicode.Duployan
	decs["Egyptian_Hieroglyphs"] = &unicode.Egyptian_Hieroglyphs
	decs["Elbasan"] = &unicode.Elbasan
	decs["Elymaic"] = &unicode.Elymaic
	decs["Ethiopic"] = &unicode.Ethiopic
	decs["Extender"] = &unicode.Extender
	decs["FoldCategory"] = &unicode.FoldCategory
	decs["FoldScript"] = &unicode.FoldScript
	decs["Georgian"] = &unicode.Georgian
	decs["Glagolitic"] = &unicode.Glagolitic
	decs["Gothic"] = &unicode.Gothic
	decs["Grantha"] = &unicode.Grantha
	decs["GraphicRanges"] = &unicode.GraphicRanges
	decs["Greek"] = &unicode.Greek
	decs["Gujarati"] = &unicode.Gujarati
	decs["Gunjala_Gondi"] = &unicode.Gunjala_Gondi
	decs["Gurmukhi"] = &unicode.Gurmukhi
	decs["Han"] = &unicode.Han
	decs["Hangul"] = &unicode.Hangul
	decs["Hanifi_Rohingya"] = &unicode.Hanifi_Rohingya
	decs["Hanunoo"] = &unicode.Hanunoo
	decs["Hatran"] = &unicode.Hatran
	decs["Hebrew"] = &unicode.Hebrew
	decs["Hex_Digit"] = &unicode.Hex_Digit
	decs["Hiragana"] = &unicode.Hiragana
	decs["Hyphen"] = &unicode.Hyphen
	decs["IDS_Binary_Operator"] = &unicode.IDS_Binary_Operator
	decs["IDS_Trinary_Operator"] = &unicode.IDS_Trinary_Operator
	decs["Ideographic"] = &unicode.Ideographic
	decs["Imperial_Aramaic"] = &unicode.Imperial_Aramaic
	decs["In"] = unicode.In
	decs["Inherited"] = &unicode.Inherited
	decs["Inscriptional_Pahlavi"] = &unicode.Inscriptional_Pahlavi
	decs["Inscriptional_Parthian"] = &unicode.Inscriptional_Parthian
	decs["Is"] = unicode.Is
	decs["IsControl"] = unicode.IsControl
	decs["IsDigit"] = unicode.IsDigit
	decs["IsGraphic"] = unicode.IsGraphic
	decs["IsLetter"] = unicode.IsLetter
	decs["IsLower"] = unicode.IsLower
	decs["IsMark"] = unicode.IsMark
	decs["IsNumber"] = unicode.IsNumber
	decs["IsOneOf"] = unicode.IsOneOf
	decs["IsPrint"] = unicode.IsPrint
	decs["IsPunct"] = unicode.IsPunct
	decs["IsSpace"] = unicode.IsSpace
	decs["IsSymbol"] = unicode.IsSymbol
	decs["IsTitle"] = unicode.IsTitle
	decs["IsUpper"] = unicode.IsUpper
	decs["Javanese"] = &unicode.Javanese
	decs["Join_Control"] = &unicode.Join_Control
	decs["Kaithi"] = &unicode.Kaithi
	decs["Kannada"] = &unicode.Kannada
	decs["Katakana"] = &unicode.Katakana
	decs["Kayah_Li"] = &unicode.Kayah_Li
	decs["Kharoshthi"] = &unicode.Kharoshthi
	decs["Khitan_Small_Script"] = &unicode.Khitan_Small_Script
	decs["Khmer"] = &unicode.Khmer
	decs["Khojki"] = &unicode.Khojki
	decs["Khudawadi"] = &unicode.Khudawadi
	decs["L"] = &unicode.L
	decs["Lao"] = &unicode.Lao
	decs["Latin"] = &unicode.Latin
	decs["Lepcha"] = &unicode.Lepcha
	decs["Letter"] = &unicode.Letter
	decs["Limbu"] = &unicode.Limbu
	decs["Linear_A"] = &unicode.Linear_A
	decs["Linear_B"] = &unicode.Linear_B
	decs["Lisu"] = &unicode.Lisu
	decs["Ll"] = &unicode.Ll
	decs["Lm"] = &unicode.Lm
	decs["Lo"] = &unicode.Lo
	decs["Logical_Order_Exception"] = &unicode.Logical_Order_Exception
	decs["Lower"] = &unicode.Lower
	decs["LowerCase"] = native.UntypedNumericConst("1")
	decs["Lt"] = &unicode.Lt
	decs["Lu"] = &unicode.Lu
	decs["Lycian"] = &unicode.Lycian
	decs["Lydian"] = &unicode.Lydian
	decs["M"] = &unicode.M
	decs["Mahajani"] = &unicode.Mahajani
	decs["Makasar"] = &unicode.Makasar
	decs["Malayalam"] = &unicode.Malayalam
	decs["Mandaic"] = &unicode.Mandaic
	decs["Manichaean"] = &unicode.Manichaean
	decs["Marchen"] = &unicode.Marchen
	decs["Mark"] = &unicode.Mark
	decs["Masaram_Gondi"] = &unicode.Masaram_Gondi
	decs["MaxASCII"] = native.UntypedNumericConst("127")
	decs["MaxCase"] = native.UntypedNumericConst("3")
	decs["MaxLatin1"] = native.UntypedNumericConst("255")
	decs["MaxRune"] = native.UntypedNumericConst("1114111")
	decs["Mc"] = &unicode.Mc
	decs["Me"] = &unicode.Me
	decs["Medefaidrin"] = &unicode.Medefaidrin
	decs["Meetei_Mayek"] = &unicode.Meetei_Mayek
	decs["Mende_Kikakui"] = &unicode.Mende_Kikakui
	decs["Meroitic_Cursive"] = &unicode.Meroitic_Cursive
	decs["Meroitic_Hieroglyphs"] = &unicode.Meroitic_Hieroglyphs
	decs["Miao"] = &unicode.Miao
	decs["Mn"] = &unicode.Mn
	decs["Modi"] = &unicode.Modi
	decs["Mongolian"] = &unicode.Mongolian
	decs["Mro"] = &unicode.Mro
	decs["Multani"] = &unicode.Multani
	decs["Myanmar"] = &unicode.Myanmar
	decs["N"] = &unicode.N
	decs["Nabataean"] = &unicode.Nabataean
	decs["Nandinagari"] = &unicode.Nandinagari
	decs["Nd"] = &unicode.Nd
	decs["New_Tai_Lue"] = &unicode.New_Tai_Lue
	decs["Newa"] = &unicode.Newa
	decs["Nko"] = &unicode.Nko
	decs["Nl"] = &unicode.Nl
	decs["No"] = &unicode.No
	decs["Noncharacter_Code_Point"] = &unicode.Noncharacter_Code_Point
	decs["Number"] = &unicode.Number
	decs["Nushu"] = &unicode.Nushu
	decs["Nyiakeng_Puachue_Hmong"] = &unicode.Nyiakeng_Puachue_Hmong
	decs["Ogham"] = &unicode.Ogham
	decs["Ol_Chiki"] = &unicode.Ol_Chiki
	decs["Old_Hungarian"] = &unicode.Old_Hungarian
	decs["Old_Italic"] = &unicode.Old_Italic
	decs["Old_North_Arabian"] = &unicode.Old_North_Arabian
	decs["Old_Permic"] = &unicode.Old_Permic
	decs["Old_Persian"] = &unicode.Old_Persian
	decs["Old_Sogdian"] = &unicode.Old_Sogdian
	decs["Old_South_Arabian"] = &unicode.Old_South_Arabian
	decs["Old_Turkic"] = &unicode.Old_Turkic
	decs["Oriya"] = &unicode.Oriya
	decs["Osage"] = &unicode.Osage
	decs["Osmanya"] = &unicode.Osmanya
	decs["Other"] = &unicode.Other
	decs["Other_Alphabetic"] = &unicode.Other_Alphabetic
	decs["Other_Default_Ignorable_Code_Point"] = &unicode.Other_Default_Ignorable_Code_Point
	decs["Other_Grapheme_Extend"] = &unicode.Other_Grapheme_Extend
	decs["Other_ID_Continue"] = &unicode.Other_ID_Continue
	decs["Other_ID_Start"] = &unicode.Other_ID_Start
	decs["Other_Lowercase"] = &unicode.Other_Lowercase
	decs["Other_Math"] = &unicode.Other_Math
	decs["Other_Uppercase"] = &unicode.Other_Uppercase
	decs["P"] = &unicode.P
	decs["Pahawh_Hmong"] = &unicode.Pahawh_Hmong
	decs["Palmyrene"] = &unicode.Palmyrene
	decs["Pattern_Syntax"] = &unicode.Pattern_Syntax
	decs["Pattern_White_Space"] = &unicode.Pattern_White_Space
	decs["Pau_Cin_Hau"] = &unicode.Pau_Cin_Hau
	decs["Pc"] = &unicode.Pc
	decs["Pd"] = &unicode.Pd
	decs["Pe"] = &unicode.Pe
	decs["Pf"] = &unicode.Pf
	decs["Phags_Pa"] = &unicode.Phags_Pa
	decs["Phoenician"] = &unicode.Phoenician
	decs["Pi"] = &unicode.Pi
	decs["Po"] = &unicode.Po
	decs["Prepended_Concatenation_Mark"] = &unicode.Prepended_Concatenation_Mark
	decs["PrintRanges"] = &unicode.PrintRanges
	decs["Properties"] = &unicode.Properties
	decs["Ps"] = &unicode.Ps
	decs["Psalter_Pahlavi"] = &unicode.Psalter_Pahlavi
	decs["Punct"] = &unicode.Punct
	decs["Quotation_Mark"] = &unicode.Quotation_Mark
	decs["Radical"] = &unicode.Radical
	decs["Range16"] = reflect.TypeOf((*unicode.Range16)(nil)).Elem()
	decs["Range32"] = reflect.TypeOf((*unicode.Range32)(nil)).Elem()
	decs["RangeTable"] = reflect.TypeOf((*unicode.RangeTable)(nil)).Elem()
	decs["Regional_Indicator"] = &unicode.Regional_Indicator
	decs["Rejang"] = &unicode.Rejang
	decs["ReplacementChar"] = native.UntypedNumericConst("65533")
	decs["Runic"] = &unicode.Runic
	decs["S"] = &unicode.S
	decs["STerm"] = &unicode.STerm
	decs["Samaritan"] = &unicode.Samaritan
	decs["Saurashtra"] = &unicode.Saurashtra
	decs["Sc"] = &unicode.Sc
	decs["Scripts"] = &unicode.Scripts
	decs["Sentence_Terminal"] = &unicode.Sentence_Terminal
	decs["Sharada"] = &unicode.Sharada
	decs["Shavian"] = &unicode.Shavian
	decs["Siddham"] = &unicode.Siddham
	decs["SignWriting"] = &unicode.SignWriting
	decs["SimpleFold"] = unicode.SimpleFold
	decs["Sinhala"] = &unicode.Sinhala
	decs["Sk"] = &unicode.Sk
	decs["Sm"] = &unicode.Sm
	decs["So"] = &unicode.So
	decs["Soft_Dotted"] = &unicode.Soft_Dotted
	decs["Sogdian"] = &unicode.Sogdian
	decs["Sora_Sompeng"] = &unicode.Sora_Sompeng
	decs["Soyombo"] = &unicode.Soyombo
	decs["Space"] = &unicode.Space
	decs["SpecialCase"] = reflect.TypeOf((*unicode.SpecialCase)(nil)).Elem()
	decs["Sundanese"] = &unicode.Sundanese
	decs["Syloti_Nagri"] = &unicode.Syloti_Nagri
	decs["Symbol"] = &unicode.Symbol
	decs["Syriac"] = &unicode.Syriac
	decs["Tagalog"] = &unicode.Tagalog
	decs["Tagbanwa"] = &unicode.Tagbanwa
	decs["Tai_Le"] = &unicode.Tai_Le
	decs["Tai_Tham"] = &unicode.Tai_Tham
	decs["Tai_Viet"] = &unicode.Tai_Viet
	decs["Takri"] = &unicode.Takri
	decs["Tamil"] = &unicode.Tamil
	decs["Tangut"] = &unicode.Tangut
	decs["Telugu"] = &unicode.Telugu
	decs["Terminal_Punctuation"] = &unicode.Terminal_Punctuation
	decs["Thaana"] = &unicode.Thaana
	decs["Thai"] = &unicode.Thai
	decs["Tibetan"] = &unicode.Tibetan
	decs["Tifinagh"] = &unicode.Tifinagh
	decs["Tirhuta"] = &unicode.Tirhuta
	decs["Title"] = &unicode.Title
	decs["TitleCase"] = native.UntypedNumericConst("2")
	decs["To"] = unicode.To
	decs["ToLower"] = unicode.ToLower
	decs["ToTitle"] = unicode.ToTitle
	decs["ToUpper"] = unicode.ToUpper
	decs["TurkishCase"] = &unicode.TurkishCase
	decs["Ugaritic"] = &unicode.Ugaritic
	decs["Unified_Ideograph"] = &unicode.Unified_Ideograph
	decs["Upper"] = &unicode.Upper
	decs["UpperCase"] = native.UntypedNumericConst("0")
	decs["UpperLower"] = native.UntypedNumericConst("1114112")
	decs["Vai"] = &unicode.Vai
	decs["Variation_Selector"] = &unicode.Variation_Selector
	decs["Version"] = native.UntypedStringConst("13.0.0")
	decs["Wancho"] = &unicode.Wancho
	decs["Warang_Citi"] = &unicode.Warang_Citi
	decs["White_Space"] = &unicode.White_Space
	decs["Yezidi"] = &unicode.Yezidi
	decs["Yi"] = &unicode.Yi
	decs["Z"] = &unicode.Z
	decs["Zanabazar_Square"] = &unicode.Zanabazar_Square
	decs["Zl"] = &unicode.Zl
	decs["Zp"] = &unicode.Zp
	decs["Zs"] = &unicode.Zs
	NativePackages["unicode"] = native.Package{
		Name:         "unicode",
		Declarations: decs,
	}
	// "unicode/utf16"
	decs = make(native.Declarations, 5)
	decs["Decode"] = utf16.Decode
	decs["DecodeRune"] = utf16.DecodeRune
	decs["Encode"] = utf16.Encode
	decs["EncodeRune"] = utf16.EncodeRune
	decs["IsSurrogate"] = utf16.IsSurrogate
	NativePackages["unicode/utf16"] = native.Package{
		Name:         "utf16",
		Declarations: decs,
	}
	// "unicode/utf8"
	decs = make(native.Declarations, 19)
	decs["AppendRune"] = utf8.AppendRune
	decs["DecodeLastRune"] = utf8.DecodeLastRune
	decs["DecodeLastRuneInString"] = utf8.DecodeLastRuneInString
	decs["DecodeRune"] = utf8.DecodeRune
	decs["DecodeRuneInString"] = utf8.DecodeRuneInString
	decs["EncodeRune"] = utf8.EncodeRune
	decs["FullRune"] = utf8.FullRune
	decs["FullRuneInString"] = utf8.FullRuneInString
	decs["MaxRune"] = native.UntypedNumericConst("1114111")
	decs["RuneCount"] = utf8.RuneCount
	decs["RuneCountInString"] = utf8.RuneCountInString
	decs["RuneError"] = native.UntypedNumericConst("65533")
	decs["RuneLen"] = utf8.RuneLen
	decs["RuneSelf"] = native.UntypedNumericConst("128")
	decs["RuneStart"] = utf8.RuneStart
	decs["UTFMax"] = native.UntypedNumericConst("4")
	decs["Valid"] = utf8.Valid
	decs["ValidRune"] = utf8.ValidRune
	decs["ValidString"] = utf8.ValidString
	NativePackages["unicode/utf8"] = native.Package{
		Name:         "utf8",
		Declarations: decs,
	}
}
